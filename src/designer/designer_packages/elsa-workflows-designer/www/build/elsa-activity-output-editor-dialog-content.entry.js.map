{"file":"elsa-activity-output-editor-dialog-content.entry.esm.js","mappings":"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","names":["descriptorsStore","groupBy"],"sources":["./src/modules/workflow-definitions/components/workflow-properties/activity-output-editor-dialog-content.tsx"],"sourcesContent":["import {Component, h, Prop, Event, EventEmitter, Method} from \"@stencil/core\";\r\nimport {groupBy} from 'lodash';\r\nimport descriptorsStore from '../../../../data/descriptors-store';\r\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\r\nimport {InputDefinition, OutputDefinition} from \"../../models/entities\";\r\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\r\n\r\n@Component({\r\n  tag: 'elsa-activity-output-editor-dialog-content',\r\n  shadow: false\r\n})\r\nexport class ActivityOutputEditorDialogContent {\r\n  private formElement: HTMLFormElement;\r\n\r\n  @Prop() output: OutputDefinition;\r\n  @Event() outputChanged: EventEmitter<OutputDefinition>;\r\n\r\n  @Method()\r\n  async getOutput(): Promise<OutputDefinition> {\r\n    return this.getOutputInternal(this.formElement);\r\n  }\r\n\r\n  render() {\r\n    const output: OutputDefinition = this.output ?? {name: '', type: 'Object', isArray: false};\r\n    const outputTypeName = output.type;\r\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\r\n    const groupedTypes = groupBy(availableTypes, x => x.category);\r\n\r\n    return (\r\n      <div>\r\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\r\n          <div class=\"tw-pt-4\">\r\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">Edit output definition</h2>\r\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\r\n\r\n              <FormEntry fieldId=\"outputName\" label=\"Name\" hint=\"The technical name of the output.\">\r\n                <input type=\"text\" name=\"outputName\" id=\"outputName\" value={output.name}/>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"outputTypeName\" label=\"Type\" hint=\"The type of the output.\">\r\n                <select id=\"outputTypeName\" name=\"outputTypeName\">\r\n                  {Object.keys(groupedTypes).map(category => {\r\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\r\n                    return (<optgroup label={category}>\r\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == outputTypeName}>{descriptor.displayName}</option>)}\r\n                    </optgroup>);\r\n                  })}\r\n                </select>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"outputDisplayName\" label=\"Display name\" hint=\"The user friendly display name of the output.\">\r\n                <input type=\"text\" name=\"outputDisplayName\" id=\"outputDisplayName\" value={output.displayName}/>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"outputDescription\" label=\"Description\" hint=\"A description of the output.\">\r\n                <input type=\"text\" name=\"outputDescription\" id=\"outputDescription\" value={output.description}/>\r\n              </FormEntry>\r\n\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private onSubmit = async (e: Event) => {\r\n    e.preventDefault();\r\n    const form = e.target as HTMLFormElement;\r\n    const output = this.getOutputInternal(form);\r\n    this.outputChanged.emit(output);\r\n  };\r\n\r\n  private getOutputInternal = (form: HTMLFormElement): OutputDefinition => {\r\n    const formData = new FormData(form as HTMLFormElement);\r\n    const name = formData.get('outputName') as string;\r\n    const displayName = formData.get('outputDisplayName') as string;\r\n    const type = formData.get('outputTypeName') as string;\r\n    const description = formData.get('outputDescription') as string;\r\n    const output = this.output;\r\n\r\n    output.name = name;\r\n    output.type = type;\r\n    output.displayName = displayName;\r\n    output.description = description;\r\n\r\n    return output;\r\n  };\r\n\r\n}\r\n"],"version":3}