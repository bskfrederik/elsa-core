{"version":3,"names":["editorCss","WorkflowDefinitionEditor","constructor","hostRef","this","renderSelectedObject","selectedActivity","h","isReadonly","workflowDefinition","activity","variables","workflowDefinitionState","outputs","workflowDefinitionId","definitionId","onActivityUpdated","e","getWorkflowDefinitionInternal","async","flowchart","export","root","saveChanges","updatedWorkflowDefinition","console","debug","isLatest","hasWorkflowDefinitionAnyUpdatedData","isPublished","version","workflowVersions","find","v","workflowUpdated","emit","updateSelectedActivity","existingWorkflowDefinition","workflowDefinitionApi","get","versionOptions","updatedWorkflowDefinitionClone","cloneDeep","removeGuidsFromPortNames","isEqual","updateLayout","updateContainerLayout","panelClassName","panelExpanded","container","classList","remove","toggle","updateActivityInternal","args","updatePorts","updateActivity","saveChangesDebounced","onActivityPickerPanelStateChanged","expanded","onWorkflowEditorPanelStateChanged","onActivityEditorPanelStateChanged","onDragOver","preventDefault","onDrop","json","dataTransfer","getData","activityDescriptor","JSON","parse","addActivity","descriptor","x","pageX","y","pageY","onZoomToFit","zoomToFit","onAutoLayout","direction","autoLayout","detail","id","_b","_a","newId","originalId","_c","onWorkflowPropsUpdated","updatedTab","WorkflowPropertiesEditorTabs","Variables","currentSelectedActivity","onVersionSelected","workflowToView","importWorkflow","onDeleteVersionClicked","workflowToDelete","deleteVersion","latestWorkflowDefinition","loadWorkflowVersions","onRevertVersionClicked","workflowToRevert","revertVersion","eventBus","Container","EventBus","pluginRegistry","PluginRegistry","activityNameFormatter","ActivityNameFormatter","portProviderRegistry","PortProviderRegistry","debounce","WorkflowDefinitionsApi","handleMonacoLibPath","value","settings","MonacoEditorSettings","monacoLibPath","register","registry","ActivityDriverRegistry","getWorkflowDefinition","updateWorkflowDefinition","window","requestAnimationFrame","updateGraph","WorkflowEditorEventTypes","WorkflowDefinition","Imported","WorkflowEditor","WorkflowLoaded","workflowEditor","newRoot","name","materializerName","length","getVersions","sort","a","b","newWorkflow","Ready","childActivity","getActivity","render","state","WorkflowDefinitionTunnel","Provider","class","ref","el","position","PanelPosition","Left","onExpandedStateChanged","toolbox","key","rootActivity","interactiveMode","onActivitySelected","onChildActivitySelected","onGraphUpdated","Right","readonly","Bottom"],"sources":["./src/modules/workflow-definitions/components/editor.scss?tag=elsa-workflow-definition-editor","./src/modules/workflow-definitions/components/editor.tsx"],"sourcesContent":[":root {\n  --workflow-editor-width: 480px;\n  --activity-picker-width: 300px;\n  --activity-editor-height: 200px;\n}\n\n.x6-graph-scroller {\n  height: calc(100vh - var(--activity-editor-height) - 64px) !important;\n}\n\nelsa-flowchart {\n  position: absolute;\n  left: var(--activity-picker-width);\n  top: 54px;\n  right: var(--workflow-editor-width);\n  bottom: var(--activity-editor-height);\n}\n\n.elsa-panel-toolbar {\n  left: var(--activity-picker-width);\n  right: var(--workflow-editor-width);\n}\n\nelsa-panel.panel-state-expanded.elsa-activity-picker-container {\n  width: var(--activity-picker-width);\n}\n\nelsa-panel.panel-state-expanded.elsa-workflow-editor-container {\n  width: var(--workflow-editor-width);\n  right: 0;\n  left: unset;\n}\n\nelsa-panel.panel-state-expanded.elsa-activity-editor-container {\n  height: var(--activity-editor-height);\n  right: var(--workflow-editor-width);\n  left: var(--activity-picker-width);\n  bottom: 0;\n}\n\n.activity-picker-closed {\n  .activity-list {\n    display: none;\n  }\n\n  elsa-flowchart {\n    left: 0;\n  }\n}\n\n.object-editor-closed {\n  .object-editor-container {\n    display: none;\n  }\n\n  elsa-flowchart {\n    right: 0;\n  }\n}\n\n.activity-editor-closed {\n  .activity-editor-container {\n    display: none;\n  }\n\n  elsa-flowchart {\n    bottom: 0;\n  }\n}\n\n.panel-bottom {\n  width: calc(100vw - var(--workflow-editor-width) - var(--activity-picker-width));\n}\n","import {Component, Element, Event, EventEmitter, h, Listen, Method, Prop, State, Watch} from '@stencil/core';\nimport {debounce, isEqual} from 'lodash';\nimport {Container} from \"typedi\";\nimport {PanelPosition, PanelStateChangedArgs} from '../../../components/panel/models';\nimport {\n  Activity,\n  ActivityDescriptor,\n  ActivitySelectedArgs,\n  ChildActivitySelectedArgs,\n  ContainerSelectedArgs, GraphUpdatedArgs\n} from '../../../models';\nimport {ActivityDriverRegistry, ActivityNameFormatter, EventBus, PluginRegistry, PortProviderRegistry} from '../../../services';\nimport {MonacoEditorSettings} from \"../../../services/monaco-editor-settings\";\nimport {WorkflowDefinitionPropsUpdatedArgs, WorkflowDefinitionUpdatedArgs, ActivityUpdatedArgs, WorkflowEditorEventTypes} from \"../models/ui\";\nimport {WorkflowDefinition} from \"../models/entities\";\nimport {WorkflowDefinitionsApi} from \"../services/api\"\nimport WorkflowDefinitionTunnel, {WorkflowDefinitionState} from \"../state\";\nimport {LayoutDirection, UpdateActivityArgs} from \"../../flowchart/models\";\nimport {cloneDeep} from '@antv/x6/lib/util/object/object';\nimport {removeGuidsFromPortNames} from '../../../utils/graph';\nimport {WorkflowPropertiesEditorTabs} from '../models/props-editor-tabs';\n\n@Component({\n  tag: 'elsa-workflow-definition-editor',\n  styleUrl: 'editor.scss',\n})\nexport class WorkflowDefinitionEditor {\n  @Element() el: HTMLElsaWorkflowDefinitionEditorElement;\n\n  private readonly pluginRegistry: PluginRegistry;\n  private readonly eventBus: EventBus;\n  private readonly activityNameFormatter: ActivityNameFormatter;\n  private readonly portProviderRegistry: PortProviderRegistry;\n  private flowchart: HTMLElsaFlowchartElement;\n  private container: HTMLDivElement;\n  private toolbox: HTMLElsaWorkflowDefinitionEditorToolboxElement;\n  private readonly saveChangesDebounced: () => void;\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.pluginRegistry = Container.get(PluginRegistry);\n    this.activityNameFormatter = Container.get(ActivityNameFormatter);\n    this.portProviderRegistry = Container.get(PortProviderRegistry);\n    this.saveChangesDebounced = debounce(this.saveChanges, 1000);\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\n  }\n\n  @Prop() workflowDefinition?: WorkflowDefinition;\n  @Prop({attribute: 'monaco-lib-path'}) monacoLibPath: string;\n  @Event() workflowUpdated: EventEmitter<WorkflowDefinitionUpdatedArgs>\n  @State() private workflowDefinitionState: WorkflowDefinition;\n  @State() private selectedActivity?: Activity;\n  @State() private workflowVersions: Array<WorkflowDefinition> = [];\n\n  @Watch('monacoLibPath')\n  private handleMonacoLibPath(value: string) {\n    const settings = Container.get(MonacoEditorSettings);\n    settings.monacoLibPath = value;\n  }\n\n  @Watch('workflowDefinition')\n  async onWorkflowDefinitionChanged(value: WorkflowDefinition) {\n    await this.importWorkflow(value);\n  }\n\n  @Listen('resize', {target: 'window'})\n  private async handleResize() {\n    await this.updateLayout();\n  }\n\n  @Listen('containerSelected')\n  private async handleContainerSelected(e: CustomEvent<ContainerSelectedArgs>) {\n    this.selectedActivity = e.detail.activity;\n  }\n\n  @Method()\n  async getFlowchart(): Promise<HTMLElsaFlowchartElement> {\n    return this.flowchart;\n  }\n\n  @Method()\n  async registerActivityDrivers(register: (registry: ActivityDriverRegistry) => void): Promise<void> {\n    const registry = Container.get(ActivityDriverRegistry);\n    register(registry);\n  }\n\n  @Method()\n  getWorkflowDefinition(): Promise<WorkflowDefinition> {\n    return this.getWorkflowDefinitionInternal();\n  }\n\n  @Method()\n  async importWorkflow(workflowDefinition: WorkflowDefinition): Promise<void> {\n    await this.updateWorkflowDefinition(workflowDefinition);\n    await this.loadWorkflowVersions();\n\n    // Update the flowchart after state is updated.\n    window.requestAnimationFrame(async () => {\n      await this.flowchart.updateGraph();\n      await this.updateSelectedActivity();\n    });\n\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowDefinition.Imported, this, {workflowDefinition});\n  }\n\n  // Updates the workflow definition without importing it into the designer.\n  @Method()\n  async updateWorkflowDefinition(workflowDefinition: WorkflowDefinition): Promise<void> {\n    if (this.workflowDefinitionState != workflowDefinition) {\n      this.workflowDefinitionState = workflowDefinition;\n\n      window.requestAnimationFrame(async () => {\n        await this.updateSelectedActivity();\n        await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowEditor.WorkflowLoaded, this, {workflowEditor: this, workflowDefinition: workflowDefinition});\n      });\n    }\n  }\n\n  @Method()\n  async newWorkflow(): Promise<WorkflowDefinition> {\n\n    const newRoot = await this.flowchart.newRoot();\n\n    const workflowDefinition: WorkflowDefinition = {\n      root: newRoot,\n      id: '',\n      name: 'Workflow 1',\n      definitionId: '',\n      version: 1,\n      isLatest: true,\n      isPublished: false,\n      isReadonly: false,\n      materializerName: 'Json'\n    }\n\n    await this.updateWorkflowDefinition(workflowDefinition);\n    return workflowDefinition;\n  }\n\n  @Method()\n  async loadWorkflowVersions(): Promise<void> {\n    if (this.workflowDefinitionState.definitionId != null && this.workflowDefinitionState.definitionId.length > 0) {\n      const workflowVersions = await this.workflowDefinitionApi.getVersions(this.workflowDefinitionState.definitionId);\n      this.workflowVersions = workflowVersions.sort((a, b) => a.version > b.version ? -1 : 1);\n    } else {\n      this.workflowVersions = [];\n    }\n  }\n\n  @Method()\n  async updateActivity(activity: Activity) {\n    const args: UpdateActivityArgs = {\n      activity: activity,\n      id: activity.id,\n      originalId: activity.id\n    };\n    await this.updateActivityInternal(args);\n  }\n\n  async componentWillLoad() {\n    await this.updateWorkflowDefinition(this.workflowDefinition);\n    await this.loadWorkflowVersions();\n  }\n\n  async componentDidLoad() {\n    if (!this.workflowDefinitionState)\n      await this.newWorkflow();\n    else\n      await this.importWorkflow(this.workflowDefinitionState);\n\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowEditor.Ready, this, {workflowEditor: this, workflowDefinition: this.workflowDefinitionState});\n  }\n\n  private renderSelectedObject = () => {\n    if (!!this.selectedActivity)\n      return <elsa-activity-properties-editor\n        isReadonly={this.workflowDefinition.isReadonly}\n        activity={this.selectedActivity}\n        variables={this.workflowDefinitionState.variables}\n        outputs={this.workflowDefinitionState.outputs}\n        workflowDefinitionId={this.workflowDefinitionState.definitionId}\n        onActivityUpdated={e => this.onActivityUpdated(e)}/>;\n  }\n\n  private getWorkflowDefinitionInternal = async (): Promise<WorkflowDefinition> => {\n    const activity: Activity = await this.flowchart.export();\n    const workflowDefinition = this.workflowDefinitionState;\n    workflowDefinition.root = activity;\n    return workflowDefinition;\n  };\n\n  private saveChanges = async (): Promise<void> => {\n    const updatedWorkflowDefinition = this.workflowDefinitionState;\n\n\n    if (updatedWorkflowDefinition.isReadonly) {\n      console.debug('Workflow definition is readonly. Changes will not be saved.');\n      return;\n    }\n\n    if(!updatedWorkflowDefinition.isLatest) {\n      console.debug('Workflow definition is not the latest version. Changes will not be saved.');\n      return;\n    }\n\n    if (await this.hasWorkflowDefinitionAnyUpdatedData(updatedWorkflowDefinition)) {\n      // If workflow definition is published, override the latest version.\n      if (updatedWorkflowDefinition.isPublished) {\n        updatedWorkflowDefinition.version = this.workflowVersions.find(v => v.isLatest).version;\n      }\n      this.workflowUpdated.emit({workflowDefinition: this.workflowDefinitionState});\n    }\n\n    await this.updateSelectedActivity();\n  };\n\n  // To prevent redundant post requests to server, save changes only if there is a difference\n  // between existing workflow definition on server side and updated workflow definition on client side.\n  private hasWorkflowDefinitionAnyUpdatedData = async (updatedWorkflowDefinition: WorkflowDefinition): Promise<boolean> => {\n    const existingWorkflowDefinition = await this.workflowDefinitionApi.get({definitionId: updatedWorkflowDefinition.definitionId, versionOptions: {version: updatedWorkflowDefinition.version}});\n    const updatedWorkflowDefinitionClone = cloneDeep(updatedWorkflowDefinition);\n\n    removeGuidsFromPortNames(updatedWorkflowDefinitionClone.root);\n\n    return !isEqual(existingWorkflowDefinition, updatedWorkflowDefinitionClone);\n  }\n\n  private updateLayout = async () => {\n    await this.flowchart.updateLayout();\n  };\n\n  private updateContainerLayout = async (panelClassName: string, panelExpanded: boolean) => {\n\n    if (panelExpanded)\n      this.container.classList.remove(panelClassName);\n    else\n      this.container.classList.toggle(panelClassName, true);\n\n    await this.updateLayout();\n  }\n\n  private updateActivityInternal = async (args: UpdateActivityArgs) => {\n    args.updatePorts = true; // TODO: Make this configurable from a activity plugin.\n    await this.flowchart.updateActivity(args);\n    this.saveChangesDebounced();\n  }\n\n  private onActivityPickerPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('activity-picker-closed', e.expanded)\n  private onWorkflowEditorPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('object-editor-closed', e.expanded)\n  private onActivityEditorPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('activity-editor-closed', e.expanded)\n\n  private onDragOver = (e: DragEvent) => {\n    e.preventDefault();\n  };\n\n  private onDrop = async (e: DragEvent) => {\n    const json = e.dataTransfer.getData('activity-descriptor');\n    const activityDescriptor: ActivityDescriptor = JSON.parse(json);\n\n    await this.flowchart.addActivity({\n      descriptor: activityDescriptor,\n      x: e.pageX,\n      y: e.pageY\n    });\n  };\n\n  private onZoomToFit = async () => await this.flowchart.zoomToFit();\n\n  private onAutoLayout = async (direction: LayoutDirection) => {\n    await this.flowchart.autoLayout(direction);\n  };\n\n  private onActivityUpdated = async (e: CustomEvent<ActivityUpdatedArgs>) => {\n    const args: UpdateActivityArgs = {\n      activity: e.detail.activity,\n      id: e.detail.newId ?? e.detail.originalId ?? e.detail.activity.id,\n      originalId: e.detail.originalId ?? e.detail.activity.id\n    };\n\n    await this.updateActivityInternal(args);\n  }\n\n  private onWorkflowPropsUpdated = (e: CustomEvent<WorkflowDefinitionPropsUpdatedArgs>) => {\n    this.saveChangesDebounced();\n\n    if (e.detail.updatedTab == WorkflowPropertiesEditorTabs.Variables) {\n      const currentSelectedActivity = this.selectedActivity;\n      this.selectedActivity = null;\n      this.selectedActivity = currentSelectedActivity;\n    }\n  }\n\n  private async onActivitySelected(e: CustomEvent<ActivitySelectedArgs>) {\n    this.selectedActivity = e.detail.activity;\n  }\n\n  private async onChildActivitySelected(e: CustomEvent<ChildActivitySelectedArgs>) {\n    const {childActivity} = e.detail;\n    this.selectedActivity = childActivity;\n  }\n\n  private async onGraphUpdated(e: CustomEvent<GraphUpdatedArgs>) {\n    await this.updateSelectedActivity();\n    this.saveChangesDebounced();\n  }\n\n  private async updateSelectedActivity() {\n    if (!!this.selectedActivity)\n      this.selectedActivity = await this.flowchart?.getActivity(this.selectedActivity.id);\n  }\n\n  private onVersionSelected = async (e: CustomEvent<WorkflowDefinition>) => {\n    const workflowToView = e.detail;\n    const workflowDefinition = await this.workflowDefinitionApi.get({definitionId: workflowToView.definitionId, versionOptions: {version: workflowToView.version}});\n    await this.importWorkflow(workflowDefinition);\n  };\n\n  private onDeleteVersionClicked = async (e: CustomEvent<WorkflowDefinition>) => {\n    const workflowToDelete = e.detail;\n    await this.workflowDefinitionApi.deleteVersion({definitionId: workflowToDelete.definitionId, version: workflowToDelete.version});\n    const latestWorkflowDefinition = await this.workflowDefinitionApi.get({definitionId: workflowToDelete.definitionId, versionOptions: {isLatest: true}});\n    await this.loadWorkflowVersions();\n    await this.importWorkflow(latestWorkflowDefinition);\n  };\n\n  private onRevertVersionClicked = async (e: CustomEvent<WorkflowDefinition>) => {\n    const workflowToRevert = e.detail;\n    await this.workflowDefinitionApi.revertVersion({definitionId: workflowToRevert.definitionId, version: workflowToRevert.version});\n    const workflowDefinition = await this.workflowDefinitionApi.get({definitionId: workflowToRevert.definitionId, versionOptions: {isLatest: true}});\n    await this.loadWorkflowVersions();\n    await this.importWorkflow(workflowDefinition);\n  };\n\n  render() {\n    const workflowDefinition = this.workflowDefinitionState;\n\n    const state: WorkflowDefinitionState = {\n      workflowDefinition: this.workflowDefinitionState\n    };\n\n    return (\n      <WorkflowDefinitionTunnel.Provider state={state}>\n        <div class=\"tw-absolute tw-inset-0\" ref={el => this.container = el}>\n          <elsa-workflow-definition-editor-toolbar zoomToFit={this.onZoomToFit} onAutoLayout={(e: CustomEvent<LayoutDirection>) => this.onAutoLayout(e.detail)}/>\n          <elsa-panel\n            class=\"elsa-activity-picker-container tw-z-30\"\n            position={PanelPosition.Left}\n            onExpandedStateChanged={e => this.onActivityPickerPanelStateChanged(e.detail)}>\n            <elsa-workflow-definition-editor-toolbox\n              isReadonly={this.workflowDefinition.isReadonly}\n              ref={el => this.toolbox = el} />\n          </elsa-panel>\n          <elsa-flowchart\n            isReadonly={this.workflowDefinition.isReadonly}\n            key={workflowDefinition.definitionId}\n            ref={el => this.flowchart = el}\n            rootActivity={workflowDefinition.root}\n            interactiveMode={true}\n            onActivitySelected={e => this.onActivitySelected(e)}\n            onChildActivitySelected={e => this.onChildActivitySelected(e)}\n            onGraphUpdated={e => this.onGraphUpdated(e)}\n            onDragOver={e => this.onDragOver(e)}\n            onDrop={e => this.onDrop(e)}/>\n          <elsa-panel\n            class=\"elsa-workflow-editor-container tw-z-30\"\n            position={PanelPosition.Right}\n            onExpandedStateChanged={e => this.onWorkflowEditorPanelStateChanged(e.detail)}>\n            <div class=\"object-editor-container\">\n              <elsa-workflow-definition-properties-editor\n                readonly={this.workflowDefinition.isReadonly}\n                workflowDefinition={this.workflowDefinitionState}\n                workflowVersions={this.workflowVersions}\n                onWorkflowPropsUpdated={e => this.onWorkflowPropsUpdated(e)}\n                onVersionSelected={e => this.onVersionSelected(e)}\n                onDeleteVersionClicked={e => this.onDeleteVersionClicked(e)}\n                onRevertVersionClicked={e => this.onRevertVersionClicked(e)}\n              />\n            </div>\n          </elsa-panel>\n          <elsa-panel\n            class=\"elsa-activity-editor-container panel-bottom\"\n\n            position={PanelPosition.Bottom}\n            onExpandedStateChanged={e => this.onActivityEditorPanelStateChanged(e.detail)}>\n            <div class=\"activity-editor-container\">\n              {this.renderSelectedObject()}\n            </div>\n          </elsa-panel>\n        </div>\n      </WorkflowDefinitionTunnel.Provider>\n    );\n  }\n}\n"],"mappings":"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"}