{"version":3,"names":["async","fetchRuntimeItems","options","elsaClientProvider","Container","get","ElsaClientProvider","elsaClient","getElsaClient","designer","runtimeSelectListApi","runtimeSelectListProviderType","context","getSelectListItems","propertyDescriptor","selectList","Array","isArray","items","isFlagsEnum"],"sources":["./src/utils/select-list-items.ts"],"sourcesContent":["import {\r\n  InputDescriptor,\r\n  RuntimeSelectListProviderSettings,\r\n  SelectList,\r\n} from \"../models\";\r\nimport {Container} from \"typedi\";\r\nimport {ElsaClientProvider} from \"../services\";\r\n\r\nasync function fetchRuntimeItems(options: RuntimeSelectListProviderSettings): Promise<SelectList> {\r\n  const elsaClientProvider = Container.get(ElsaClientProvider);\r\n  const elsaClient = await elsaClientProvider.getElsaClient();\r\n  return await elsaClient.designer.runtimeSelectListApi.get(options.runtimeSelectListProviderType, options.context || {});\r\n}\r\n\r\nexport async function getSelectListItems(propertyDescriptor: InputDescriptor): Promise<SelectList> {\r\n  const options: any = propertyDescriptor.options;\r\n  let selectList: SelectList;\r\n\r\n  if (!!options && options.runtimeSelectListProviderType)\r\n    selectList = await fetchRuntimeItems(options);\r\n  else if (Array.isArray(options))\r\n    selectList = {\r\n      items: options,\r\n      isFlagsEnum: false\r\n    };\r\n  else\r\n    selectList = options as SelectList;\r\n\r\n  return selectList || {items: [], isFlagsEnum: false};\r\n}\r\n"],"mappings":"sFAQAA,eAAeC,EAAkBC,GAC/B,MAAMC,EAAqBC,EAAUC,IAAIC,GACzC,MAAMC,QAAmBJ,EAAmBK,gBAC5C,aAAaD,EAAWE,SAASC,qBAAqBL,IAAIH,EAAQS,8BAA+BT,EAAQU,SAAW,GACtH,CAEOZ,eAAea,EAAmBC,GACvC,MAAMZ,EAAeY,EAAmBZ,QACxC,IAAIa,EAEJ,KAAMb,GAAWA,EAAQS,8BACvBI,QAAmBd,EAAkBC,QAClC,GAAIc,MAAMC,QAAQf,GACrBa,EAAa,CACXG,MAAOhB,EACPiB,YAAa,YAGfJ,EAAab,EAEf,OAAOa,GAAc,CAACG,MAAO,GAAIC,YAAa,MAChD,Q"}