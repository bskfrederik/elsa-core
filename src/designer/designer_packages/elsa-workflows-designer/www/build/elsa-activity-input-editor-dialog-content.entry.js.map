{"file":"elsa-activity-input-editor-dialog-content.entry.esm.js","mappings":"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","names":["descriptorsStore","groupBy"],"sources":["./src/modules/workflow-definitions/components/workflow-properties/activity-input-editor-dialog-content.tsx"],"sourcesContent":["import {Component, h, Prop, Event, EventEmitter, Method} from \"@stencil/core\";\r\nimport {groupBy} from 'lodash';\r\nimport descriptorsStore from '../../../../data/descriptors-store';\r\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\r\nimport {InputDefinition} from \"../../models/entities\";\r\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\r\nimport {StorageDriverDescriptor} from \"../../../../models\";\r\nimport {isNullOrWhitespace} from \"../../../../utils\";\r\n\r\n@Component({\r\n  tag: 'elsa-activity-input-editor-dialog-content',\r\n  shadow: false\r\n})\r\nexport class ActivityInputEditorDialogContent {\r\n  private formElement: HTMLFormElement;\r\n\r\n  @Prop() input: InputDefinition;\r\n  @Event() inputChanged: EventEmitter<InputDefinition>;\r\n\r\n  @Method()\r\n  async getInput(): Promise<InputDefinition> {\r\n    return this.getInputInternal(this.formElement);\r\n  }\r\n\r\n  render() {\r\n    const input: InputDefinition = this.input ?? {name: '', type: 'Object', isArray: false};\r\n    const inputTypeName = input.type;\r\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\r\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\r\n    const groupedTypes = groupBy(availableTypes, x => x.category);\r\n    const selectedUIHint = input.uiHint;\r\n\r\n    // TODO: Get this from configuration (API).\r\n    const uiHints = [{\r\n      name: 'Single line',\r\n      value: 'single-line'\r\n    }, {\r\n      name: 'Multi line',\r\n      value: 'multi-line'\r\n    }, {\r\n      name: 'Checkbox',\r\n      value: 'checkbox'\r\n    }, {\r\n      name: 'Check list',\r\n      value: 'check-list'\r\n    }, {\r\n      name: 'Radio list',\r\n      value: 'radio-list'\r\n    }, {\r\n      name: 'Dropdown',\r\n      value: 'dropdown'\r\n    }, {\r\n      name: 'Multi text',\r\n      value: 'multi-text'\r\n    }, {\r\n      name: 'Code editor',\r\n      value: 'code-editor'\r\n    }, {\r\n      name: 'Variable picker',\r\n      value: 'variable-picker'\r\n    }, {\r\n      name: 'Type picker',\r\n      value: 'type-picker'\r\n    }\r\n    ];\r\n\r\n    return (\r\n      <div>\r\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\r\n          <div class=\"tw-pt-4\">\r\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">Edit input definition</h2>\r\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\r\n\r\n              <FormEntry fieldId=\"inputName\" label=\"Name\" hint=\"The technical name of the input.\">\r\n                <input type=\"text\" name=\"inputName\" id=\"inputName\" value={input.name}/>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"inputTypeName\" label=\"Type\" hint=\"The type of the input.\">\r\n                <select id=\"inputTypeName\" name=\"inputTypeName\">\r\n                  {Object.keys(groupedTypes).map(category => {\r\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\r\n                    return (<optgroup label={category}>\r\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == inputTypeName}>{descriptor.displayName}</option>)}\r\n                    </optgroup>);\r\n                  })}\r\n                </select>\r\n              </FormEntry>\r\n\r\n              <CheckboxFormEntry fieldId=\"inputIsArray\" label=\"This input is an array\" hint=\"Check if the input holds an array of the selected type.\">\r\n                <input type=\"checkbox\" name=\"inputIsArray\" id=\"inputIsArray\" value=\"true\" checked={input.isArray}/>\r\n              </CheckboxFormEntry>\r\n\r\n              <FormEntry fieldId=\"inputDisplayName\" label=\"Display name\" hint=\"The user friendly display name of the input.\">\r\n                <input type=\"text\" name=\"inputDisplayName\" id=\"inputDisplayName\" value={input.displayName}/>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"inputDescription\" label=\"Description\" hint=\"A description of the input.\">\r\n                <input type=\"text\" name=\"inputDescription\" id=\"inputDescription\" value={input.description}/>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"inputCategory\" label=\"Category\" hint=\"A custom category.\">\r\n                <input type=\"text\" name=\"inputCategory\" id=\"inputCategory\" value={input.category}/>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"inputUIHint\" label=\"Control\" hint=\"The control to use for this input.\">\r\n                <select name=\"inputUIHint\" id=\"inputUIHint\">\r\n                  {uiHints.map(uiHint => {\r\n                    const isSelected = uiHint.value == selectedUIHint;\r\n                    return <option value={uiHint.value} selected={isSelected}>{uiHint.name}</option>\r\n                  })}\r\n                </select>\r\n              </FormEntry>\r\n\r\n              <FormEntry fieldId=\"inputStorageDriverType\" label=\"Storage\" hint=\"The storage to use when persisting the input.\">\r\n                <select id=\"inputStorageDriverType\" name=\"inputStorageDriverType\">\r\n                  {storageDrivers.map(driver => {\r\n                    const value = driver.typeName;\r\n                    const text = driver.displayName;\r\n                    const selected = value == input.storageDriverType;\r\n                    return <option value={value} selected={selected}>{text}</option>;\r\n                  })}\r\n                </select>\r\n              </FormEntry>\r\n\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private onSubmit = async (e: Event) => {\r\n    e.preventDefault();\r\n    const form = e.target as HTMLFormElement;\r\n    const input = this.getInputInternal(form);\r\n    this.inputChanged.emit(input);\r\n  };\r\n\r\n  private getInputInternal = (form: HTMLFormElement): InputDefinition => {\r\n    const formData = new FormData(form as HTMLFormElement);\r\n    const name = formData.get('inputName') as string;\r\n    const displayName = formData.get('inputDisplayName') as string;\r\n    const type = formData.get('inputTypeName') as string;\r\n    const description = formData.get('inputDescription') as string;\r\n    const category = formData.get('inputCategory') as string;\r\n    const uiHint = formData.get('inputUIHint') as string;\r\n    const isArray = formData.get('inputIsArray') as string === 'true';\r\n    const driverType = formData.get('inputStorageDriverType') as string;\r\n    const input = this.input;\r\n\r\n    input.name = name;\r\n    input.type = type;\r\n    input.displayName = displayName;\r\n    input.category = category;\r\n    input.description = description;\r\n    input.uiHint = uiHint;\r\n    input.isArray = isArray;\r\n    input.storageDriverType = isNullOrWhitespace(driverType) ? null : driverType;\r\n\r\n    return input;\r\n  };\r\n\r\n}\r\n"],"version":3}