{"version":3,"names":["DefaultActivityTemplate","constructor","hostRef","this","portElements","renderIcon","icon","iconCssClass","displayTypeIsPicker","undefined","h","class","renderPorts","activity","embeddedPorts","activityDescriptor","length","map","port","renderPort","canStartWorkflow","displayTextClass","borderColor","name","selectedPortName","portProvider","portProviderRegistry","get","typeName","activityProperty","resolvePort","renderActivityProperty","href","onClick","e","onEditChildActivityClick","onMouseDown","stopPropagation","displayName","propertyIsArray","Array","isArray","ref","el","push","parentActivity","preventDefault","editChildActivity","emit","parentActivityId","id","iconRegistry","Container","ActivityIconRegistry","PortProviderRegistry","componentWillLoad","activityType","activityTypeVersion","_a","descriptorsStore","activityDescriptors","find","x","version","has","componentWillRender","render","activityId","FlowchartTunnel","Consumer","nodeMap","ports","getOutboundPorts","filter","type","PortType","Embedded","isBrowsable","_e","_d","_b","customProperties","_c","CanStartWorkflow","hasIcon","textColor","isTrigger","kind","ActivityKind","Trigger","backgroundColor","iconBackgroundColor","displayTypeIsEmbedded","containerCssClass","contentCssClass","displayText","_f","metadata","isNullOrWhitespace","displayType","onWindowClicked","event","target","portElement","contains"],"sources":["./src/modules/flowchart/default-activity-template.tsx"],"sourcesContent":["import {Component, h, Prop, State, Event, EventEmitter, Listen, Element} from \"@stencil/core\";\r\nimport {ActivityIconProducer, ActivityIconRegistry, PortProviderRegistry} from \"../../services\";\r\nimport {Container} from \"typedi\";\r\nimport {Activity, ActivityDescriptor, ActivityKind, ActivitySelectedArgs, ChildActivitySelectedArgs, EditChildActivityArgs, Port, PortType} from \"../../models\";\r\nimport descriptorsStore from \"../../data/descriptors-store\";\r\nimport {isNullOrWhitespace} from \"../../utils\";\r\nimport FlowchartTunnel from \"./state\";\r\n\r\n@Component({\r\n  tag: 'elsa-default-activity-template',\r\n  shadow: false\r\n})\r\nexport class DefaultActivityTemplate {\r\n  private readonly iconRegistry: ActivityIconRegistry;\r\n  private readonly portProviderRegistry: PortProviderRegistry;\r\n  private activityDescriptor: ActivityDescriptor;\r\n  private icon: ActivityIconProducer;\r\n  private portElements: Array<HTMLElement> = [];\r\n\r\n  constructor() {\r\n    this.iconRegistry = Container.get(ActivityIconRegistry);\r\n    this.portProviderRegistry = Container.get(PortProviderRegistry);\r\n  }\r\n\r\n  @Prop({attribute: 'activity-type'}) activityType: string;\r\n  @Prop({attribute: 'activity-type-version'}) activityTypeVersion: number = 1;\r\n  @Prop({attribute: 'display-type'}) displayType: string;\r\n  @Prop({attribute: 'activity-id'}) activityId: string;\r\n  @Event() editChildActivity: EventEmitter<EditChildActivityArgs>;\r\n  @Event() childActivitySelected: EventEmitter<ChildActivitySelectedArgs>;\r\n  @State() private selectedPortName: string;\r\n\r\n  componentWillLoad() {\r\n    const iconRegistry = this.iconRegistry;\r\n    const activityType = this.activityType;\r\n    const activityTypeVersion = this.activityTypeVersion ?? 0;\r\n    this.activityDescriptor = descriptorsStore.activityDescriptors.find(x => x.typeName == activityType && x.version == activityTypeVersion);\r\n    this.icon = iconRegistry.has(activityType) ? iconRegistry.get(activityType) : null;\r\n  }\r\n\r\n  componentWillRender() {\r\n    this.portElements = [];\r\n  }\r\n\r\n  render() {\r\n    const activityDescriptor = this.activityDescriptor;\r\n    const activityId = this.activityId;\r\n    const portProvider = this.portProviderRegistry.get(activityDescriptor.typeName);\r\n\r\n    return (\r\n      <FlowchartTunnel.Consumer>\r\n        {({nodeMap}) => {\r\n          const activity: Activity = nodeMap[activityId];\r\n          const ports = portProvider.getOutboundPorts({activityDescriptor, activity});\r\n          const embeddedPorts = ports.filter(x => x.type == PortType.Embedded && x.isBrowsable !== false);\r\n          const canStartWorkflow: boolean = activity?.customProperties?.canStartWorkflow ?? activity?.customProperties?.CanStartWorkflow ?? activity?.canStartWorkflow ?? false;\r\n          const icon = this.icon;\r\n          const hasIcon = !!icon;\r\n          const textColor = canStartWorkflow ? 'tw-text-white' : 'tw-text-gray-700';\r\n          const isTrigger = activityDescriptor?.kind == ActivityKind.Trigger;\r\n          const backgroundColor = canStartWorkflow ? isTrigger ? 'tw-bg-green-400' : 'tw-bg-blue-400' : 'tw-bg-white';\r\n          const iconBackgroundColor = isTrigger ? 'tw-bg-green-500' : 'tw-bg-blue-500';\r\n          const borderColor = canStartWorkflow ? isTrigger ? 'tw-border-green-600' : 'tw-border-blue-600' : 'tw-border-gray-300';\r\n          const displayTypeIsPicker = this.displayTypeIsPicker;\r\n          const displayTypeIsEmbedded = this.displayTypeIsEmbedded;\r\n          const containerCssClass = displayTypeIsEmbedded ? '' : 'tw-drop-shadow-md';\r\n          const contentCssClass = displayTypeIsPicker ? 'tw-px-2 tw-py-2' : 'tw-px-4 tw-pt-0 tw-pb-3';\r\n          let displayText = activity?.metadata?.displayText;\r\n\r\n          if (isNullOrWhitespace(displayText))\r\n            displayText = activityDescriptor?.displayName;\r\n\r\n          if (embeddedPorts.length == 0 || displayTypeIsPicker) {\r\n            return (\r\n              <div>\r\n                <div class={`activity-wrapper tw-border ${borderColor} ${backgroundColor} ${containerCssClass} tw-rounded tw-text-white tw-overflow-hidden`}>\r\n                  <div class=\"elsa-toolbar-menu-wrapper tw-flex tw-flex-row\">\r\n                    <div class={`tw-flex tw-flex-shrink tw-items-center ${iconBackgroundColor}`}>\r\n                      {this.renderIcon(icon)}\r\n                    </div>\r\n                    <div class=\"tw-flex tw-items-center\">\r\n                      <div class={displayTypeIsPicker ? `tw-m-2` : 'tw-m-3'}>\r\n                        <span class={`${textColor}`}>{displayText}</span>\r\n                        <div>\r\n                          {this.renderPorts(activity, embeddedPorts)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div>\r\n                <div class={`activity-wrapper tw-border ${borderColor} ${backgroundColor} ${containerCssClass} tw-rounded tw-overflow-hidden`}>\r\n                  <div class=\"tw-text-white\">\r\n                    <div class={`tw-flex tw-flex-shrink tw-items-center tw-py-3 ${ hasIcon ? 'tw-pr-3' : 'tw-px-3' } ${iconBackgroundColor}`}>\r\n                      {this.renderIcon(icon)}\r\n                      <span>{displayText}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"elsa-toolbar-menu-wrapper tw-flex tw-flex-col\">\r\n                    <div class=\"tw-flex tw-items-center\">\r\n                      <div class={contentCssClass}>\r\n                        {this.renderPorts(activity, embeddedPorts)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n        }}\r\n      </FlowchartTunnel.Consumer>\r\n    )\r\n  }\r\n\r\n  private renderIcon = (icon?: ActivityIconProducer): string => {\r\n    const iconCssClass = this.displayTypeIsPicker ? 'tw-px-2' : 'tw-px-4';\r\n\r\n    if (!icon)\r\n      return undefined;\r\n\r\n    return (\r\n      <div class={`${iconCssClass} tw-py-1`}>\r\n        {icon()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderPorts = (activity: Activity, embeddedPorts: Port[]) => {\r\n\r\n    if (this.displayTypeIsPicker || !this.activityDescriptor)\r\n      return;\r\n\r\n    if (embeddedPorts.length == 0)\r\n      return;\r\n\r\n    return (\r\n      <div class=\"activity-ports tw-mt-2 tw-flex tw-space-x-2\">\r\n        {embeddedPorts.map(port => this.renderPort(activity, port))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private renderPort = (activity: Activity, port: Port) => {\r\n    const canStartWorkflow = activity?.canStartWorkflow == true;\r\n    const displayTextClass = canStartWorkflow ? 'tw-text-white' : 'tw-text-gray-600';\r\n    const borderColor = port.name == this.selectedPortName ? 'tw-border-blue-600' : 'tw-border-gray-300';\r\n    const activityDescriptor = this.activityDescriptor;\r\n    const portProvider = this.portProviderRegistry.get(activityDescriptor.typeName);\r\n    const activityProperty = portProvider.resolvePort(port.name, {activity, activityDescriptor}) as Activity;\r\n\r\n    const renderActivityProperty = () => {\r\n\r\n      if (!activityProperty) {\r\n        return (\r\n          <div class=\"tw-relative tw-block tw-w-full tw-border-2 tw-border-gray-300 tw-border-dashed tw-rounded-lg tw-p-3 tw-text-center focus:tw-outline-none\">\r\n            <a href=\"#\"\r\n               onClick={e => this.onEditChildActivityClick(e, activity, port)}\r\n               onMouseDown={e => e.stopPropagation()}\r\n               class=\"tw-text-gray-400 hover:tw-text-gray-600\">\r\n              <div class=\"tw-flex-grow\">\r\n                <span class={`tw-text-sm ${displayTextClass}`}>{port.displayName}</span>\r\n              </div>\r\n            </a>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      const propertyIsArray = Array.isArray(activityProperty);\r\n\r\n      if (!propertyIsArray) {\r\n        return (\r\n          <div class={`tw-relative tw-block tw-w-full tw-border-2 ${borderColor} tw-border-solid tw-rounded-lg tw-p-3 tw-text-center focus:tw-outline-none`}>\r\n            <div class=\"tw-flex tw-space-x-2\">\r\n              <a href=\"#\"\r\n                 onClick={e => this.onEditChildActivityClick(e, activity, port)}\r\n                 onMouseDown={e => e.stopPropagation()}>\r\n                <div class=\"tw-flex-grow\">\r\n                  <span class={`tw-text-sm ${displayTextClass}`}>{port.displayName}</span>\r\n                </div>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div class={`tw-relative tw-block tw-w-full tw-border-2 ${borderColor} tw-border-solid tw-rounded-lg tw-p-5 tw-text-center focus:tw-outline-none`}>\r\n          <div class=\"tw-flex tw-space-x-2\">\r\n            <a href=\"#\"\r\n               onClick={e => this.onEditChildActivityClick(e, activity, port)}\r\n               onMouseDown={e => e.stopPropagation()}>\r\n              <div class=\"tw-flex-grow\">\r\n                <span class={`tw-text-sm ${displayTextClass}`}>{port.displayName}</span>\r\n              </div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div class=\"activity-port\" data-port-name={port.name} ref={el => this.portElements.push(el)}>\r\n        <div>\r\n          {renderActivityProperty()}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private get displayTypeIsPicker(): boolean {\r\n    return this.displayType == \"picker\";\r\n  }\r\n\r\n  private get displayTypeIsEmbedded(): boolean {\r\n    return this.displayType == \"embedded\";\r\n  }\r\n\r\n  @Listen('click', {target: 'window'})\r\n  private onWindowClicked(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    for (const portElement of this.portElements)\r\n      if (portElement.contains(target))\r\n        return;\r\n\r\n    this.selectedPortName = null;\r\n  }\r\n\r\n  private onEditChildActivityClick = (e: MouseEvent, parentActivity: Activity, port: Port) => {\r\n    e.preventDefault();\r\n    this.editChildActivity.emit({parentActivityId: parentActivity.id, port: port});\r\n  };\r\n}\r\n"],"mappings":"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"}