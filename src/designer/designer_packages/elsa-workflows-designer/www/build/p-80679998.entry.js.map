{"version":3,"names":["ActivityPropertiesEditor","constructor","hostRef","this","getSelectedTabIndex","tabs","selectedTabIndex","length","createTabs","activityDescriptor","findActivityDescriptor","isTask","kind","ActivityKind","Task","commonTab","displayText","strings","generalTab","order","content","renderCommonTab","inputTab","settingsTab","renderInputTab","outputs","outputTab","renderOutputTab","push","taskTab","renderTaskTab","createInputs","activity","activityId","id","driverRegistry","inputDriverRegistry","onInputChanged","inputDescriptor","activityUpdated","emit","newId","originalId","filteredInputs","inputs","filter","x","isBrowsable","map","renderInputContext","notifyInputChanged","inputChanged","v","s","onInputPropertyEditorChanged","driver","get","workflowDefinitionId","activityType","typeName","propertyName","name","control","h","InputControlSwitchContextState","Provider","state","renderInput","inputContext","inputControl","descriptorsStore","activityDescriptors","find","type","version","onSelectedTabIndexChanged","e","detail","onActivityIdChanged","inputElement","target","value","propertyValue","syntax","isWrapped","camelCasePropertyName","camelCase","console","log","input","expression","memoryReference","uuid","updateActivity","onOutputPropertyEditorChanged","outputDescriptor","outputTargetValue","outputTargetValuePair","split","outputTargetId","property","propertyDescriptor","renderContext","_b","_a","metadata","canStartWorkflow","_g","_f","_d","_c","customProperties","_e","CanStartWorkflow","key","FormEntry","fieldId","label","hint","activityHint","onChange","activityDisplayText","activityDisplayHint","onActivityDisplayTextChanged","CheckboxFormEntry","activityCanStartWorkflow","activityCanStartWorkflowHint","checked","onCanStartWorkflowChanged","propertyContext","variables","outputTargetOptions","items","displayName","isNullOrWhitespace","propertyType","typeDescriptor","variableDescriptors","propertyTypeName","description","class","currentTarget","outputTarget","selected","item","isSelected","runAsynchronously","RunAsynchronously","taskExecuteAsynchronously","taskExecuteAsynchronouslyHint","onRunAsynchronouslyChanged","Container","InputDriverRegistry","eventBus","EventBus","async","slideOverPanel","show","hide","getLocaleComponentStrings","element","title","onActivityChanged","notifyActivityChanged","ActivityPropertyPanelEvents","Displaying","render","actions","mainTitle","subTitle","isReadonly","orientation","Object","assign","Toolbar","layoutButtons","text","handler","autoLayout","theme","onClick","zoomToFit","Toolbox","onTabSelected","index","preventDefault","selectedCss","defaultCss","activitiesTabCssClass","href","graph","WorkflowDefinitionPropertiesEditor","createModel","model","tabModels","workflowDefinition","options","autoUpdateConsumingWorkflows","usableAsActivity","propertiesTabModel","tab","Widgets","workflow","propertiesWorkflowName","propertiesWorkflowNameHint","onPropertyEditorChanged","wf","propertiesWorkflowDescription","propertiesWorkflowDescriptionHint","rows","workflowDetails","propertiesDefitionId","definitionId","propertiesNew","propertiesVersionId","propertiesVersion","toString","propertiesStatus","isPublished","propertiesPublished","propertiesDraft","propertiesReadOnly","propertiesYes","propertiesNo","InfoList","dictionary","propertiesTab","renderPropertiesTab","variablesTabModel","variablesTab","renderVariablesTab","strategies","workflowActivationStrategyDescriptors","firstStrategy","defaultDescription","settingsWidgets","settingsActivitationStrategy","selectElement","activationStrategyType","hintElement","closest","getElementsByClassName","strategy","innerText","settingsUsableAsActivity","settingsUsableAsActivityHint","settingsAutoUpdateConsumingWorkflows","settingsAutoUpdateConsumingWorkflowsHint","settingsTabModel","widgets","inputOutputTabModel","inputOutputTab","renderInputOutputTab","versionHistoryTabModel","versionHistoryTab","renderVersionHistoryTab","args","notifyWorkflowDefinitionChanged","onWorkflowDefinitionUpdated","WorkflowPropertiesEditorEventTypes","tabModel","onVariablesChanged","onVariablesUpdated","outcomes","onInputsChanged","onInputsUpdated","onOutputsChanged","onOutputsUpdated","onOutcomesChanged","onOutcomesUpdated","selectedVersion","workflowVersions","apply","workflowPropsUpdated","onPropsUpdated","propName","propValue","isLatest","debug","updatedTab","getPropEditorSectionByPropName","workflowDefinitionApi","WorkflowDefinitionsApi","readonly","enumKey","keys","WorkflowPropertiesEditorTabs"],"sources":["./src/modules/workflow-definitions/components/activity-properties/activity-properties-editor.tsx","./src/modules/workflow-definitions/components/toolbar.tsx","./src/modules/workflow-definitions/components/toolbox.tsx","./src/modules/workflow-definitions/components/workflow-properties/properties.tsx"],"sourcesContent":["import {Component, Element, Event, EventEmitter, h, Method, Prop, State} from '@stencil/core';\nimport {camelCase} from 'lodash';\nimport {v4 as uuid} from 'uuid';\nimport {Activity, ActivityDescriptor, ActivityInput, ActivityKind, ActivityOutput, Expression, InputDescriptor, OutputDescriptor, PropertyDescriptor, TabChangedArgs, TabDefinition, Variable} from '../../../../models';\nimport {EventBus, InputDriverRegistry} from \"../../../../services\";\nimport {Container} from \"typedi\";\nimport {ActivityInputContext} from \"../../../../services/activity-input-driver\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {ActivityPropertyPanelEvents, ActivityUpdatedArgs, DeleteActivityRequestedArgs} from \"../../models/ui\";\nimport InputControlSwitchContextState from \"../../../../components/shared/input-control-switch/state\";\nimport {OutputDefinition} from \"../../models/entities\";\nimport {RenderActivityInputContext, RenderActivityPropsContext} from \"../models\";\nimport { getLocaleComponentStrings } from '../../../../utils/locale';\n\n@Component({\n  tag: 'elsa-activity-properties-editor',\n})\nexport class ActivityPropertiesEditor {\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private renderContext: RenderActivityPropsContext;\n  private readonly inputDriverRegistry: InputDriverRegistry;\n  private readonly eventBus: EventBus;\n\n  constructor() {\n    this.inputDriverRegistry = Container.get(InputDriverRegistry);\n    this.eventBus = Container.get(EventBus);\n  }\n\n  @Prop() workflowDefinitionId: string;\n  @Prop() activity?: Activity;\n  @Prop() variables: Array<Variable> = [];\n  @Prop() outputs: Array<OutputDefinition> = [];\n  @Prop() isReadonly: boolean;\n  @Event() activityUpdated: EventEmitter<ActivityUpdatedArgs>;\n  @Event() deleteActivityRequested: EventEmitter<DeleteActivityRequestedArgs>;\n  @State() private selectedTabIndex: number = 0;\n\n  @Method()\n  async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillRender() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    const activity = this.activity;\n    const activityDescriptor = this.findActivityDescriptor();\n    const title = activityDescriptor?.displayName ?? activityDescriptor?.typeName ?? 'Unknown Activity';\n    const inputs = this.createInputs();\n    const tabs = this.createTabs();\n\n    const onActivityChanged = () => this.activityUpdated.emit({\n      activity,\n      activityDescriptor\n    });\n\n    this.renderContext = {\n      activity,\n      activityDescriptor,\n      title,\n      inputs,\n      tabs,\n      notifyActivityChanged: () => onActivityChanged()\n    }\n\n    await this.eventBus.emit(ActivityPropertyPanelEvents.Displaying, this, this.renderContext);\n  }\n\n  render() {\n    const {activity, activityDescriptor, tabs} = this.renderContext;\n    const actions = [];\n    const mainTitle = activity.id;\n    const subTitle = activityDescriptor.displayName;\n    const selectedTabIndex = this.getSelectedTabIndex(tabs);\n\n    return (\n      <elsa-form-panel\n        isReadonly={this.isReadonly}\n        mainTitle={mainTitle}\n        subTitle={subTitle}\n        orientation=\"Landscape\"\n        tabs={tabs}\n        selectedTabIndex={selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}\n        actions={actions}/>\n    );\n  }\n\n  private getSelectedTabIndex = (tabs: Array<TabDefinition>): number => {\n    let selectedTabIndex = this.selectedTabIndex;\n\n    if (selectedTabIndex >= tabs.length)\n      selectedTabIndex = tabs.length - 1;\n\n    if (selectedTabIndex < 0)\n      selectedTabIndex = 0;\n\n    return selectedTabIndex;\n  };\n\n  private createTabs = (): Array<TabDefinition> => {\n    const activityDescriptor = this.findActivityDescriptor();\n    const isTask = activityDescriptor.kind == ActivityKind.Task;\n\n    const commonTab: TabDefinition = {\n      displayText: this.strings.generalTab,\n      order: 0,\n      content: () => this.renderCommonTab()\n    };\n\n    const inputTab: TabDefinition = {\n      displayText: this.strings.settingsTab,\n      order: 10,\n      content: () => this.renderInputTab()\n    };\n\n    const tabs = !!activityDescriptor ? [inputTab, commonTab] : [];\n\n    if (activityDescriptor.outputs.length > 0) {\n      const outputTab: TabDefinition = {\n        displayText: this.strings.outputTab,\n        order: 11,\n        content: () => this.renderOutputTab()\n      };\n\n      tabs.push(outputTab);\n    }\n\n    if (isTask) {\n      const taskTab: TabDefinition = {\n        displayText: this.strings.taskTab,\n        order: 12,\n        content: () => this.renderTaskTab()\n      };\n\n      tabs.push(taskTab);\n    }\n\n    return tabs;\n  };\n\n  private createInputs = (): Array<RenderActivityInputContext> => {\n    const activity = this.activity;\n    const activityId = activity.id;\n    const activityDescriptor = this.findActivityDescriptor();\n    const driverRegistry = this.inputDriverRegistry;\n\n    const onInputChanged = (inputDescriptor: InputDescriptor) => this.activityUpdated.emit({\n      newId: activityId,\n      originalId: activityId,\n      activity,\n      activityDescriptor\n    });\n\n    const filteredInputs = activityDescriptor.inputs.filter(x => x.isBrowsable);\n\n    return filteredInputs.map(inputDescriptor => {\n      const renderInputContext: ActivityInputContext = {\n        activity: activity,\n        activityDescriptor: activityDescriptor,\n        inputDescriptor,\n        notifyInputChanged: () => onInputChanged(inputDescriptor),\n        inputChanged: (v, s) => this.onInputPropertyEditorChanged(inputDescriptor, v, s)\n      };\n\n      const driver = driverRegistry.get(renderInputContext);\n      const workflowDefinitionId = this.workflowDefinitionId;\n      const activityType = activityDescriptor.typeName;\n      const propertyName = inputDescriptor.name;\n\n      const control =\n        <InputControlSwitchContextState.Provider state={{workflowDefinitionId, activityType, propertyName}}>\n          {driver?.renderInput(renderInputContext)}\n        </InputControlSwitchContextState.Provider>;\n\n      return {\n        inputContext: renderInputContext,\n        inputControl: control,\n      }\n    });\n  };\n\n  private findActivityDescriptor = (): ActivityDescriptor => !!this.activity ? descriptorsStore.activityDescriptors.find(x => x.typeName == this.activity.type && x.version == this.activity.version) : null;\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex\n\n  private onActivityIdChanged = (e: any) => {\n    const activity = this.activity;\n    const originalId = activity.id;\n    const inputElement = e.target as HTMLInputElement;\n    const newId = inputElement.value;\n    const activityDescriptor = this.findActivityDescriptor();\n\n    activity.id = newId;\n\n    this.activityUpdated.emit({\n      newId: newId,\n      originalId: originalId,\n      activity,\n      activityDescriptor\n    });\n  }\n\n  private onActivityDisplayTextChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.metadata = {\n      ...activity.metadata,\n      displayText: inputElement.value\n    };\n\n    this.updateActivity();\n  }\n\n  private onCanStartWorkflowChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.customProperties.canStartWorkflow = inputElement.checked;\n\n    this.updateActivity();\n  }\n\n  private onRunAsynchronouslyChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.customProperties.RunAsynchronously = inputElement.checked;\n\n    this.updateActivity();\n  }\n\n  private onInputPropertyEditorChanged = (inputDescriptor: InputDescriptor, propertyValue: any, syntax: string) => {\n    const activity = this.activity;\n    const propertyName = inputDescriptor.name;\n    const isWrapped = inputDescriptor.isWrapped;\n    const camelCasePropertyName = camelCase(propertyName);\n\n    console.log(propertyName, propertyValue, syntax)\n\n    if (isWrapped) {\n      let input: ActivityInput = activity[camelCasePropertyName];\n\n      const expression: Expression = {\n        type: syntax,\n        value: propertyValue // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\n      };\n\n      if (!input) {\n        input = {\n          typeName: inputDescriptor.typeName,\n          memoryReference: {id: uuid()},\n          expression: expression\n        }\n      }\n\n      input.expression = expression;\n      activity[camelCasePropertyName] = input;\n\n    } else {\n      activity[camelCasePropertyName] = propertyValue;\n    }\n    this.updateActivity(propertyName);\n  }\n\n  private onOutputPropertyEditorChanged = (outputDescriptor: OutputDescriptor, outputTargetValue: string) => {\n    const activity = this.activity;\n    const propertyName = outputDescriptor.name;\n    const camelCasePropertyName = camelCase(propertyName);\n    const outputTargetValuePair = outputTargetValue.split('::');\n    const outputTargetId = outputTargetValuePair[1];\n\n    const property: ActivityOutput = {\n      typeName: outputDescriptor.typeName,\n      memoryReference: {\n        id: outputTargetId\n      }\n    }\n\n    activity[camelCasePropertyName] = property;\n\n    this.updateActivity(propertyName);\n  }\n\n  private updateActivity = (propertyName?: string, propertyDescriptor?: PropertyDescriptor) => {\n    const activityDescriptor = this.findActivityDescriptor();\n    const activity = this.activity;\n    const activityId = activity.id;\n\n    console.log(`Activity ${activityId} updated.`);\n\n    this.activityUpdated.emit({\n      newId: activityId,\n      originalId: activityId,\n      activity,\n      activityDescriptor\n    });\n  }\n\n  private renderCommonTab = () => {\n    const {activity} = this.renderContext;\n    const activityId = activity.id;\n    const displayText: string = activity.metadata?.displayText ?? '';\n    const canStartWorkflow: boolean = activity.customProperties?.canStartWorkflow ?? activity?.customProperties?.CanStartWorkflow ?? activity.canStartWorkflow ?? false;\n    const key = `${activityId}`;\n\n    return <div key={key}>\n      <FormEntry fieldId=\"ActivityId\" label={this.strings.activityId} hint={this.strings.activityHint}>\n        <input type=\"text\" name=\"ActivityId\" id=\"ActivityId\" value={activityId} onChange={e => this.onActivityIdChanged(e)}/>\n      </FormEntry>\n\n      <FormEntry fieldId=\"ActivityDisplayText\" label={this.strings.activityDisplayText} hint={this.strings.activityDisplayHint}>\n        <input type=\"text\" name=\"ActivityDisplayText\" id=\"ActivityDisplayText\" value={displayText} onChange={e => this.onActivityDisplayTextChanged(e)}/>\n      </FormEntry>\n\n      <CheckboxFormEntry fieldId=\"CanStartWorkflow\" label={this.strings.activityCanStartWorkflow} hint={this.strings.activityCanStartWorkflowHint}>\n        <input type=\"checkbox\" name=\"CanStartWorkflow\" id=\"CanStartWorkflow\" value={\"true\"} checked={canStartWorkflow} onChange={e => this.onCanStartWorkflowChanged(e)}/>\n      </CheckboxFormEntry>\n\n    </div>\n  };\n\n  private renderInputTab = () => {\n    console.log('renderInputTab');\n    const {activity, inputs} = this.renderContext;\n    const activityId = activity.id;\n    const key = `${activityId}`;\n\n    return <div key={key}>\n      {inputs.filter(x => !!x.inputControl).map(propertyContext => {\n        const key = `${activity.id}-${propertyContext.inputContext.inputDescriptor.name}`;\n        console.log(key)\n        return <div key={key}>\n          {propertyContext.inputControl}\n        </div>;\n      })}\n    </div>\n  };\n\n  private renderOutputTab = () => {\n    const {activity, activityDescriptor} = this.renderContext;\n    const outputs = activityDescriptor.outputs;\n    const outputDefinitions = this.outputs || [];\n    const variables = this.variables || [];\n    const activityId = activity.id;\n    const key = `${activityId}`;\n    const outputTargetOptions: Array<any> = [null];\n\n    if (variables.length > 0) {\n      outputTargetOptions.push({label: 'Variables', items: [...variables.map(x => ({value: x.id, name: x.name}))], kind: 'variable'});\n    }\n\n    // Disable this for now until we rework the input output handling at the engine level.\n    // if (outputDefinitions.length > 0)\n    //   outputTargetOptions.push({label: 'Outputs', items: [...outputDefinitions.map(x => ({value: x.name, name: x.name}))], kind: 'output'});\n\n    return <div key={key}>\n      {outputs.map(propertyDescriptor => {\n        const key = `${activity.id}-${propertyDescriptor.name}`;\n        const displayName = isNullOrWhitespace(propertyDescriptor.displayName) ? propertyDescriptor.name : propertyDescriptor.displayName;\n        const propertyName = camelCase(propertyDescriptor.name);\n        const propertyValue = activity[propertyName] as ActivityOutput;\n        const propertyType = propertyDescriptor.typeName;\n        const typeDescriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == propertyType);\n        const propertyTypeName = typeDescriptor?.displayName ?? propertyType;\n\n        return <div key={key}>\n          <FormEntry fieldId={key} label={displayName} hint={propertyDescriptor.description}>\n\n            <div class=\"tw-relative\">\n              <select onChange={e => this.onOutputPropertyEditorChanged(propertyDescriptor, (e.currentTarget as HTMLSelectElement).value)}>\n                {outputTargetOptions.map(outputTarget => {\n                  if (!outputTarget) {\n                    return <option value=\"\" selected={!propertyValue?.memoryReference?.id}>-</option>\n                  }\n\n                  const items = outputTarget.items;\n\n                  return (\n                    <optgroup label={outputTarget.label}>\n                      {items.map(item => {\n                        const isSelected = propertyValue?.memoryReference?.id == item.value;\n                        return <option value={`${outputTarget.kind}::${item.value}`} selected={isSelected}>{item.name}</option>;\n                      })}\n                    </optgroup>);\n                })}\n              </select>\n              <div class=\"tw-pointer-events-none tw-absolute tw-inset-y-0 tw-right-0 tw-flex tw-items-center pr-10\">\n                <span class=\"tw-text-gray-500 sm:tw-text-sm\">{propertyTypeName}</span>\n              </div>\n            </div>\n          </FormEntry>\n        </div>;\n      })}\n    </div>\n  };\n\n  private renderTaskTab = () => {\n    const {activity} = this.renderContext;\n    const activityId = activity.id;\n    const runAsynchronously: boolean = activity.customProperties?.RunAsynchronously ?? activity.runAsynchronously ?? false;\n    const key = `${activityId}:task`;\n\n    return <div key={key}>\n      <CheckboxFormEntry fieldId=\"RunAsynchronously\" label={this.strings.taskExecuteAsynchronously} hint={this.strings.taskExecuteAsynchronouslyHint}>\n        <input type=\"checkbox\" name=\"RunAsynchronously\" id=\"RunAsynchronously\" value={\"true\"} checked={runAsynchronously} onChange={e => this.onRunAsynchronouslyChanged(e)}/>\n      </CheckboxFormEntry>\n    </div>\n  };\n}\n","import {Component, h, Prop, Event, EventEmitter} from '@stencil/core';\nimport {DropdownButtonItem} from \"../../../components/shared/dropdown-button/models\";\nimport {LayoutDirection} from \"../../flowchart/models\";\nimport {PlayButtonIcon} from \"../../../components/icons/buttons/play\";\n\n@Component({\n  tag: 'elsa-workflow-definition-editor-toolbar',\n})\nexport class Toolbar {\n  @Prop()\n  public zoomToFit: () => Promise<void>;\n\n  @Event()\n  public autoLayout: EventEmitter<LayoutDirection>;\n\n  render() {\n\n    const layoutButtons: Array<DropdownButtonItem> = [{\n      text: 'Horizontally',\n      handler: () => this.autoLayout.emit('LR')\n    },{\n      text: 'Vertically',\n      handler: () => this.autoLayout.emit('TB')\n    }];\n\n    return (\n      <div class=\"elsa-panel-toolbar tw-flex tw-justify-center tw-absolute tw-border-b tw-border-gray-200 tw-top-0 tw-px-1 tw-pl-4 tw-pb-2 tw-text-sm tw-bg-white tw-z-10 tw-space-x-2\">\n        <elsa-dropdown-button text=\"Auto-layout\" theme=\"Primary\" items={layoutButtons} class=\"tw-mt-2\"/>\n        <button onClick={this.zoomToFit} class=\"elsa-btn elsa-btn-primary\">\n          Zoom to fit\n        </button>\n        {/*Coming soon...*/}\n        {/*<button class=\"elsa-btn elsa-btn-action disabled\" disabled={true}>*/}\n        {/*  <PlayButtonIcon/> Run*/}\n        {/*</button>*/}\n      </div>\n    );\n  }\n}\n","import {Component, h, Prop, State} from '@stencil/core';\r\nimport {Graph} from '@antv/x6';\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-definition-editor-toolbox',\r\n})\r\nexport class Toolbox {\r\n  @Prop() graph: Graph;\r\n  @Prop() isReadonly: boolean;\r\n  @State() selectedTabIndex: number = 0;\r\n\r\n  private onTabSelected = (e: Event, index: number) => {\r\n    e.preventDefault();\r\n    this.selectedTabIndex = index;\r\n  };\r\n\r\n  render() {\r\n\r\n    const selectedTabIndex = this.selectedTabIndex;\r\n    const selectedCss = 'tw-border-blue-500 tw-text-blue-600';\r\n    const defaultCss = 'tw-border-transparent tw-text-gray-500 hover:tw-text-gray-700 hover:tw-border-gray-300';\r\n    const activitiesTabCssClass = selectedTabIndex == 0 ? selectedCss : defaultCss;\r\n\r\n    return (\r\n\r\n      <div class=\"activity-list tw-absolute tw-inset-0 tw-overflow-hidden\">\r\n        <div class=\"tw-h-full tw-flex tw-flex-col\">\r\n          <div class=\"tw-border-b tw-border-gray-200\">\r\n            <nav class=\"-tw-mb-px tw-flex\" aria-label=\"Tabs\">\r\n              <a href=\"#\"\r\n                 onClick={e => this.onTabSelected(e, 0)}\r\n                 class={`${activitiesTabCssClass} tw-w-1/2 tw-py-4 tw-px-1 tw-text-center tw-border-b-2 tw-font-medium tw-text-sm`}>\r\n                Activities\r\n              </a>\r\n            </nav>\r\n          </div>\r\n\r\n          <div class=\"tw-flex-1 tw-relative\">\r\n            <div class=\"tw-absolute tw-inset-0 tw-overflow-y-scroll\">\r\n              <elsa-workflow-definition-editor-toolbox-activities\r\n                isReadonly={this.isReadonly}\r\n                graph={this.graph}\r\n                class={selectedTabIndex == 0 ? '' : 'hidden'}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../../services\";\nimport {InputDefinition, OutputDefinition, WorkflowDefinition, WorkflowOptions} from \"../../models/entities\";\nimport {PropertiesTabModel, TabModel, Widget, WorkflowDefinitionPropsUpdatedArgs, WorkflowPropertiesEditorDisplayingArgs, WorkflowPropertiesEditorEventTypes, WorkflowPropertiesEditorModel} from \"../../models/ui\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport {InfoList} from \"../../../../components/shared/forms/info-list\";\nimport {TabChangedArgs, Variable} from \"../../../../models\";\nimport {WorkflowDefinitionsApi} from \"../../services/api\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {WorkflowPropertiesEditorTabs} from \"../../models/props-editor-tabs\";\nimport { getLocaleComponentStrings } from '../../../../utils/locale';\n\n@Component({\n  tag: 'elsa-workflow-definition-properties-editor',\n})\nexport class WorkflowDefinitionPropertiesEditor {\n  private readonly eventBus: EventBus;\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\n\n    this.model = {\n      tabModels: [],\n    }\n  }\n\n  @Prop() workflowDefinition?: WorkflowDefinition;\n  @Prop() workflowVersions: Array<WorkflowDefinition>;\n  @Prop() readonly: boolean;\n  @Event() workflowPropsUpdated: EventEmitter<WorkflowDefinitionPropsUpdatedArgs>;\n  @Event() versionSelected: EventEmitter<WorkflowDefinition>;\n  @Event() deleteVersionClicked: EventEmitter<WorkflowDefinition>;\n  @Event() revertVersionClicked: EventEmitter<WorkflowDefinition>;\n  @State() private model: WorkflowPropertiesEditorModel;\n  @State() private selectedTabIndex: number = 0;\n  @Element() element: HTMLElement;\n  strings!: any;\n\n\n  @Method()\n  public async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  public async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Watch('workflowDefinition')\n  async onWorkflowDefinitionChanged() {\n    await this.createModel();\n  }\n\n  @Watch('workflowVersions')\n  async onWorkflowVersionsChanged() {\n    await this.createModel();\n  }\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    await this.createModel();\n  }\n\n  public render() {\n    const workflowDefinition = this.workflowDefinition;\n    const title = workflowDefinition?.name ?? 'Untitled';\n    const subTitle = 'Workflow Definition'\n    const tabs = this.model.tabModels.map(x => x.tab);\n\n    return (\n      <elsa-form-panel\n        isReadonly={this.readonly}\n        mainTitle={title}\n        subTitle={subTitle}\n        tabs={tabs}\n        selectedTabIndex={this.selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}/>\n    );\n  }\n\n  private createModel = async () => {\n    const model = {\n      tabModels: []\n    };\n\n    const workflowDefinition = this.workflowDefinition;\n    const options: WorkflowOptions = workflowDefinition.options || {};\n    const autoUpdateConsumingWorkflows = options.autoUpdateConsumingWorkflows ?? false;\n    const usableAsActivity = options.usableAsActivity ?? false;\n\n    if (!workflowDefinition) {\n      this.model = model;\n      return;\n    }\n\n    const propertiesTabModel: PropertiesTabModel = {\n      name: 'properties',\n      tab: null,\n      Widgets: [{\n        name: 'workflowName',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label={this.strings.propertiesWorkflowName} fieldId=\"workflowName\" hint={this.strings.propertiesWorkflowNameHint}>\n            <input type=\"text\" name=\"workflowName\" id=\"workflowName\" value={workflow.name} onChange={e => this.onPropertyEditorChanged(wf => wf.name = (e.target as HTMLInputElement).value)}/>\n          </FormEntry>;\n        },\n        order: 0\n      }, {\n        name: 'workflowDescription',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label={this.strings.propertiesWorkflowDescription} fieldId=\"workflowDescription\" hint={this.strings.propertiesWorkflowDescriptionHint}>\n            <textarea name=\"workflowDescription\" id=\"workflowDescription\" value={workflow.description} rows={6} onChange={e => this.onPropertyEditorChanged(wf => wf.description = (e.target as HTMLTextAreaElement).value)}/>\n          </FormEntry>;\n        },\n        order: 5\n      }, {\n        name: 'workflowInfo',\n        content: () => {\n          const workflow = this.workflowDefinition;\n\n          const workflowDetails = {\n            [this.strings.propertiesDefitionId]: isNullOrWhitespace(workflow.definitionId) ? this.strings.propertiesNew : workflow.definitionId,\n            [this.strings.propertiesVersionId]: isNullOrWhitespace(workflow.id) ? this.strings.propertiesNew : workflow.id,\n            [this.strings.propertiesVersion]: workflow.version.toString(),\n            [this.strings.propertiesStatus]: workflow.isPublished ? this.strings.propertiesPublished : this.strings.propertiesDraft,\n            [this.strings.propertiesReadOnly]: workflow.isReadonly ? this.strings.propertiesYes : this.strings.propertiesNo\n          };\n\n          return <InfoList title=\"Information\" dictionary={workflowDetails}/>;\n        },\n        order: 10\n      }]\n    };\n\n    propertiesTabModel.tab = {\n      displayText: this.strings.propertiesTab,\n      order: 0,\n      content: () => this.renderPropertiesTab(propertiesTabModel)\n    };\n\n    const variablesTabModel: TabModel = {\n      name: 'variables',\n      tab: {\n        displayText: this.strings.variablesTab,\n        order: 5,\n        content: () => this.renderVariablesTab()\n      }\n    }\n\n    const strategies = descriptorsStore.workflowActivationStrategyDescriptors;\n    const firstStrategy = strategies.length > 0 ? strategies[0] : null;\n    const defaultDescription = firstStrategy?.description ?? '';\n\n    const settingsWidgets: Array<Widget> = [\n      {\n        name: 'workflowActivationValidator',\n        order: 0,\n        content: () => <FormEntry label={this.strings.settingsActivitationStrategy} fieldId=\"workflowActivationStrategyType\" hint={defaultDescription}>\n          <select name=\"workflowActivationStrategyType\" onChange={e => this.onPropertyEditorChanged(wf => {\n            const selectElement = (e.target as HTMLSelectElement);\n            options.activationStrategyType = selectElement.value;\n            wf.options = options;\n\n            const hintElement: HTMLElement = selectElement.closest('.form-entry').getElementsByClassName('form-field-hint')[0] as HTMLElement;\n            const strategy = strategies.find(x => x.typeName == selectElement.value);\n            hintElement.innerText = strategy.description;\n          })}>\n            {strategies.map(strategy => <option value={strategy.typeName} selected={strategy.typeName == options.activationStrategyType}>{strategy.displayName}</option>)}\n          </select>\n        </FormEntry>\n      },\n      {\n        name: 'usableAsActivity',\n        order: 0,\n        content: () => <CheckboxFormEntry label={this.strings.settingsUsableAsActivity} fieldId=\"UsableAsActivity\" hint={this.strings.settingsUsableAsActivityHint}>\n          <input type=\"checkbox\" id=\"UsableAsActivity\" name=\"UsableAsActivity\" checked={usableAsActivity} onChange={e => this.onPropertyEditorChanged(wf => {\n            const inputElement = (e.target as HTMLInputElement);\n            wf.options.usableAsActivity = inputElement.checked;\n            this.createModel();\n          })}/>\n        </CheckboxFormEntry>\n      },\n      {\n        name: 'autoUpdateConsumingWorkflows',\n        order: 0,\n        content: () =>\n          <CheckboxFormEntry fieldId=\"UpdateConsumingWorkflows\" label={this.strings.settingsAutoUpdateConsumingWorkflows} hint={this.strings.settingsAutoUpdateConsumingWorkflowsHint}>\n            <input type=\"checkbox\" name=\"UpdateConsumingWorkflows\" id=\"UpdateConsumingWorkflows\" checked={autoUpdateConsumingWorkflows} onChange={e => this.onPropertyEditorChanged(wf => {\n              const inputElement = e.target as HTMLInputElement;\n              options.autoUpdateConsumingWorkflows = inputElement.checked;\n              wf.options = options;\n            })}/>\n          </CheckboxFormEntry>\n      }\n    ];\n\n    const settingsTabModel: TabModel = {\n      name: 'settings',\n      tab: {\n        displayText: this.strings.settingsTab,\n        order: 10,\n        content: () => <elsa-widgets widgets={settingsWidgets}/>\n      }\n    }\n\n    const inputOutputTabModel: TabModel = {\n      name: 'input-output',\n      tab: {\n        displayText: this.strings.inputOutputTab,\n        order: 15,\n        content: () => this.renderInputOutputTab()\n      }\n    }\n\n    const versionHistoryTabModel: TabModel = {\n      name: 'versionHistory',\n      tab: {\n        displayText: this.strings.versionHistoryTab,\n        order: 20,\n        content: () => this.renderVersionHistoryTab()\n      }\n    }\n\n    model.tabModels = [propertiesTabModel, variablesTabModel, settingsTabModel, versionHistoryTabModel, inputOutputTabModel];\n\n    const args: WorkflowPropertiesEditorDisplayingArgs = {\n      workflowDefinition,\n      model,\n      notifyWorkflowDefinitionChanged: () => this.onWorkflowDefinitionUpdated()\n    };\n\n    await this.eventBus.emit(WorkflowPropertiesEditorEventTypes.Displaying, this, args);\n\n    this.model = model;\n  }\n\n  private renderPropertiesTab = (tabModel: PropertiesTabModel) => <elsa-widgets widgets={tabModel.Widgets}/>;\n\n  private renderVariablesTab = () => {\n    const variables: Array<Variable> = this.workflowDefinition?.variables ?? [];\n\n    return <div>\n      <elsa-variables-editor variables={variables} onVariablesChanged={e => this.onVariablesUpdated(e)}/>\n    </div>\n  };\n\n  private renderInputOutputTab = () => {\n    const inputs: Array<InputDefinition> = this.workflowDefinition?.inputs ?? [];\n    const outputs: Array<OutputDefinition> = this.workflowDefinition?.outputs ?? [];\n    const outcomes: Array<string> = this.workflowDefinition?.outcomes ?? [];\n\n    return <div>\n      <elsa-workflow-definition-input-output-settings\n        inputs={inputs}\n        outputs={outputs}\n        outcomes={outcomes}\n        onInputsChanged={e => this.onInputsUpdated(e)}\n        onOutputsChanged={e => this.onOutputsUpdated(e)}\n        onOutcomesChanged={e => this.onOutcomesUpdated(e)}\n      />\n    </div>\n  };\n\n  private renderVersionHistoryTab = () => {\n    return <div>\n      <elsa-workflow-definition-version-history\n        selectedVersion={this.workflowDefinition}\n        workflowVersions={this.workflowVersions}\n      />\n    </div>\n  };\n\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex;\n\n  private onPropertyEditorChanged = (apply: (w: WorkflowDefinition) => void) => {\n    const workflowDefinition = this.workflowDefinition;\n    apply(workflowDefinition);\n    this.workflowPropsUpdated.emit({workflowDefinition: workflowDefinition});\n  }\n\n  private onVariablesUpdated = async (e: CustomEvent<Array<Variable>>) => this.onPropsUpdated('variables', e.detail)\n\n  private onInputsUpdated = async (e: CustomEvent<Array<InputDefinition>>) => this.onPropsUpdated('inputs', e.detail)\n  private onOutputsUpdated = async (e: CustomEvent<Array<OutputDefinition>>) => this.onPropsUpdated('outputs', e.detail)\n\n  private onOutcomesUpdated = async (e: CustomEvent<Array<string>>) => this.onPropsUpdated('outcomes', e.detail)\n\n  private onPropsUpdated = async (\n    propName: string,\n    propValue: Array<Variable> | Array<InputDefinition> | Array<OutputDefinition> | Array<string>\n  ) => {\n    const workflowDefinition = this.workflowDefinition;\n\n    if (!workflowDefinition || !workflowDefinition.isLatest) {\n      console.debug('onPropsUpdated: workflowDefinition is not latest');\n      return;\n    }\n\n    workflowDefinition[propName] = propValue;\n    const updatedTab = this.getPropEditorSectionByPropName(propName);\n    this.workflowPropsUpdated.emit({workflowDefinition, updatedTab});\n    await this.createModel();\n  };\n\n  private onWorkflowDefinitionUpdated = () => {\n    const workflowDefinition = this.workflowDefinition;\n    this.workflowPropsUpdated.emit({workflowDefinition});\n  };\n\n  private getPropEditorSectionByPropName(propName: string): WorkflowPropertiesEditorTabs {\n    const enumKey = Object.keys(WorkflowPropertiesEditorTabs).find(key => WorkflowPropertiesEditorTabs[key as keyof typeof WorkflowPropertiesEditorTabs] === propName);\n\n    if (enumKey) {\n      return WorkflowPropertiesEditorTabs[enumKey as keyof typeof WorkflowPropertiesEditorTabs];\n    }\n    return null;\n  }\n}\n"],"mappings":"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"}