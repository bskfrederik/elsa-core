{"version":3,"names":["InputTagsDropdown","this","updateCurrentValues","newValue","dropdownValues","values","forEach","value","valueKey","tag","find","x","push","currentValues","valuesChangedHandler","componentWillLoad","async","e","preventDefault","input","target","currentTag","text","options","selectedIndex","trim","length","uniq","valueChanged","emit","filter","render","dropdownItems","findIndex","y","Array","isArray","valuesJson","JSON","stringify","map","h","class","href","onClick","onDeleteTagClick","type","id","fieldId","onChange","onTagSelected","disabled","selected","placeHolder","name","fieldName"],"sources":["./src/components/shared/input-tags/input-tags-dropdown.tsx"],"sourcesContent":["import {Component, h, Prop, Event, EventEmitter, State, Watch} from '@stencil/core';\r\nimport {uniq} from 'lodash';\r\nimport {SelectListItem} from '../../../models';\r\n\r\n@Component({\r\n  tag: 'elsa-input-tags-dropdown',\r\n  shadow: false,\r\n})\r\nexport class InputTagsDropdown {\r\n\r\n  @Prop() fieldName?: string;\r\n  @Prop() fieldId?: string;\r\n  @Prop() placeHolder?: string = 'Add tag';\r\n  @Prop() values?: Array<string | SelectListItem> = [];\r\n  @Prop() dropdownValues?: Array<SelectListItem> = [];\r\n  @Event({bubbles: true}) valueChanged: EventEmitter<SelectListItem[]| string[]>;\r\n  @State() currentValues?: Array<SelectListItem> = [];\r\n\r\n  @Watch('values')\r\n  private valuesChangedHandler(newValue: Array<string | SelectListItem>) {\r\n    this.updateCurrentValues(newValue);\r\n  }\r\n\r\n  public componentWillLoad() {\r\n    this.updateCurrentValues(this.values);\r\n  }\r\n\r\n  private updateCurrentValues = (newValue: Array<string | SelectListItem>) => {\r\n    const dropdownValues = this.dropdownValues || [];\r\n    let values: Array<SelectListItem> = [];\r\n\r\n    if (!!newValue) {\r\n      newValue.forEach(value => {\r\n        const valueKey = typeof (value) == 'string' ? value as string : (value as SelectListItem).value;\r\n        const tag = dropdownValues.find(x => x.value == valueKey);\r\n\r\n        if (!!tag)\r\n          values.push(tag);\r\n      })\r\n    }\r\n\r\n    this.currentValues = values;\r\n  };\r\n\r\n  private async onTagSelected(e: any) {\r\n    e.preventDefault();\r\n\r\n    const input = e.target as HTMLSelectElement;\r\n    const currentTag: SelectListItem = {\r\n      text: input.options[input.selectedIndex].text.trim(),\r\n      value: input.value\r\n    }\r\n\r\n    if (currentTag.value.length == 0)\r\n      return;\r\n\r\n    const values: Array<SelectListItem> = uniq([...this.currentValues, currentTag]);\r\n    input.value = \"Add\";\r\n    await this.valueChanged.emit(values);\r\n  }\r\n\r\n  async onDeleteTagClick(e: any, currentTag: SelectListItem) {\r\n    e.preventDefault();\r\n\r\n    this.currentValues = this.currentValues.filter(tag => tag.value !== currentTag.value);\r\n    await this.valueChanged.emit(this.currentValues);\r\n  }\r\n\r\n  render() {\r\n    let values: Array<SelectListItem> = this.currentValues || [];\r\n    let dropdownItems = this.dropdownValues.filter(x => values.findIndex(y => y.value === x.value) < 0);\r\n\r\n    if (!Array.isArray(values))\r\n      values = [];\r\n\r\n    const valuesJson = JSON.stringify(values.map(tag => tag.value));\r\n\r\n    return (\r\n      <div class=\"tw-py-2 tw-px-3 tw-bg-white tw-shadow-sm tw-border tw-border-gray-300 tw-rounded-md\">\r\n        {values.map(tag => (\r\n          <a href=\"#\" onClick={e => this.onDeleteTagClick(e, tag)} class=\"tw-inline-block tw-text-xs tw-bg-blue-400 tw-text-white tw-py-2 tw-px-3 tw-mr-1 tw-mb-1 tw-rounded\">\r\n            <input type=\"hidden\" value={tag.value}/>\r\n            <span>{tag.text}</span>\r\n            <span class=\"tw-text-white hover:tw-text-white tw-ml-1\">&times;</span>\r\n          </a>\r\n        ))}\r\n\r\n        <select\r\n          id={this.fieldId}\r\n          class=\"tw-inline-block tw-text-xs tw-py-2 tw-px-3 tw-mr-1 tw-mb-1 tw-pr-8 tw-border-gray-300 focus:tw-outline-none focus:tw-ring-blue-500 focus:tw-border-blue-500 tw-rounded\"\r\n          onChange={(e) => this.onTagSelected(e)}>\r\n          <option value=\"Add\" disabled selected>{this.placeHolder}</option>\r\n          {dropdownItems.map(tag => <option value={tag.value}>{tag.text}</option>)}\r\n        </select>\r\n        <input type=\"hidden\" name={this.fieldName} value={valuesJson}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"mappings":"oHAQaA,EAAiB,M,oEAmBpBC,KAAAC,oBAAuBC,IAC7B,MAAMC,EAAiBH,KAAKG,gBAAkB,GAC9C,IAAIC,EAAgC,GAEpC,KAAMF,EAAU,CACdA,EAASG,SAAQC,IACf,MAAMC,SAAW,GAAkB,SAAWD,EAAmBA,EAAyBA,MAC1F,MAAME,EAAML,EAAeM,MAAKC,GAAKA,EAAEJ,OAASC,IAEhD,KAAMC,EACJJ,EAAOO,KAAKH,EAAI,G,CAItBR,KAAKY,cAAgBR,CAAM,E,iEA7BE,U,YACmB,G,oBACD,G,mBAEA,E,CAGzCS,qBAAqBX,GAC3BF,KAAKC,oBAAoBC,E,CAGpBY,oBACLd,KAAKC,oBAAoBD,KAAKI,O,CAoBxBW,oBAAoBC,GAC1BA,EAAEC,iBAEF,MAAMC,EAAQF,EAAEG,OAChB,MAAMC,EAA6B,CACjCC,KAAMH,EAAMI,QAAQJ,EAAMK,eAAeF,KAAKG,OAC9ClB,MAAOY,EAAMZ,OAGf,GAAIc,EAAWd,MAAMmB,QAAU,EAC7B,OAEF,MAAMrB,EAAgCsB,OAAK,IAAI1B,KAAKY,cAAeQ,IACnEF,EAAMZ,MAAQ,YACRN,KAAK2B,aAAaC,KAAKxB,E,CAG/BW,uBAAuBC,EAAQI,GAC7BJ,EAAEC,iBAEFjB,KAAKY,cAAgBZ,KAAKY,cAAciB,QAAOrB,GAAOA,EAAIF,QAAUc,EAAWd,cACzEN,KAAK2B,aAAaC,KAAK5B,KAAKY,c,CAGpCkB,SACE,IAAI1B,EAAgCJ,KAAKY,eAAiB,GAC1D,IAAImB,EAAgB/B,KAAKG,eAAe0B,QAAOnB,GAAKN,EAAO4B,WAAUC,GAAKA,EAAE3B,QAAUI,EAAEJ,QAAS,IAEjG,IAAK4B,MAAMC,QAAQ/B,GACjBA,EAAS,GAEX,MAAMgC,EAAaC,KAAKC,UAAUlC,EAAOmC,KAAI/B,GAAOA,EAAIF,SAExD,OACEkC,EAAA,OAAKC,MAAM,uFACRrC,EAAOmC,KAAI/B,GACVgC,EAAA,KAAGE,KAAK,IAAIC,QAAS3B,GAAKhB,KAAK4C,iBAAiB5B,EAAGR,GAAMiC,MAAM,sGAC7DD,EAAA,SAAOK,KAAK,SAASvC,MAAOE,EAAIF,QAChCkC,EAAA,YAAOhC,EAAIa,MACXmB,EAAA,QAAMC,MAAM,6CAA2C,QAI3DD,EAAA,UACEM,GAAI9C,KAAK+C,QACTN,MAAM,yKACNO,SAAWhC,GAAMhB,KAAKiD,cAAcjC,IACpCwB,EAAA,UAAQlC,MAAM,MAAM4C,SAAQ,KAACC,SAAQ,MAAEnD,KAAKoD,aAC3CrB,EAAcQ,KAAI/B,GAAOgC,EAAA,UAAQlC,MAAOE,EAAIF,OAAQE,EAAIa,SAE3DmB,EAAA,SAAOK,KAAK,SAASQ,KAAMrD,KAAKsD,UAAWhD,MAAO8B,I"}