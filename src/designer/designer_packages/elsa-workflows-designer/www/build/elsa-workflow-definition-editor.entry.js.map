{"file":"elsa-workflow-definition-editor.entry.esm.js","mappings":"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","names":["cloneDeep","isEqual","debounce"],"sources":["./src/modules/workflow-definitions/components/editor.scss?tag=elsa-workflow-definition-editor","./src/modules/workflow-definitions/components/editor.tsx"],"sourcesContent":[":root {\r\n  --workflow-editor-width: 480px;\r\n  --activity-picker-width: 300px;\r\n  --activity-editor-height: 200px;\r\n}\r\n\r\n.x6-graph-scroller {\r\n  height: calc(100vh - var(--activity-editor-height) - 64px) !important;\r\n}\r\n\r\nelsa-flowchart {\r\n  position: absolute;\r\n  left: var(--activity-picker-width);\r\n  top: 54px;\r\n  right: var(--workflow-editor-width);\r\n  bottom: var(--activity-editor-height);\r\n}\r\n\r\n.elsa-panel-toolbar {\r\n  left: var(--activity-picker-width);\r\n  right: var(--workflow-editor-width);\r\n}\r\n\r\nelsa-panel.panel-state-expanded.elsa-activity-picker-container {\r\n  width: var(--activity-picker-width);\r\n}\r\n\r\nelsa-panel.panel-state-expanded.elsa-workflow-editor-container {\r\n  width: var(--workflow-editor-width);\r\n  right: 0;\r\n  left: unset;\r\n}\r\n\r\nelsa-panel.panel-state-expanded.elsa-activity-editor-container {\r\n  height: var(--activity-editor-height);\r\n  right: var(--workflow-editor-width);\r\n  left: var(--activity-picker-width);\r\n  bottom: 0;\r\n}\r\n\r\n.activity-picker-closed {\r\n\r\n  .activity-list {\r\n    display: none;\r\n  }\r\n\r\n  elsa-flowchart {\r\n    left: 0;\r\n  }\r\n}\r\n\r\n.object-editor-closed {\r\n\r\n  .object-editor-container {\r\n    display: none;\r\n  }\r\n\r\n  elsa-flowchart {\r\n    right: 0;\r\n  }\r\n}\r\n\r\n\r\n.activity-editor-closed {\r\n\r\n  .activity-editor-container {\r\n    display: none;\r\n  }\r\n\r\n  elsa-flowchart {\r\n    bottom: 0;\r\n  }\r\n}\r\n","import {Component, Element, Event, EventEmitter, h, Listen, Method, Prop, State, Watch} from '@stencil/core';\r\nimport {debounce, isEqual} from 'lodash';\r\nimport {Container} from \"typedi\";\r\nimport {PanelPosition, PanelStateChangedArgs} from '../../../components/panel/models';\r\nimport {\r\n  Activity,\r\n  ActivityDescriptor,\r\n  ActivitySelectedArgs,\r\n  ChildActivitySelectedArgs,\r\n  ContainerSelectedArgs, GraphUpdatedArgs\r\n} from '../../../models';\r\nimport {ActivityDriverRegistry, ActivityNameFormatter, EventBus, PluginRegistry, PortProviderRegistry} from '../../../services';\r\nimport {MonacoEditorSettings} from \"../../../services/monaco-editor-settings\";\r\nimport {WorkflowDefinitionPropsUpdatedArgs, WorkflowDefinitionUpdatedArgs, ActivityUpdatedArgs, WorkflowEditorEventTypes} from \"../models/ui\";\r\nimport {WorkflowDefinition} from \"../models/entities\";\r\nimport {WorkflowDefinitionsApi} from \"../services/api\"\r\nimport WorkflowDefinitionTunnel, {WorkflowDefinitionState} from \"../state\";\r\nimport {LayoutDirection, UpdateActivityArgs} from \"../../flowchart/models\";\r\nimport {cloneDeep} from '@antv/x6/lib/util/object/object';\r\nimport {removeGuidsFromPortNames} from '../../../utils/graph';\r\nimport {WorkflowPropertiesEditorTabs} from '../models/props-editor-tabs';\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-definition-editor',\r\n  styleUrl: 'editor.scss',\r\n})\r\nexport class WorkflowDefinitionEditor {\r\n  @Element() el: HTMLElsaWorkflowDefinitionEditorElement;\r\n\r\n  private readonly pluginRegistry: PluginRegistry;\r\n  private readonly eventBus: EventBus;\r\n  private readonly activityNameFormatter: ActivityNameFormatter;\r\n  private readonly portProviderRegistry: PortProviderRegistry;\r\n  private flowchart: HTMLElsaFlowchartElement;\r\n  private container: HTMLDivElement;\r\n  private toolbox: HTMLElsaWorkflowDefinitionEditorToolboxElement;\r\n  private readonly saveChangesDebounced: () => void;\r\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\r\n\r\n  constructor() {\r\n    this.eventBus = Container.get(EventBus);\r\n    this.pluginRegistry = Container.get(PluginRegistry);\r\n    this.activityNameFormatter = Container.get(ActivityNameFormatter);\r\n    this.portProviderRegistry = Container.get(PortProviderRegistry);\r\n    this.saveChangesDebounced = debounce(this.saveChanges, 1000);\r\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\r\n  }\r\n\r\n  @Prop() workflowDefinition?: WorkflowDefinition;\r\n  @Prop({attribute: 'monaco-lib-path'}) monacoLibPath: string;\r\n  @Event() workflowUpdated: EventEmitter<WorkflowDefinitionUpdatedArgs>\r\n  @State() private workflowDefinitionState: WorkflowDefinition;\r\n  @State() private selectedActivity?: Activity;\r\n  @State() private workflowVersions: Array<WorkflowDefinition> = [];\r\n\r\n  @Watch('monacoLibPath')\r\n  private handleMonacoLibPath(value: string) {\r\n    const settings = Container.get(MonacoEditorSettings);\r\n    settings.monacoLibPath = value;\r\n  }\r\n\r\n  @Watch('workflowDefinition')\r\n  async onWorkflowDefinitionChanged(value: WorkflowDefinition) {\r\n    await this.importWorkflow(value);\r\n  }\r\n\r\n  @Listen('resize', {target: 'window'})\r\n  private async handleResize() {\r\n    await this.updateLayout();\r\n  }\r\n\r\n  @Listen('containerSelected')\r\n  private async handleContainerSelected(e: CustomEvent<ContainerSelectedArgs>) {\r\n    this.selectedActivity = e.detail.activity;\r\n  }\r\n\r\n  @Method()\r\n  async getFlowchart(): Promise<HTMLElsaFlowchartElement> {\r\n    return this.flowchart;\r\n  }\r\n\r\n  @Method()\r\n  async registerActivityDrivers(register: (registry: ActivityDriverRegistry) => void): Promise<void> {\r\n    const registry = Container.get(ActivityDriverRegistry);\r\n    register(registry);\r\n  }\r\n\r\n  @Method()\r\n  getWorkflowDefinition(): Promise<WorkflowDefinition> {\r\n    return this.getWorkflowDefinitionInternal();\r\n  }\r\n\r\n  @Method()\r\n  async importWorkflow(workflowDefinition: WorkflowDefinition): Promise<void> {\r\n    await this.updateWorkflowDefinition(workflowDefinition);\r\n    await this.loadWorkflowVersions();\r\n\r\n    // Update the flowchart after state is updated.\r\n    window.requestAnimationFrame(async () => {\r\n      await this.flowchart.updateGraph();\r\n      await this.updateSelectedActivity();\r\n    });\r\n\r\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowDefinition.Imported, this, {workflowDefinition});\r\n  }\r\n\r\n  // Updates the workflow definition without importing it into the designer.\r\n  @Method()\r\n  async updateWorkflowDefinition(workflowDefinition: WorkflowDefinition): Promise<void> {\r\n    if (this.workflowDefinitionState != workflowDefinition) {\r\n      this.workflowDefinitionState = workflowDefinition;\r\n\r\n      window.requestAnimationFrame(async () => {\r\n        await this.updateSelectedActivity();\r\n        await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowEditor.WorkflowLoaded, this, {workflowEditor: this, workflowDefinition: workflowDefinition});\r\n      });\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async newWorkflow(): Promise<WorkflowDefinition> {\r\n\r\n    const newRoot = await this.flowchart.newRoot();\r\n\r\n    const workflowDefinition: WorkflowDefinition = {\r\n      root: newRoot,\r\n      id: '',\r\n      name: 'Workflow 1',\r\n      definitionId: '',\r\n      version: 1,\r\n      isLatest: true,\r\n      isPublished: false,\r\n      isReadonly: false,\r\n      materializerName: 'Json'\r\n    }\r\n\r\n    await this.updateWorkflowDefinition(workflowDefinition);\r\n    return workflowDefinition;\r\n  }\r\n\r\n  @Method()\r\n  async loadWorkflowVersions(): Promise<void> {\r\n    if (this.workflowDefinitionState.definitionId != null && this.workflowDefinitionState.definitionId.length > 0) {\r\n      const workflowVersions = await this.workflowDefinitionApi.getVersions(this.workflowDefinitionState.definitionId);\r\n      this.workflowVersions = workflowVersions.sort((a, b) => a.version > b.version ? -1 : 1);\r\n    } else {\r\n      this.workflowVersions = [];\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async updateActivity(activity: Activity) {\r\n    const args: UpdateActivityArgs = {\r\n      activity: activity,\r\n      id: activity.id,\r\n      originalId: activity.id\r\n    };\r\n    await this.updateActivityInternal(args);\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    await this.updateWorkflowDefinition(this.workflowDefinition);\r\n    await this.loadWorkflowVersions();\r\n  }\r\n\r\n  async componentDidLoad() {\r\n    if (!this.workflowDefinitionState)\r\n      await this.newWorkflow();\r\n    else\r\n      await this.importWorkflow(this.workflowDefinitionState);\r\n\r\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowEditor.Ready, this, {workflowEditor: this, workflowDefinition: this.workflowDefinitionState});\r\n  }\r\n\r\n  private renderSelectedObject = () => {\r\n    if (!!this.selectedActivity)\r\n      return <elsa-activity-properties-editor\r\n        isReadonly={this.workflowDefinition.isReadonly}\r\n        activity={this.selectedActivity}\r\n        variables={this.workflowDefinitionState.variables}\r\n        outputs={this.workflowDefinitionState.outputs}\r\n        workflowDefinitionId={this.workflowDefinitionState.definitionId}\r\n        onActivityUpdated={e => this.onActivityUpdated(e)}/>;\r\n  }\r\n\r\n  private getWorkflowDefinitionInternal = async (): Promise<WorkflowDefinition> => {\r\n    const activity: Activity = await this.flowchart.export();\r\n    const workflowDefinition = this.workflowDefinitionState;\r\n    workflowDefinition.root = activity;\r\n    return workflowDefinition;\r\n  };\r\n\r\n  private saveChanges = async (): Promise<void> => {\r\n    const updatedWorkflowDefinition = this.workflowDefinitionState;\r\n\r\n\r\n    if (updatedWorkflowDefinition.isReadonly) {\r\n      console.debug('Workflow definition is readonly. Changes will not be saved.');\r\n      return;\r\n    }\r\n\r\n    if(!updatedWorkflowDefinition.isLatest) {\r\n      console.debug('Workflow definition is not the latest version. Changes will not be saved.');\r\n      return;\r\n    }\r\n\r\n    if (await this.hasWorkflowDefinitionAnyUpdatedData(updatedWorkflowDefinition)) {\r\n      // If workflow definition is published, override the latest version.\r\n      if (updatedWorkflowDefinition.isPublished) {\r\n        updatedWorkflowDefinition.version = this.workflowVersions.find(v => v.isLatest).version;\r\n      }\r\n      this.workflowUpdated.emit({workflowDefinition: this.workflowDefinitionState});\r\n    }\r\n\r\n    await this.updateSelectedActivity();\r\n  };\r\n\r\n  // To prevent redundant post requests to server, save changes only if there is a difference\r\n  // between existing workflow definition on server side and updated workflow definition on client side.\r\n  private hasWorkflowDefinitionAnyUpdatedData = async (updatedWorkflowDefinition: WorkflowDefinition): Promise<boolean> => {\r\n    const existingWorkflowDefinition = await this.workflowDefinitionApi.get({definitionId: updatedWorkflowDefinition.definitionId, versionOptions: {version: updatedWorkflowDefinition.version}});\r\n    const updatedWorkflowDefinitionClone = cloneDeep(updatedWorkflowDefinition);\r\n\r\n    removeGuidsFromPortNames(updatedWorkflowDefinitionClone.root);\r\n\r\n    return !isEqual(existingWorkflowDefinition, updatedWorkflowDefinitionClone);\r\n  }\r\n\r\n  private updateLayout = async () => {\r\n    await this.flowchart.updateLayout();\r\n  };\r\n\r\n  private updateContainerLayout = async (panelClassName: string, panelExpanded: boolean) => {\r\n\r\n    if (panelExpanded)\r\n      this.container.classList.remove(panelClassName);\r\n    else\r\n      this.container.classList.toggle(panelClassName, true);\r\n\r\n    await this.updateLayout();\r\n  }\r\n\r\n  private updateActivityInternal = async (args: UpdateActivityArgs) => {\r\n    args.updatePorts = true; // TODO: Make this configurable from a activity plugin.\r\n    await this.flowchart.updateActivity(args);\r\n    this.saveChangesDebounced();\r\n  }\r\n\r\n  private onActivityPickerPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('activity-picker-closed', e.expanded)\r\n  private onWorkflowEditorPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('object-editor-closed', e.expanded)\r\n  private onActivityEditorPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('activity-editor-closed', e.expanded)\r\n\r\n  private onDragOver = (e: DragEvent) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  private onDrop = async (e: DragEvent) => {\r\n    const json = e.dataTransfer.getData('activity-descriptor');\r\n    const activityDescriptor: ActivityDescriptor = JSON.parse(json);\r\n\r\n    await this.flowchart.addActivity({\r\n      descriptor: activityDescriptor,\r\n      x: e.pageX,\r\n      y: e.pageY\r\n    });\r\n  };\r\n\r\n  private onZoomToFit = async () => await this.flowchart.zoomToFit();\r\n\r\n  private onAutoLayout = async (direction: LayoutDirection) => {\r\n    await this.flowchart.autoLayout(direction);\r\n  };\r\n\r\n  private onActivityUpdated = async (e: CustomEvent<ActivityUpdatedArgs>) => {\r\n    const args: UpdateActivityArgs = {\r\n      activity: e.detail.activity,\r\n      id: e.detail.newId ?? e.detail.originalId ?? e.detail.activity.id,\r\n      originalId: e.detail.originalId ?? e.detail.activity.id\r\n    };\r\n\r\n    await this.updateActivityInternal(args);\r\n  }\r\n\r\n  private onWorkflowPropsUpdated = (e: CustomEvent<WorkflowDefinitionPropsUpdatedArgs>) => {\r\n    this.saveChangesDebounced();\r\n\r\n    if (e.detail.updatedTab == WorkflowPropertiesEditorTabs.Variables) {\r\n      const currentSelectedActivity = this.selectedActivity;\r\n      this.selectedActivity = null;\r\n      this.selectedActivity = currentSelectedActivity;\r\n    }\r\n  }\r\n\r\n  private async onActivitySelected(e: CustomEvent<ActivitySelectedArgs>) {\r\n    this.selectedActivity = e.detail.activity;\r\n  }\r\n\r\n  private async onChildActivitySelected(e: CustomEvent<ChildActivitySelectedArgs>) {\r\n    const {childActivity} = e.detail;\r\n    this.selectedActivity = childActivity;\r\n  }\r\n\r\n  private async onGraphUpdated(e: CustomEvent<GraphUpdatedArgs>) {\r\n    await this.updateSelectedActivity();\r\n    this.saveChangesDebounced();\r\n  }\r\n\r\n  private async updateSelectedActivity() {\r\n    if (!!this.selectedActivity)\r\n      this.selectedActivity = await this.flowchart?.getActivity(this.selectedActivity.id);\r\n  }\r\n\r\n  private onVersionSelected = async (e: CustomEvent<WorkflowDefinition>) => {\r\n    const workflowToView = e.detail;\r\n    const workflowDefinition = await this.workflowDefinitionApi.get({definitionId: workflowToView.definitionId, versionOptions: {version: workflowToView.version}});\r\n    await this.importWorkflow(workflowDefinition);\r\n  };\r\n\r\n  private onDeleteVersionClicked = async (e: CustomEvent<WorkflowDefinition>) => {\r\n    const workflowToDelete = e.detail;\r\n    await this.workflowDefinitionApi.deleteVersion({definitionId: workflowToDelete.definitionId, version: workflowToDelete.version});\r\n    const latestWorkflowDefinition = await this.workflowDefinitionApi.get({definitionId: workflowToDelete.definitionId, versionOptions: {isLatest: true}});\r\n    await this.loadWorkflowVersions();\r\n    await this.importWorkflow(latestWorkflowDefinition);\r\n  };\r\n\r\n  private onRevertVersionClicked = async (e: CustomEvent<WorkflowDefinition>) => {\r\n    const workflowToRevert = e.detail;\r\n    await this.workflowDefinitionApi.revertVersion({definitionId: workflowToRevert.definitionId, version: workflowToRevert.version});\r\n    const workflowDefinition = await this.workflowDefinitionApi.get({definitionId: workflowToRevert.definitionId, versionOptions: {isLatest: true}});\r\n    await this.loadWorkflowVersions();\r\n    await this.importWorkflow(workflowDefinition);\r\n  };\r\n\r\n  render() {\r\n    const workflowDefinition = this.workflowDefinitionState;\r\n\r\n    const state: WorkflowDefinitionState = {\r\n      workflowDefinition: this.workflowDefinitionState\r\n    };\r\n\r\n    return (\r\n      <WorkflowDefinitionTunnel.Provider state={state}>\r\n        <div class=\"tw-absolute tw-inset-0\" ref={el => this.container = el}>\r\n          <elsa-workflow-definition-editor-toolbar zoomToFit={this.onZoomToFit} onAutoLayout={(e: CustomEvent<LayoutDirection>) => this.onAutoLayout(e.detail)}/>\r\n          <elsa-panel\r\n            class=\"elsa-activity-picker-container tw-z-30\"\r\n            position={PanelPosition.Left}\r\n            onExpandedStateChanged={e => this.onActivityPickerPanelStateChanged(e.detail)}>\r\n            <elsa-workflow-definition-editor-toolbox\r\n              isReadonly={this.workflowDefinition.isReadonly}\r\n              ref={el => this.toolbox = el} />\r\n          </elsa-panel>\r\n          <elsa-flowchart\r\n            isReadonly={this.workflowDefinition.isReadonly}\r\n            key={workflowDefinition.definitionId}\r\n            ref={el => this.flowchart = el}\r\n            rootActivity={workflowDefinition.root}\r\n            interactiveMode={true}\r\n            onActivitySelected={e => this.onActivitySelected(e)}\r\n            onChildActivitySelected={e => this.onChildActivitySelected(e)}\r\n            onGraphUpdated={e => this.onGraphUpdated(e)}\r\n            onDragOver={e => this.onDragOver(e)}\r\n            onDrop={e => this.onDrop(e)}/>\r\n          <elsa-panel\r\n            class=\"elsa-workflow-editor-container tw-z-30\"\r\n            position={PanelPosition.Right}\r\n            onExpandedStateChanged={e => this.onWorkflowEditorPanelStateChanged(e.detail)}>\r\n            <div class=\"object-editor-container\">\r\n              <elsa-workflow-definition-properties-editor\r\n                readonly={this.workflowDefinition.isReadonly}\r\n                workflowDefinition={this.workflowDefinitionState}\r\n                workflowVersions={this.workflowVersions}\r\n                onWorkflowPropsUpdated={e => this.onWorkflowPropsUpdated(e)}\r\n                onVersionSelected={e => this.onVersionSelected(e)}\r\n                onDeleteVersionClicked={e => this.onDeleteVersionClicked(e)}\r\n                onRevertVersionClicked={e => this.onRevertVersionClicked(e)}\r\n              />\r\n            </div>\r\n          </elsa-panel>\r\n          <elsa-panel\r\n            class=\"elsa-activity-editor-container\"\r\n            position={PanelPosition.Bottom}\r\n            onExpandedStateChanged={e => this.onActivityEditorPanelStateChanged(e.detail)}>\r\n            <div class=\"activity-editor-container\">\r\n              {this.renderSelectedObject()}\r\n            </div>\r\n          </elsa-panel>\r\n        </div>\r\n      </WorkflowDefinitionTunnel.Provider>\r\n    );\r\n  }\r\n}\r\n"],"version":3}