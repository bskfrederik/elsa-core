{"file":"activity-walker.js","mappings":"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","names":["descriptorsStore"],"sources":["./src/services/activity-walker.ts"],"sourcesContent":["import 'reflect-metadata';\r\nimport {camelCase} from 'lodash';\r\nimport {Container} from \"typedi\"\r\nimport {Activity, ActivityDescriptor} from \"../models\";\r\nimport {PortProviderRegistry} from \"./port-provider-registry\";\r\nimport descriptorsStore from '../data/descriptors-store';\r\nimport {Hash} from \"../utils\";\r\nimport {PortProviderContext} from \"./port-provider\";\r\n\r\nexport interface ActivityNode {\r\n  activity: Activity;\r\n  parents: Array<ActivityNode>;\r\n  children: Array<ActivityNode>;\r\n  port?: string;\r\n  nodeId: string;\r\n\r\n  descendants(): Array<ActivityNode>;\r\n\r\n  ancestors(): Array<ActivityNode>;\r\n\r\n  siblings(): Array<ActivityNode>;\r\n\r\n  siblingsAndCousins(): Array<ActivityNode>;\r\n}\r\n\r\nexport interface ActivityPort {\r\n  activity: Activity;\r\n  port: string;\r\n}\r\n\r\nexport class ActivityNodeClass implements ActivityNode {\r\n  private _activity: Activity;\r\n  private _parents: Array<ActivityNode>;\r\n  private _children: Array<ActivityNode>;\r\n\r\n  constructor(activity) {\r\n    this.activity = activity;\r\n    this.parents = [];\r\n    this.children = [];\r\n  }\r\n\r\n  get nodeId() {\r\n    const ancestorIds = [...this.ancestors()].reverse().map(x => x.activity.id);\r\n    return ancestorIds.length ? `${ancestorIds.join(\":\")}:${this.activity.id}` : this.activity.id;\r\n  }\r\n\r\n  get activity() {\r\n    return this._activity;\r\n  }\r\n\r\n  set activity(value) {\r\n    this._activity = value;\r\n  }\r\n\r\n  get parents() {\r\n    return this._parents;\r\n  }\r\n\r\n  set parents(value) {\r\n    this._parents = value;\r\n  }\r\n\r\n  get children() {\r\n    return this._children;\r\n  }\r\n\r\n  set children(value) {\r\n    this._children = value;\r\n  }\r\n\r\n  descendants() {\r\n    const list = [];\r\n\r\n    for (let child of this.children) {\r\n      list.push(child);\r\n      list.push(...child.descendants());\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  ancestors() {\r\n    const list = [];\r\n\r\n    for (let parent of this.parents) {\r\n      list.push(parent);\r\n      list.push(...parent.ancestors());\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  siblings() {\r\n    return this.parents.flatMap(parent => parent.children);\r\n  }\r\n\r\n  siblingsAndCousins() {\r\n    return this.parents.flatMap(parent => parent.descendants().flatMap(x => x.children));\r\n  }\r\n}\r\n\r\n\r\nexport function createActivityLookup(nodes: Array<ActivityNode>): Hash<Activity> {\r\n  const map = {};\r\n\r\n  for (const node of nodes)\r\n    map[node.activity.id] = node.activity;\r\n\r\n  return map;\r\n}\r\n\r\nexport function createActivityNodeMap(nodes: Array<ActivityNode>): Hash<ActivityNode> {\r\n  const map = {};\r\n\r\n  for (const node of nodes)\r\n    map[node.activity.id] = node;\r\n\r\n  return map;\r\n}\r\n\r\nexport function walkActivities(root: Activity): ActivityNode {\r\n  const descriptors = descriptorsStore.activityDescriptors;\r\n  const collectedActivities = new Set<Activity>([root]);\r\n  const graph: ActivityNode = new ActivityNodeClass(root);\r\n  const collectedNodes = new Set<ActivityNode>([graph]);\r\n\r\n  walkRecursive(graph, root, collectedActivities, collectedNodes, descriptors);\r\n  return graph;\r\n}\r\n\r\nexport function flatten(root: ActivityNode): Array<ActivityNode> {\r\n  return flattenList([root]);\r\n}\r\n\r\nexport function flattenList(activities: Array<ActivityNode>): Array<ActivityNode> {\r\n  let list: Array<ActivityNode> = [...activities];\r\n\r\n  for (const activity of activities) {\r\n    const childList = flattenList(activity.children);\r\n    list = [...list, ...childList];\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nfunction walkRecursive(node: ActivityNode, activity: Activity, collectedActivities: Set<Activity>, collectedNodes: Set<ActivityNode>, descriptors: Array<ActivityDescriptor>) {\r\n  const ports = getPorts(node, activity, descriptors);\r\n\r\n  for (const port of ports) {\r\n    const collectedNodesArray = Array.from(collectedNodes);\r\n    let childNode = collectedNodesArray.find(x => x.activity == port.activity);\r\n\r\n    if (!childNode) {\r\n      childNode = new ActivityNodeClass(port.activity);\r\n      childNode.port = port.port;\r\n      //childNode = {activity: port.activity, children: [], parents: [], port: port.port};\r\n\r\n      if (!collectedNodes.has(childNode))\r\n        collectedNodes.add(childNode);\r\n    }\r\n\r\n    if (childNode !== node) {\r\n      if (!!childNode.activity) {\r\n        if (!childNode.parents.includes(node))\r\n          childNode.parents.push(node);\r\n\r\n        if (!node.children.includes(childNode))\r\n          node.children.push(childNode);\r\n\r\n        if (!collectedActivities.has(port.activity))\r\n          collectedActivities.add(port.activity);\r\n\r\n        walkRecursive(childNode, port.activity, collectedActivities, collectedNodes, descriptors);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getPorts(node: ActivityNode, activity: Activity, descriptors: Array<ActivityDescriptor>): Array<ActivityPort> {\r\n  const portProviderRegistry = Container.get(PortProviderRegistry);\r\n  const portProvider = portProviderRegistry.get(activity.type);\r\n  const activityDescriptor = descriptors.find(x => x.typeName == activity.type);\r\n  const ports = portProvider.getOutboundPorts({activity, activityDescriptor});\r\n  let activityPorts: Array<ActivityPort> = [];\r\n\r\n  const portProviderContext: PortProviderContext = {\r\n    activityDescriptor,\r\n    activity\r\n  };\r\n\r\n  for (const port of ports) {\r\n    const value = portProvider.resolvePort(port.name, portProviderContext);\r\n\r\n    if (Array.isArray(value)) {\r\n      const activities = value as Array<Activity>;\r\n      activityPorts = [...activityPorts, ...activities.map(x => ({port: port.name, activity: x}))];\r\n    } else {\r\n      activityPorts.push({port: port.name, activity: value});\r\n    }\r\n  }\r\n\r\n  return activityPorts;\r\n}\r\n"],"version":3}