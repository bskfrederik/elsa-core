{"file":"properties.js","mappings":"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","names":["descriptorsStore"],"sources":["./src/modules/workflow-definitions/models/props-editor-tabs.ts","./src/modules/workflow-definitions/components/workflow-properties/properties.tsx"],"sourcesContent":["export enum WorkflowPropertiesEditorTabs {\r\n    Properties = 'properties',\r\n    Variables = 'variables',\r\n    Settings = 'settings',\r\n    InputOutput = 'input-output',\r\n    VersionHistory = 'versionHistory'\r\n}","import {Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../../services\";\nimport {InputDefinition, OutputDefinition, WorkflowDefinition, WorkflowOptions} from \"../../models/entities\";\nimport {PropertiesTabModel, TabModel, Widget, WorkflowDefinitionPropsUpdatedArgs, WorkflowPropertiesEditorDisplayingArgs, WorkflowPropertiesEditorEventTypes, WorkflowPropertiesEditorModel} from \"../../models/ui\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport {InfoList} from \"../../../../components/shared/forms/info-list\";\nimport {TabChangedArgs, Variable} from \"../../../../models\";\nimport {WorkflowDefinitionsApi} from \"../../services/api\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {WorkflowPropertiesEditorTabs} from \"../../models/props-editor-tabs\";\nimport { getLocaleComponentStrings } from '../../../../utils/locale';\n\n@Component({\n  tag: 'elsa-workflow-definition-properties-editor',\n})\nexport class WorkflowDefinitionPropertiesEditor {\n  private readonly eventBus: EventBus;\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\n\n    this.model = {\n      tabModels: [],\n    }\n  }\n\n  @Prop() workflowDefinition?: WorkflowDefinition;\n  @Prop() workflowVersions: Array<WorkflowDefinition>;\n  @Prop() readonly: boolean;\n  @Event() workflowPropsUpdated: EventEmitter<WorkflowDefinitionPropsUpdatedArgs>;\n  @Event() versionSelected: EventEmitter<WorkflowDefinition>;\n  @Event() deleteVersionClicked: EventEmitter<WorkflowDefinition>;\n  @Event() revertVersionClicked: EventEmitter<WorkflowDefinition>;\n  @State() private model: WorkflowPropertiesEditorModel;\n  @State() private selectedTabIndex: number = 0;\n  @Element() element: HTMLElement;\n  strings!: any;\n\n\n  @Method()\n  public async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  public async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Watch('workflowDefinition')\n  async onWorkflowDefinitionChanged() {\n    await this.createModel();\n  }\n\n  @Watch('workflowVersions')\n  async onWorkflowVersionsChanged() {\n    await this.createModel();\n  }\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    await this.createModel();\n  }\n\n  public render() {\n    const workflowDefinition = this.workflowDefinition;\n    const title = workflowDefinition?.name ?? 'Untitled';\n    const subTitle = 'Workflow Definition'\n    const tabs = this.model.tabModels.map(x => x.tab);\n\n    return (\n      <elsa-form-panel\n        isReadonly={this.readonly}\n        mainTitle={title}\n        subTitle={subTitle}\n        tabs={tabs}\n        selectedTabIndex={this.selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}/>\n    );\n  }\n\n  private createModel = async () => {\n    const model = {\n      tabModels: []\n    };\n\n    const workflowDefinition = this.workflowDefinition;\n    const options: WorkflowOptions = workflowDefinition.options || {};\n    const autoUpdateConsumingWorkflows = options.autoUpdateConsumingWorkflows ?? false;\n    const usableAsActivity = options.usableAsActivity ?? false;\n\n    if (!workflowDefinition) {\n      this.model = model;\n      return;\n    }\n\n    const propertiesTabModel: PropertiesTabModel = {\n      name: 'properties',\n      tab: null,\n      Widgets: [{\n        name: 'workflowName',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label={this.strings.propertiesWorkflowName} fieldId=\"workflowName\" hint={this.strings.propertiesWorkflowNameHint}>\n            <input type=\"text\" name=\"workflowName\" id=\"workflowName\" value={workflow.name} onChange={e => this.onPropertyEditorChanged(wf => wf.name = (e.target as HTMLInputElement).value)}/>\n          </FormEntry>;\n        },\n        order: 0\n      }, {\n        name: 'workflowDescription',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label={this.strings.propertiesWorkflowDescription} fieldId=\"workflowDescription\" hint={this.strings.propertiesWorkflowDescriptionHint}>\n            <textarea name=\"workflowDescription\" id=\"workflowDescription\" value={workflow.description} rows={6} onChange={e => this.onPropertyEditorChanged(wf => wf.description = (e.target as HTMLTextAreaElement).value)}/>\n          </FormEntry>;\n        },\n        order: 5\n      }, {\n        name: 'workflowInfo',\n        content: () => {\n          const workflow = this.workflowDefinition;\n\n          const workflowDetails = {\n            [this.strings.propertiesDefitionId]: isNullOrWhitespace(workflow.definitionId) ? this.strings.propertiesNew : workflow.definitionId,\n            [this.strings.propertiesVersionId]: isNullOrWhitespace(workflow.id) ? this.strings.propertiesNew : workflow.id,\n            [this.strings.propertiesVersion]: workflow.version.toString(),\n            [this.strings.propertiesStatus]: workflow.isPublished ? this.strings.propertiesPublished : this.strings.propertiesDraft,\n            [this.strings.propertiesReadOnly]: workflow.isReadonly ? this.strings.propertiesYes : this.strings.propertiesNo\n          };\n\n          return <InfoList title=\"Information\" dictionary={workflowDetails}/>;\n        },\n        order: 10\n      }]\n    };\n\n    propertiesTabModel.tab = {\n      displayText: this.strings.propertiesTab,\n      order: 0,\n      content: () => this.renderPropertiesTab(propertiesTabModel)\n    };\n\n    const variablesTabModel: TabModel = {\n      name: 'variables',\n      tab: {\n        displayText: this.strings.variablesTab,\n        order: 5,\n        content: () => this.renderVariablesTab()\n      }\n    }\n\n    const strategies = descriptorsStore.workflowActivationStrategyDescriptors;\n    const firstStrategy = strategies.length > 0 ? strategies[0] : null;\n    const defaultDescription = firstStrategy?.description ?? '';\n\n    const settingsWidgets: Array<Widget> = [\n      {\n        name: 'workflowActivationValidator',\n        order: 0,\n        content: () => <FormEntry label={this.strings.settingsActivitationStrategy} fieldId=\"workflowActivationStrategyType\" hint={defaultDescription}>\n          <select name=\"workflowActivationStrategyType\" onChange={e => this.onPropertyEditorChanged(wf => {\n            const selectElement = (e.target as HTMLSelectElement);\n            options.activationStrategyType = selectElement.value;\n            wf.options = options;\n\n            const hintElement: HTMLElement = selectElement.closest('.form-entry').getElementsByClassName('form-field-hint')[0] as HTMLElement;\n            const strategy = strategies.find(x => x.typeName == selectElement.value);\n            hintElement.innerText = strategy.description;\n          })}>\n            {strategies.map(strategy => <option value={strategy.typeName} selected={strategy.typeName == options.activationStrategyType}>{strategy.displayName}</option>)}\n          </select>\n        </FormEntry>\n      },\n      {\n        name: 'usableAsActivity',\n        order: 0,\n        content: () => <CheckboxFormEntry label={this.strings.settingsUsableAsActivity} fieldId=\"UsableAsActivity\" hint={this.strings.settingsUsableAsActivityHint}>\n          <input type=\"checkbox\" id=\"UsableAsActivity\" name=\"UsableAsActivity\" checked={usableAsActivity} onChange={e => this.onPropertyEditorChanged(wf => {\n            const inputElement = (e.target as HTMLInputElement);\n            wf.options.usableAsActivity = inputElement.checked;\n            this.createModel();\n          })}/>\n        </CheckboxFormEntry>\n      },\n      {\n        name: 'autoUpdateConsumingWorkflows',\n        order: 0,\n        content: () =>\n          <CheckboxFormEntry fieldId=\"UpdateConsumingWorkflows\" label={this.strings.settingsAutoUpdateConsumingWorkflows} hint={this.strings.settingsAutoUpdateConsumingWorkflowsHint}>\n            <input type=\"checkbox\" name=\"UpdateConsumingWorkflows\" id=\"UpdateConsumingWorkflows\" checked={autoUpdateConsumingWorkflows} onChange={e => this.onPropertyEditorChanged(wf => {\n              const inputElement = e.target as HTMLInputElement;\n              options.autoUpdateConsumingWorkflows = inputElement.checked;\n              wf.options = options;\n            })}/>\n          </CheckboxFormEntry>\n      }\n    ];\n\n    const settingsTabModel: TabModel = {\n      name: 'settings',\n      tab: {\n        displayText: this.strings.settingsTab,\n        order: 10,\n        content: () => <elsa-widgets widgets={settingsWidgets}/>\n      }\n    }\n\n    const inputOutputTabModel: TabModel = {\n      name: 'input-output',\n      tab: {\n        displayText: this.strings.inputOutputTab,\n        order: 15,\n        content: () => this.renderInputOutputTab()\n      }\n    }\n\n    const versionHistoryTabModel: TabModel = {\n      name: 'versionHistory',\n      tab: {\n        displayText: this.strings.versionHistoryTab,\n        order: 20,\n        content: () => this.renderVersionHistoryTab()\n      }\n    }\n\n    model.tabModels = [propertiesTabModel, variablesTabModel, settingsTabModel, versionHistoryTabModel, inputOutputTabModel];\n\n    const args: WorkflowPropertiesEditorDisplayingArgs = {\n      workflowDefinition,\n      model,\n      notifyWorkflowDefinitionChanged: () => this.onWorkflowDefinitionUpdated()\n    };\n\n    await this.eventBus.emit(WorkflowPropertiesEditorEventTypes.Displaying, this, args);\n\n    this.model = model;\n  }\n\n  private renderPropertiesTab = (tabModel: PropertiesTabModel) => <elsa-widgets widgets={tabModel.Widgets}/>;\n\n  private renderVariablesTab = () => {\n    const variables: Array<Variable> = this.workflowDefinition?.variables ?? [];\n\n    return <div>\n      <elsa-variables-editor variables={variables} onVariablesChanged={e => this.onVariablesUpdated(e)}/>\n    </div>\n  };\n\n  private renderInputOutputTab = () => {\n    const inputs: Array<InputDefinition> = this.workflowDefinition?.inputs ?? [];\n    const outputs: Array<OutputDefinition> = this.workflowDefinition?.outputs ?? [];\n    const outcomes: Array<string> = this.workflowDefinition?.outcomes ?? [];\n\n    return <div>\n      <elsa-workflow-definition-input-output-settings\n        inputs={inputs}\n        outputs={outputs}\n        outcomes={outcomes}\n        onInputsChanged={e => this.onInputsUpdated(e)}\n        onOutputsChanged={e => this.onOutputsUpdated(e)}\n        onOutcomesChanged={e => this.onOutcomesUpdated(e)}\n      />\n    </div>\n  };\n\n  private renderVersionHistoryTab = () => {\n    return <div>\n      <elsa-workflow-definition-version-history\n        selectedVersion={this.workflowDefinition}\n        workflowVersions={this.workflowVersions}\n      />\n    </div>\n  };\n\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex;\n\n  private onPropertyEditorChanged = (apply: (w: WorkflowDefinition) => void) => {\n    const workflowDefinition = this.workflowDefinition;\n    apply(workflowDefinition);\n    this.workflowPropsUpdated.emit({workflowDefinition: workflowDefinition});\n  }\n\n  private onVariablesUpdated = async (e: CustomEvent<Array<Variable>>) => this.onPropsUpdated('variables', e.detail)\n\n  private onInputsUpdated = async (e: CustomEvent<Array<InputDefinition>>) => this.onPropsUpdated('inputs', e.detail)\n  private onOutputsUpdated = async (e: CustomEvent<Array<OutputDefinition>>) => this.onPropsUpdated('outputs', e.detail)\n\n  private onOutcomesUpdated = async (e: CustomEvent<Array<string>>) => this.onPropsUpdated('outcomes', e.detail)\n\n  private onPropsUpdated = async (\n    propName: string,\n    propValue: Array<Variable> | Array<InputDefinition> | Array<OutputDefinition> | Array<string>\n  ) => {\n    const workflowDefinition = this.workflowDefinition;\n\n    if (!workflowDefinition || !workflowDefinition.isLatest) {\n      console.debug('onPropsUpdated: workflowDefinition is not latest');\n      return;\n    }\n\n    workflowDefinition[propName] = propValue;\n    const updatedTab = this.getPropEditorSectionByPropName(propName);\n    this.workflowPropsUpdated.emit({workflowDefinition, updatedTab});\n    await this.createModel();\n  };\n\n  private onWorkflowDefinitionUpdated = () => {\n    const workflowDefinition = this.workflowDefinition;\n    this.workflowPropsUpdated.emit({workflowDefinition});\n  };\n\n  private getPropEditorSectionByPropName(propName: string): WorkflowPropertiesEditorTabs {\n    const enumKey = Object.keys(WorkflowPropertiesEditorTabs).find(key => WorkflowPropertiesEditorTabs[key as keyof typeof WorkflowPropertiesEditorTabs] === propName);\n\n    if (enumKey) {\n      return WorkflowPropertiesEditorTabs[enumKey as keyof typeof WorkflowPropertiesEditorTabs];\n    }\n    return null;\n  }\n}\n"],"version":3}