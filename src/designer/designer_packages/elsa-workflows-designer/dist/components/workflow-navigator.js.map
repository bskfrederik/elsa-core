{"file":"workflow-navigator.js","mappings":"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","names":["descriptorsStore"],"sources":["./src/modules/flowchart/workflow-navigator.tsx"],"sourcesContent":["import {Component, FunctionalComponent, h, Prop, Event, EventEmitter} from \"@stencil/core\";\r\nimport {Container} from \"typedi\";\r\nimport {ActivityIconRegistry, ActivityNode, flatten, PortProviderRegistry, walkActivities} from \"../../services\";\r\nimport {Flowchart, FlowchartNavigationItem, FlowchartPathItem} from \"./models\";\r\nimport {Activity, ActivityDescriptor, Port} from \"../../models\";\r\nimport descriptorsStore from \"../../data/descriptors-store\";\r\nimport {WorkflowDefinition} from \"../workflow-definitions/models/entities\";\r\nimport {FlowchartIcon} from \"../../components/icons/activities\";\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-navigator',\r\n  shadow: false\r\n})\r\nexport class WorkflowNavigator {\r\n  private readonly iconRegistry: ActivityIconRegistry;\r\n  private readonly portProviderRegistry: PortProviderRegistry;\r\n\r\n  constructor() {\r\n    this.iconRegistry = Container.get(ActivityIconRegistry);\r\n    this.portProviderRegistry = Container.get(PortProviderRegistry);\r\n  }\r\n\r\n  @Prop() items: Array<FlowchartPathItem> = [];\r\n  @Prop() rootActivity: Activity;\r\n\r\n  @Event() navigate: EventEmitter<FlowchartPathItem>;\r\n\r\n  render() {\r\n\r\n    let items = this.items;\r\n\r\n    if (items.length <= 0)\r\n      return null;\r\n\r\n    if (!this.rootActivity)\r\n      return;\r\n\r\n    const nodes = flatten(walkActivities(this.rootActivity));\r\n\r\n    return <div class=\"tw-ml-8\">\r\n      <nav class=\"tw-flex\" aria-label=\"Breadcrumb\">\r\n        <ol role=\"list\" class=\"tw-flex tw-items-center tw-space-x-3\">\r\n          {items.length > 0 && (\r\n            <li>\r\n              <div class=\"tw-flex tw-items-center\">\r\n                <a onClick={e => this.onItemClick(null)}\r\n                   href=\"#\"\r\n                   class=\"tw-block tw-flex tw-items-center tw-text-gray-400 hover:tw-text-gray-500\">\r\n                  <div class=\"tw-bg-blue-500 tw-rounded\">\r\n                    {<FlowchartIcon/>}\r\n                  </div>\r\n                  <span class=\"tw-ml-4 tw-text-sm tw-font-medium tw-text-gray-500 hover:tw-text-gray-700\">{this.rootActivity.id}</span>\r\n                </a>\r\n                <svg class=\"tw-ml-2 tw-flex-shrink-0 tw-h-5 tw-w-5 tw-text-gray-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n                  <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\r\n                </svg>\r\n              </div>\r\n            </li>\r\n          )}\r\n          {items.map((item, index) => this.renderPathItem(item, index, nodes))}\r\n        </ol>\r\n      </nav>\r\n    </div>\r\n  }\r\n\r\n  private renderPathItem = (item: FlowchartPathItem, index: number, nodes: Array<ActivityNode>) => {\r\n    const activityId = item.activityId;\r\n    const activity = nodes.find(x => x.activity.id == activityId).activity;\r\n    const activityDescriptor = descriptorsStore.activityDescriptors.find(x => x.typeName == activity.type);\r\n    const icon = this.iconRegistry.getOrDefault(activity.type)();\r\n    const listElements = [];\r\n    const isLastItem = index == this.items.length - 1;\r\n\r\n    const onItemClick = (e: MouseEvent, item: FlowchartPathItem) => {\r\n      e.preventDefault();\r\n      this.onItemClick(item);\r\n    }\r\n\r\n    let port: Port = null;\r\n\r\n    if (!!item.portName) {\r\n      const portProvider = this.portProviderRegistry.get(activity.type);\r\n      const ports = portProvider.getOutboundPorts({activity, activityDescriptor});\r\n\r\n      if (ports.length > 1)\r\n        port = ports.find(x => x.name == item.portName);\r\n    }\r\n\r\n    if (isLastItem) {\r\n      listElements.push(\r\n        <li>\r\n          <div class=\"tw-flex tw-items-center\">\r\n            <span class=\"tw-block tw-flex tw-items-center tw-text-gray-500\">\r\n              <div class=\"tw-bg-blue-500 tw-rounded\">\r\n                {icon}\r\n              </div>\r\n              <span class=\"tw-ml-4 tw-text-sm tw-font-medium tw-text-gray-500\">{activityId}</span>\r\n            </span>\r\n            {!!port ? (\r\n              <svg class=\"tw-ml-2 tw-flex-shrink-0 tw-h-5 tw-w-5 tw-text-gray-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n                <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\r\n              </svg>\r\n            ) : undefined}\r\n          </div>\r\n        </li>\r\n      );\r\n    } else {\r\n      listElements.push(\r\n        <li>\r\n          <div class=\"tw-flex tw-items-center\">\r\n            <a onClick={e => onItemClick(e, item)}\r\n               href=\"#\"\r\n               class=\"tw-block tw-flex tw-items-center tw-text-gray-400 hover:tw-text-gray-500\">\r\n              <div class=\"tw-bg-blue-500 tw-rounded\">\r\n                {icon}\r\n              </div>\r\n              <span class=\"tw-ml-4 tw-text-sm tw-font-medium tw-text-gray-500 hover:tw-text-gray-700\">{activityId}</span>\r\n            </a>\r\n            <svg class=\"tw-ml-2 tw-flex-shrink-0 tw-h-5 tw-w-5 tw-text-gray-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n              <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\r\n            </svg>\r\n          </div>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    if (!!port) {\r\n      listElements.push(\r\n        <li>\r\n          <div class=\"tw-flex tw-items-center\">\r\n            <span class=\"tw-text-sm tw-font-medium tw-text-gray-500\" aria-current=\"page\">{port.displayName}</span>\r\n          </div>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    return listElements;\r\n  }\r\n\r\n  private onItemClick = (item: FlowchartPathItem) => this.navigate.emit(item);\r\n}\r\n"],"version":3}