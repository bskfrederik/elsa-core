{"file":"elsa-studio.js","mappings":";;;;;;;;;;;;;;AAAA,MAAM,SAAS,GAAG,0EAA0E;;MCe/E,MAAM;EAKjB;;;;;;;;IACE,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACxC,IAAI,CAAC,yBAAyB,GAAG,SAAS,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IAC1E,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;GACrD;EAUO,eAAe,CAAC,KAAa;IACnC,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC/C,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;GAC9B;EAGO,mBAAmB,CAAC,KAAa;IACvC,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACrD,QAAQ,CAAC,aAAa,GAAG,KAAK,CAAC;GAChC;EAED,MAAM,iBAAiB;IACrB,MAAM,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACrD,MAAM,OAAO,GAA8B,EAAC,SAAS,EAAE,SAAS,EAAE,cAAc,EAAC,CAAC;IAClF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEhC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACrCA,KAAY,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;IAC5D,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAC/D,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;;IAGvC,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAE/C,IAAI,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,aAAa,EAAE,EAAE;MACnD,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;MACzC,MAAM,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;KAC9C;GACF;EAED,MAAM;IACJ,OAAO,EAAC,IAAI,QACV,gCAAwB,EACxB,WAAK,KAAK,EAAC,qBAAqB,IAC7BC,OAAoB,CAAC,sBAAsB,EAAE,CAC1C,EACLA,OAAoB,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,CAAC,EAC3D,sCAA8B,CACzB,CAAC;GACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["optionsStore","studioComponentStore"],"sources":["./src/components/studio/studio.css?tag=elsa-studio","./src/components/studio/studio.tsx"],"sourcesContent":[":host {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n\r\n.elsa-studio-content {\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n","import {Component, Element, EventEmitter, h, Host, Prop, Watch, Event} from '@stencil/core';\nimport 'reflect-metadata';\nimport {Container} from 'typedi';\nimport {AuthContext, EventBus, PluginRegistry, ServerSettings} from '../../services';\nimport {MonacoEditorSettings} from \"../../services/monaco-editor-settings\";\nimport {WorkflowDefinitionManager} from \"../../modules/workflow-definitions/services/manager\";\nimport {EventTypes} from \"../../models\";\nimport studioComponentStore from \"../../data/studio-component-store\";\nimport optionsStore from '../../data/designer-options-store';\nimport {StudioInitializingContext} from \"../../models/studio\";\n\n@Component({\n  tag: 'elsa-studio',\n  styleUrl: 'studio.css',\n})\nexport class Studio {\n  private readonly eventBus: EventBus;\n  private readonly workflowDefinitionManager: WorkflowDefinitionManager;\n  private readonly pluginRegistry: PluginRegistry;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.workflowDefinitionManager = Container.get(WorkflowDefinitionManager);\n    this.pluginRegistry = Container.get(PluginRegistry);\n  }\n\n  @Element() private el: HTMLElsaStudioElement;\n  @Prop({attribute: 'server'}) serverUrl: string;\n  @Prop({attribute: 'monaco-lib-path'}) monacoLibPath: string;\n  @Prop({attribute: 'enable-flexible-ports'}) enableFlexiblePorts: boolean;\n  @Prop({attribute: 'disable-auth'}) disableAuth: boolean;\n  @Event() initializing: EventEmitter<StudioInitializingContext>;\n\n  @Watch('serverUrl')\n  private handleServerUrl(value: string) {\n    const settings = Container.get(ServerSettings);\n    settings.baseAddress = value;\n  }\n\n  @Watch('monacoLibPath')\n  private handleMonacoLibPath(value: string) {\n    const settings = Container.get(MonacoEditorSettings);\n    settings.monacoLibPath = value;\n  }\n\n  async componentWillLoad() {\n    const pluginRegistry = Container.get(PluginRegistry);\n    const context: StudioInitializingContext = {container: Container, pluginRegistry};\n    this.initializing.emit(context);\n\n    this.handleMonacoLibPath(this.monacoLibPath);\n    this.handleServerUrl(this.serverUrl);\n    optionsStore.enableFlexiblePorts = this.enableFlexiblePorts;\n    await this.eventBus.emit(EventTypes.Studio.Initializing, this);\n    await this.pluginRegistry.initialize();\n\n    // If we have a valid session, emit the signed in event so that descriptors will be loaded.\n    const authContext = Container.get(AuthContext);\n\n    if (this.disableAuth || authContext.getIsSignedIn()) {\n      const eventBus = Container.get(EventBus);\n      await eventBus.emit(EventTypes.Auth.SignedIn)\n    }\n  }\n\n  render() {\n    return <Host>\n      <elsa-workflow-toolbar/>\n      <div class=\"elsa-studio-content\">\n        {studioComponentStore.activeComponentFactory()}\n      </div>\n      {studioComponentStore.modalComponents.map(modal => modal())}\n      <elsa-modal-dialog-container/>\n    </Host>;\n  }\n}\n"],"version":3}