{"file":"variable-editor-dialog-content.js","mappings":"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","names":["descriptorsStore","groupBy"],"sources":["./src/modules/workflow-definitions/components/workflow-properties/variable-editor-dialog-content.tsx"],"sourcesContent":["import {Component, h, Prop, Event, EventEmitter, Method, Element} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport {StorageDriverDescriptor, Variable} from \"../../../../models\";\nimport {generateIdentity, isNullOrWhitespace} from \"../../../../utils\";\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-variable-editor-dialog-content',\n  shadow: false\n})\nexport class VariableEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() variable: Variable;\n  @Event() variableChanged: EventEmitter<Variable>;\n\n  @Method()\n  async getVariable(): Promise<Variable> {\n    return this.getVariableInternal(this.formElement);\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    console.log(this.strings)\n  }\n\n  render() {\n    const variable: Variable = this.variable ?? {id: '', name: '', typeName: 'Object', isArray: false};\n    const variableTypeName = variable.typeName;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const groupedVariableTypes = groupBy(availableTypes, x => x.category);\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">{this.strings.editVariable}</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"variableName\" label={this.strings.labelName} hint={this.strings.nameHint}>\n                <input type=\"text\" name=\"variableName\" id=\"variableName\" value={variable.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"variableTypeName\" label={this.strings.labelType} hint={this.strings.typeHint}>\n                <select id=\"variableTypeName\" name=\"variableTypeName\">\n                  {Object.keys(groupedVariableTypes).map(category => {\n                    const variableTypes = groupedVariableTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {variableTypes.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == variableTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <CheckboxFormEntry fieldId=\"variableIsArray\" label={this.strings.labelArray} hint={this.strings.arrayHint}>\n                <input type=\"checkbox\" name=\"variableIsArray\" id=\"variableIsArray\" value=\"true\" checked={variable.isArray}/>\n              </CheckboxFormEntry>\n\n              <FormEntry fieldId=\"variableValue\" label={this.strings.labelValue} hint={this.strings.valueHint}>\n                <input type=\"text\" name=\"variableValue\" id=\"variableValue\" value={variable.value}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"variableStorageDriverId\" label={this.strings.labelStorage} hint={this.strings.storageHint}>\n                <select id=\"variableStorageDriverTypeName\" name=\"variableStorageDriverTypeName\">\n                  {storageDrivers.map(driver => {\n                    const value = driver.typeName;\n                    const text = driver.displayName;\n                    const selected = value == variable.storageDriverTypeName;\n                    return <option value={value} selected={selected}>{text}</option>;\n                  })}\n                </select>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const variable = this.getVariableInternal(form);\n    this.variableChanged.emit(variable);\n  };\n\n  private getVariableInternal = (form: HTMLFormElement): Variable => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('variableName') as string;\n    const value = formData.get('variableValue') as string;\n    const type = formData.get('variableTypeName') as string;\n    const isArray = formData.get('variableIsArray') as string == 'true';\n    const driverTypeName = formData.get('variableStorageDriverTypeName') as string;\n    const variable = this.variable;\n\n    if (isNullOrWhitespace(variable.id))\n      variable.id = generateIdentity();\n\n    variable.name = name;\n    variable.typeName = type;\n    variable.value = value;\n    variable.isArray = isArray;\n    variable.storageDriverTypeName = isNullOrWhitespace(driverTypeName) ? null : driverTypeName;\n\n    return variable;\n  };\n\n}\n"],"version":3}