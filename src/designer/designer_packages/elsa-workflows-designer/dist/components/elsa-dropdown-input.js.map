{"file":"elsa-dropdown-input.js","mappings":";;;;;;;MAUa,aAAa;;;;IAGhB,eAAU,GAAe,EAAC,KAAK,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAC,CAAC;IAuCzD,aAAQ,GAAG,CAAC,CAAQ;MAC1B,MAAM,YAAY,GAAG,CAAC,CAAC,MAA2B,CAAC;MACnD,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;KACzE,CAAA;IAEO,wBAAmB,GAAG,CAAC,CAAoC;MACjE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACtE,CAAA;;;EA5CM,MAAM,iBAAiB;IAC5B,IAAI,CAAC,UAAU,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;GAC/E;EAEM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC;IACvC,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC;IACzC,MAAM,KAAK,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAClD,MAAM,MAAM,GAAG,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,IAAI,mCAAI,eAAe,CAAC,aAAa,CAAC;IACxE,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;IAClD,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAgC,0CAAE,KAAK,EAAE,YAAY,CAAC,CAAC;IACpG,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC,UAAU,CAAC;IAChC,IAAI,YAAY,GAAG,KAAK,CAAC;IAEzB,IAAI,YAAY,IAAI,SAAS,EAAE;MAC7B,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;MAClD,YAAY,GAAG,YAAY,GAAG,YAAY,CAAC,QAAQ,EAAE,GAAG,SAAS,CAAC;KACnE;IAED,QACE,iCAA2B,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,IACzI,cAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAClE,KAAK,CAAC,GAAG,CAAC,IAAI;MACb,MAAM,cAAc,GAAG,QAAQ,IAAI,CAAC,IAAI,QAAQ,CAAC;MACjD,MAAM,KAAK,GAAG,cAAc,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;MAC5D,MAAM,IAAI,GAAG,cAAc,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;MAC1D,OAAO,cAAQ,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,KAAK,YAAY,IAAG,IAAI,CAAU,CAAC;KAChF,CAAC,CACK,CACiB,EAC5B;GACH;EAWO,iBAAiB,CAAC,KAAyB,EAAE,YAAgC;;IACnF,OAAO,MAAA,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,YAAY,mCAAI,EAAE,CAAC;GACpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/inputs/dropdown.tsx"],"sourcesContent":["import {Component, Prop, h} from '@stencil/core';\r\nimport {LiteralExpression, SelectList, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue, getSelectListItems} from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-dropdown-input',\r\n  shadow: false\r\n})\r\nexport class DropdownInput {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n\r\n  private selectList: SelectList = {items: [], isFlagsEnum: false};\r\n\r\n  public async componentWillLoad() {\r\n    this.selectList = await getSelectListItems(this.inputContext.inputDescriptor);\r\n  }\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const value = this.getValueOrDefault((input?.expression as LiteralExpression)?.value, defaultValue);\r\n    const {items} = this.selectList;\r\n    let currentValue = value;\r\n\r\n    if (currentValue == undefined) {\r\n      const defaultValue = inputDescriptor.defaultValue;\r\n      currentValue = defaultValue ? defaultValue.toString() : undefined;\r\n    }\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n          {items.map(item => {\r\n            const optionIsObject = typeof (item) == 'object';\r\n            const value = optionIsObject ? item.value : item.toString();\r\n            const text = optionIsObject ? item.text : item.toString();\r\n            return <option value={value} selected={value === currentValue}>{text}</option>;\r\n          })}\r\n        </select>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    this.inputContext.inputChanged(inputElement.value, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n\r\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\r\n    return value ?? defaultValue ?? '';\r\n  }\r\n}\r\n"],"version":3}