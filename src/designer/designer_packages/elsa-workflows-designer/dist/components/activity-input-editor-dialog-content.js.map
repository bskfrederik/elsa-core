{"file":"activity-input-editor-dialog-content.js","mappings":"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","names":["descriptorsStore","groupBy"],"sources":["./src/modules/workflow-definitions/components/workflow-properties/activity-input-editor-dialog-content.tsx"],"sourcesContent":["import {Component, h, Prop, Event, EventEmitter, Method, Element} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {InputDefinition} from \"../../models/entities\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {StorageDriverDescriptor} from \"../../../../models\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-activity-input-editor-dialog-content',\n  shadow: false\n})\nexport class ActivityInputEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() input: InputDefinition;\n  @Event() inputChanged: EventEmitter<InputDefinition>;\n\n  @Method()\n  async getInput(): Promise<InputDefinition> {\n    return this.getInputInternal(this.formElement);\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    console.log(this.strings);\n  }\n\n  render() {\n    const input: InputDefinition = this.input ?? {name: '', type: 'Object', isArray: false};\n    const inputTypeName = input.type;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n    const groupedTypes = groupBy(availableTypes, x => x.category);\n    const selectedUIHint = input.uiHint;\n\n    // TODO: Get this from configuration (API).\n    const uiHints = [{\n      name: 'Single line',\n      value: 'single-line'\n    }, {\n      name: 'Multi line',\n      value: 'multi-line'\n    }, {\n      name: 'Checkbox',\n      value: 'checkbox'\n    }, {\n      name: 'Check list',\n      value: 'check-list'\n    }, {\n      name: 'Radio list',\n      value: 'radio-list'\n    }, {\n      name: 'Dropdown',\n      value: 'dropdown'\n    }, {\n      name: 'Multi text',\n      value: 'multi-text'\n    }, {\n      name: 'Code editor',\n      value: 'code-editor'\n    }, {\n      name: 'Variable picker',\n      value: 'variable-picker'\n    }, {\n      name: 'Type picker',\n      value: 'type-picker'\n    }\n    ];\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\"> {this.strings.editInputConfiguration}</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"inputName\" label={this.strings.inputName} hint={this.strings.inputNameHint}>\n                <input type=\"text\" name=\"inputName\" id=\"inputName\" value={input.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputTypeName\" label={this.strings.inputType} hint={this.strings.inputTypeHint}>\n                <select id=\"inputTypeName\" name=\"inputTypeName\">\n                  {Object.keys(groupedTypes).map(category => {\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == inputTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <CheckboxFormEntry fieldId=\"inputIsArray\" label={this.strings.arrayInputLabel} hint={this.strings.arrayInputHint}>\n                <input type=\"checkbox\" name=\"inputIsArray\" id=\"inputIsArray\" value=\"true\" checked={input.isArray}/>\n              </CheckboxFormEntry>\n\n              <FormEntry fieldId=\"inputDisplayName\" label={this.strings.displayNameLabel} hint={this.strings.displayNameHint}>\n                <input type=\"text\" name=\"inputDisplayName\" id=\"inputDisplayName\" value={input.displayName}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputDescription\" label={this.strings.inputDescriptionLabel} hint={this.strings.inputDescriptionHint}>\n                <input type=\"text\" name=\"inputDescription\" id=\"inputDescription\" value={input.description}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputCategory\" label={this.strings.inputCategoryLabel} hint={this.strings.inputCategoryHint}>\n                <input type=\"text\" name=\"inputCategory\" id=\"inputCategory\" value={input.category}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputUIHint\" label={this.strings.controlLabel} hint={this.strings.controlHint}>\n                <select name=\"inputUIHint\" id=\"inputUIHint\">\n                  {uiHints.map(uiHint => {\n                    const isSelected = uiHint.value == selectedUIHint;\n                    return <option value={uiHint.value} selected={isSelected}>{uiHint.name}</option>\n                  })}\n                </select>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputStorageDriverType\" label={this.strings.storageLabel} hint={this.strings.storageHint}>\n                <select id=\"inputStorageDriverType\" name=\"inputStorageDriverType\">\n                  {storageDrivers.map(driver => {\n                    const value = driver.typeName;\n                    const text = driver.displayName;\n                    const selected = value == input.storageDriverType;\n                    return <option value={value} selected={selected}>{text}</option>;\n                  })}\n                </select>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const input = this.getInputInternal(form);\n    this.inputChanged.emit(input);\n  };\n\n  private getInputInternal = (form: HTMLFormElement): InputDefinition => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('inputName') as string;\n    const displayName = formData.get('inputDisplayName') as string;\n    const type = formData.get('inputTypeName') as string;\n    const description = formData.get('inputDescription') as string;\n    const category = formData.get('inputCategory') as string;\n    const uiHint = formData.get('inputUIHint') as string;\n    const isArray = formData.get('inputIsArray') as string === 'true';\n    const driverType = formData.get('inputStorageDriverType') as string;\n    const input = this.input;\n\n    input.name = name;\n    input.type = type;\n    input.displayName = displayName;\n    input.category = category;\n    input.description = description;\n    input.uiHint = uiHint;\n    input.isArray = isArray;\n    input.storageDriverType = isNullOrWhitespace(driverType) ? null : driverType;\n\n    return input;\n  };\n\n}\n"],"version":3}