{"file":"elsa-outcome-picker-input.entry.cjs.js","mappings":";;;;;;;;;;;;;;;MAaa,aAAa;;;IAiChB,wBAAmB,GAAG,CAAC,CAAoC;MACjE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACtE,CAAA;IAEO,aAAQ,GAAG,CAAC,CAAQ;MAC1B,MAAM,YAAY,GAAG,CAAC,CAAC,MAA2B,CAAC;MACnD,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC;MACnC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAEA,iBAAW,CAAC,MAAM,CAAC,CAAC;KAC7D,CAAA;;;EAtCM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC;IACvC,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,KAAK,GAAGC,2BAAqB,CAAC,YAAY,CAAC,CAAC;IAClD,MAAM,KAAK,GAAG,MAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAA+B,0CAAE,KAAK,CAAC;IAC7D,MAAM,MAAM,GAAG,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,IAAI,mCAAI,eAAe,CAAC,aAAa,CAAC;IAExE,QACEC,QAACC,8BAAwB,CAAC,QAAQ,QAC/B,CAAC,EAAC,kBAAkB,EAAC;;MACpB,IAAI,QAAQ,GAAa,MAAA,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,QAAQ,mCAAI,EAAE,CAAC;MAC5D,QAAQ,GAAG,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC;MAC/B,OAAOD,uCAA2B,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,IACvJA,oBAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAClE,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAe;QAC5B,MAAM,WAAW,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;QAClC,MAAM,UAAU,GAAG,OAAO,IAAI,KAAK,CAAC;QACpC,OAAOA,oBAAQ,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,IAAG,WAAW,CAAU,CAAC;OAC7E,CAAC,CACK,CACiB,CAAA;KAC7B,CACiC,EACpC;GACH;;;;;","names":["SyntaxNames","getInputPropertyValue","h","WorkflowDefinitionTunnel"],"sources":["./src/components/inputs/outcome-picker.tsx"],"sourcesContent":["import {Component, Prop, h} from '@stencil/core';\r\nimport {ObjectExpression, LiteralExpression, SyntaxNames, Variable} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue, getPropertyValue} from \"../../utils\";\r\nimport {FormEntry} from \"../shared/forms/form-entry\";\r\nimport WorkflowDefinitionTunnel from \"../../modules/workflow-definitions/state\";\r\nimport {OutputDefinition} from \"../../modules/workflow-definitions/models/entities\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-outcome-picker-input',\r\n  shadow: false\r\n})\r\nexport class OutcomePicker {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const description = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const value = (input?.expression as ObjectExpression)?.value;\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n\r\n    return (\r\n      <WorkflowDefinitionTunnel.Consumer>\r\n        {({workflowDefinition}) => {\r\n          let outcomes: string[] = workflowDefinition?.outcomes ?? [];\r\n          outcomes = [null, ...outcomes];\r\n          return <elsa-input-control-switch label={displayName} hint={description} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n            <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n              {outcomes.map((outcome: string) => {\r\n                const displayName = outcome ?? '';\r\n                const isSelected = outcome == value;\r\n                return <option value={outcome} selected={isSelected}>{displayName}</option>;\r\n              })}\r\n            </select>\r\n          </elsa-input-control-switch>\r\n        }}\r\n      </WorkflowDefinitionTunnel.Consumer>\r\n    );\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    const outcome = inputElement.value;\r\n    this.inputContext.inputChanged(outcome, SyntaxNames.Object);\r\n  }\r\n}\r\n"],"version":3}