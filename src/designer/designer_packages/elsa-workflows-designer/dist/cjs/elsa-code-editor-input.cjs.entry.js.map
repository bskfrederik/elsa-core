{"file":"elsa-code-editor-input.entry.cjs.js","mappings":";;;;;;;;;;;;;;;MAkBa,eAAe;;;IAwBlB,aAAQ,GAAG,CAAC,CAAsC;MACxD,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;MAC7B,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAEA,iBAAW,CAAC,OAAO,CAAC,CAAC;KAC5D,CAAA;;;EAxBM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC;IACzC,MAAM,OAAO,GAAsB,eAAe,CAAC,OAAO,IAAI,EAAE,CAAC;IACjE,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;IAClD,MAAM,KAAK,GAAGC,2BAAqB,CAAC,YAAY,CAAC,CAAC;IAClD,IAAI,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAgC,0CAAE,KAAK,EAAE,YAAY,CAAC,CAAC;IAElG,IAAI,KAAK,IAAI,SAAS;MACpB,KAAK,GAAG,eAAe,CAAC,YAAY,CAAC;IAEvC,QACEC,QAACC,mBAAS,IAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,IACzDD,8CAAoB,KAAK,EAAE,KAAK,IAAM,OAAO,IAAE,cAAc,EAAE,IAAI,CAAC,QAAQ,IAAG,CACrE,EACZ;GACH;EAOO,iBAAiB,CAAC,KAAyB,EAAE,YAAgC;;IACnF,OAAO,MAAA,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,YAAY,mCAAI,EAAE,CAAC;GACpC;;;;;","names":["SyntaxNames","getInputPropertyValue","h","FormEntry"],"sources":["./src/components/inputs/code-editor.tsx"],"sourcesContent":["import {Component, h, Prop} from '@stencil/core';\nimport {EditorHeight, LiteralExpression, SyntaxNames} from \"../../models\";\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\nimport {getInputPropertyValue} from \"../../utils\";\nimport {MonacoValueChangedArgs} from \"../shared/monaco-editor/monaco-editor\";\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\nimport {FormEntry} from \"../shared/forms/form-entry\";\n\ninterface CodeEditorOptions {\n  editorHeight?: EditorHeight;\n  language?: string;\n  singleLineMode?: boolean;\n}\n\n@Component({\n  tag: 'elsa-code-editor-input',\n  shadow: false\n})\nexport class CodeEditorInput {\n  @Prop() public inputContext: ActivityInputContext;\n\n  public render() {\n    const inputContext = this.inputContext;\n    const inputDescriptor = inputContext.inputDescriptor;\n    const fieldId = inputDescriptor.name;\n    const displayName = inputDescriptor.displayName;\n    const hint = inputDescriptor.description;\n    const options: CodeEditorOptions = inputDescriptor.options || {};\n    const defaultValue = inputDescriptor.defaultValue;\n    const input = getInputPropertyValue(inputContext);\n    let value = this.getValueOrDefault((input?.expression as LiteralExpression)?.value, defaultValue);\n\n    if (value == undefined)\n      value = inputDescriptor.defaultValue;\n\n    return (\n      <FormEntry label={displayName} fieldId={fieldId} hint={hint}>\n        <elsa-monaco-editor value={value} {...options} onValueChanged={this.onChange}/>\n      </FormEntry>\n    );\n  }\n\n  private onChange = (e: CustomEvent<MonacoValueChangedArgs>) => {\n    const value = e.detail.value;\n    this.inputContext.inputChanged(value, SyntaxNames.Literal);\n  }\n\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\n    return value ?? defaultValue ?? '';\n  }\n}\n"],"version":3}