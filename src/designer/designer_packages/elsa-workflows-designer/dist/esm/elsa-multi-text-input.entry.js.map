{"file":"elsa-multi-text-input.entry.js","mappings":";;;;;;;;;MAUa,cAAc;;;IAyBjB,4BAAuB,GAAG,CAAC,CAA6B;MAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;MACtC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;KAC1D,CAAC;IAEM,wBAAmB,GAAG,CAAC,CAAoC;MACjE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACtE,CAAA;;;EA7BM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC;IACzC,MAAM,KAAK,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAClD,MAAM,MAAM,GAAG,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,IAAI,mCAAI,eAAe,CAAC,aAAa,CAAC;IACxE,MAAM,IAAI,GAAG,MAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAA+B,0CAAE,KAAK,CAAC;IAC5D,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;IAClD,IAAI,MAAM,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAExC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC;MAC/B,MAAM,GAAG,oBAAoB,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAEpD,QACE,iCAA2B,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,IACxI,uBAAiB,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,uBAAuB,GAAG,CACxE,EAC5B;GACH;;;;;","names":[],"sources":["./src/components/inputs/multi-text.tsx"],"sourcesContent":["import {Component, Prop, h} from '@stencil/core';\r\nimport {ObjectExpression, LiteralExpression, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue, getObjectOrParseJson, parseJson} from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-multi-text-input',\r\n  shadow: false\r\n})\r\nexport class MultiTextInput {\r\n  @Prop() inputContext: ActivityInputContext;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const json = (input?.expression as ObjectExpression)?.value;\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    let values = getObjectOrParseJson(json);\r\n\r\n    if (!values || values.length == 0)\r\n      values = getObjectOrParseJson(defaultValue) || [];\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={json} onExpressionChanged={this.onExpressionChanged}>\r\n        <elsa-input-tags fieldId={fieldId} values={values} onValueChanged={this.onPropertyEditorChanged}/>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private onPropertyEditorChanged = (e: CustomEvent<Array<string>>) => {\r\n    const json = JSON.stringify(e.detail);\r\n    this.inputContext.inputChanged(json, SyntaxNames.Object);\r\n  };\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"],"version":3}