{"file":"locale-9771e9cf.js","mappings":"AAAA,SAAS,2BAA2B,CAAC,OAAoB;EACvD,IAAI,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAgB,CAAC;EAC9D,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;EAC3B,OAAO,cAAc,GAAG,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC;AACrD,CAAC;AAED,SAAS,2BAA2B,CAAC,OAAoB;EACvD,IAAI,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAgB,CAAC;EAClE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAA;EACxD,OAAO,cAAc,GAAG,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;AAC3E,CAAC;AAGD,SAAS,8BAA8B,CAAC,aAAqB,EAAE,MAAc,EAAE,QAAgB;EAC7F,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;IACjC,KAAK,CAAC,GAAG,QAAQ,GAAG,aAAa,SAAS,MAAM,OAAO,CAAC;OACvD,IAAI,CAAC,CAAC,MAAM;MACX,IAAI,MAAM,CAAC,EAAE;QAAE,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;;QACjC,MAAM,EAAE,CAAC;KACf,EAAE,MAAM,MAAM,EAAE,CAAC,CAAC;GACpB,CAAC,CAAC;AACL,CAAC;AAGM,eAAe,yBAAyB,CAAC,OAAoB;EAClE,IAAI,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;EAClD,IAAI,iBAAiB,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC;EAC7D,IAAI,QAAQ,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC;EACpD,IAAI,OAAO,CAAC;EACZ,IAAI;IACF,OAAO,GAAG,MAAM,8BAA8B,CAAC,aAAa,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;GAC5F;EAAC,OAAO,CAAC,EAAE;IACV,OAAO,CAAC,IAAI,CAAC,iBAAiB,aAAa,KAAK,iBAAiB,8BAA8B,CAAC,CAAC;IACjG,OAAO,GAAG,MAAM,8BAA8B,CAAC,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;GAC/E;EACD,OAAO,OAAO,CAAC;AACjB;;;;","names":[],"sources":["./src/utils/locale.ts"],"sourcesContent":["function getComponentClosestLanguage(element: HTMLElement): string {\n  let closestElement = element.closest('[lang]') as HTMLElement;\n  console.log(closestElement)\n  return closestElement ? closestElement.lang : 'en';\n}\n\nfunction getComponentClosestBasePath(element: HTMLElement): string {\n  let closestElement = element.closest('[basePath]') as HTMLElement;\n  console.log(closestElement.attributes['basePath'].value)\n  return closestElement ? closestElement.attributes['basePath'].value : '';\n}\n\n\nfunction fetchLocaleStringsForComponent(componentName: string, locale: string, basePath: string): Promise<any> {\n  return new Promise((resolve, reject): void => {\n    fetch(`${basePath}${componentName}.i18n.${locale}.json`)\n    .then((result) => {\n      if (result.ok) resolve(result.json());\n      else reject();\n    }, () => reject());\n  });\n}\n\n\nexport async function getLocaleComponentStrings(element: HTMLElement): Promise<any> {\n  let componentName = element.tagName.toLowerCase();\n  let componentLanguage = getComponentClosestLanguage(element);\n  let basePath = getComponentClosestBasePath(element);\n  let strings;\n  try {\n    strings = await fetchLocaleStringsForComponent(componentName, componentLanguage, basePath);\n  } catch (e) {\n    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);\n    strings = await fetchLocaleStringsForComponent(componentName, 'en', basePath);\n  }\n  return strings;\n}\n"],"version":3}