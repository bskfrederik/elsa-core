{"file":"elsa-workflow-context-provider-check-list.entry.js","mappings":";;;;;MAWa,iBAAiB;;;;IA2BpB,+BAA0B,GAAG,CAAC,CAAsC;MAC1E,MAAM,qBAAqB,GAAG,CAAC,CAAC,MAAuB,CAAC;MACxD,IAAI,CAAC,UAAU,GAAG,EAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,qCAAS,CAAC,KAAE,QAAQ,EAAE,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAE,CAAC,EAAC,CAAC;MACvH,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,+BAA+B,CAAC,GAAG,qBAAqB,CAAC;MAClG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KAC9D,CAAC;uBA/B8D,EAAE;;sBAGhC,EAAC,KAAK,EAAE,EAAE,EAAC;iCACC,EAAE;;EAEzC,MAAM,iBAAiB;;IAC5B,MAAM,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;IACnD,MAAM,qBAAqB,GAAgB,MAAA,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,gBAAgB,CAAC,+BAA+B,CAAC,mCAAI,EAAE,CAAC;IACvH,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,EAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,EAAC,CAAC,CAAC,CAAC;IAEnF,IAAI,CAAC,UAAU,GAAG;MAChB,KAAK,EAAE,eAAe;KACvB,CAAC;IAEF,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;GACpD;EAED,MAAM;IACJ,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IAEnC,OAAO,EAAC,SAAS,IAAC,KAAK,EAAC,kBAAkB,EAAC,OAAO,EAAC,kBAAkB,EAAC,IAAI,EAAC,qDAAqD,IAC9H,uBAAiB,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC,qBAAqB,EAAE,uBAAuB,EAAE,IAAI,CAAC,0BAA0B,GAAoB,CACvJ,CAAA;GACb;;;;;","names":[],"sources":["./src/modules/workflow-contexts/components/provider-check-list.tsx"],"sourcesContent":["import {Component, EventEmitter, h, Prop, State, Event} from '@stencil/core';\r\nimport {FormEntry} from \"../../../components/shared/forms/form-entry\";\r\nimport {SelectList, Type} from \"../../../models\";\r\nimport {WorkflowContextProviderDescriptor} from \"../services/api\";\r\nimport {WorkflowDefinition} from \"../../workflow-definitions/models/entities\";\r\nimport {WorkflowContextProviderTypesKey} from \"../constants\";\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-context-provider-check-list',\r\n  shadow: false\r\n})\r\nexport class ProviderCheckList {\r\n  @Prop() descriptors: Array<WorkflowContextProviderDescriptor> = [];\r\n  @Prop() workflowDefinition: WorkflowDefinition;\r\n  @Event() workflowDefinitionChanged: EventEmitter<WorkflowDefinition>;\r\n  @State() selectList: SelectList = {items: []};\r\n  @State() selectedProviderTypes: Array<Type> = [];\r\n\r\n  public async componentWillLoad() {\r\n    const workflowDefinition = this.workflowDefinition;\r\n    const selectedProviderTypes: Array<Type> = workflowDefinition?.customProperties[WorkflowContextProviderTypesKey] ?? [];\r\n    const selectListItems = this.descriptors.map(x => ({text: x.name, value: x.type}));\r\n\r\n    this.selectList = {\r\n      items: selectListItems\r\n    };\r\n\r\n    this.selectedProviderTypes = selectedProviderTypes;\r\n  }\r\n\r\n  render() {\r\n    const selectList = this.selectList;\r\n\r\n    return <FormEntry label=\"Active providers\" fieldId=\"EnabledProviders\" hint=\"Select the providers to activate for this workflow.\">\r\n      <elsa-check-list selectList={selectList} selectedValues={this.selectedProviderTypes} onSelectedValuesChanged={this.onSelectedProvidersChanged}></elsa-check-list>\r\n    </FormEntry>\r\n  }\r\n\r\n  private onSelectedProvidersChanged = (e: CustomEvent<Array<string> | number>) => {\r\n    const selectedProviderTypes = e.detail as Array<string>;\r\n    this.selectList = {items: this.selectList.items.map(x => ({...x, selected: selectedProviderTypes.includes(x.value)}))};\r\n    this.workflowDefinition.customProperties[WorkflowContextProviderTypesKey] = selectedProviderTypes;\r\n    this.workflowDefinitionChanged.emit(this.workflowDefinition);\r\n  };\r\n}\r\n"],"version":3}