{"file":"elsa-workflow-instance-viewer.entry.js","mappings":"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","names":[],"sources":["./src/modules/workflow-instances/services/journal-api.ts","./src/modules/workflow-instances/components/viewer.scss?tag=elsa-workflow-instance-viewer","./src/modules/workflow-instances/components/viewer.tsx"],"sourcesContent":["import {OrderBy, OrderDirection, PagedList, WorkflowExecutionLogRecord } from \"../../../models\";\r\nimport {serializeQueryString} from \"../../../utils\";\r\nimport {Service} from \"typedi\";\r\nimport {ElsaClientProvider} from \"../../../services\";\r\n\r\n@Service()\r\nexport class JournalApi {\r\n\r\n  private provider: ElsaClientProvider;\r\n\r\n  constructor(provider: ElsaClientProvider) {\r\n    this.provider = provider;\r\n  }\r\n\r\n  async list(request: GetWorkflowJournalRequest): Promise<PagedList<WorkflowExecutionLogRecord>> {\r\n    let queryString = {\r\n      page: request.page,\r\n      pageSize: request.pageSize\r\n    };\r\n\r\n    const queryStringText = serializeQueryString(queryString);\r\n    const httpClient = await this.getHttpClient();\r\n    const response = await httpClient.get<PagedList<WorkflowExecutionLogRecord>>(`workflow-instances/${request.workflowInstanceId}/journal${queryStringText}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getLastEntry(request: GetLastEntryRequest): Promise<WorkflowExecutionLogRecord> {\r\n\r\n    const httpClient = await this.getHttpClient();\r\n    const response = await httpClient.get<WorkflowExecutionLogRecord>(`workflow-instances/${request.workflowInstanceId}/journal/${request.activityId}`);\r\n    return response.data;\r\n  }\r\n\r\n  private getHttpClient = async () => await this.provider.getHttpClient();\r\n}\r\n\r\nexport interface GetWorkflowJournalRequest {\r\n  workflowInstanceId: string;\r\n  page?: number;\r\n  pageSize?: number;\r\n}\r\n\r\nexport interface GetLastEntryRequest {\r\n  workflowInstanceId: string;\r\n  activityId: string;\r\n}\r\n",":root {\r\n  --workflow-editor-width: 580px;\r\n  --activity-picker-width: 300px;\r\n  --activity-editor-height: 200px;\r\n}\r\n\r\n.x6-graph-scroller {\r\n  height: calc(100vh - var(--activity-editor-height) - 64px) !important;\r\n}\r\n\r\nelsa-flowchart {\r\n  position: absolute;\r\n  left: var(--activity-picker-width);\r\n  top: 0;\r\n  right: var(--workflow-editor-width);\r\n  bottom: var(--activity-editor-height);\r\n}\r\n\r\n.elsa-panel-toolbar {\r\n  left: var(--activity-picker-width);\r\n  right: var(--workflow-editor-width);\r\n}\r\n\r\nelsa-panel.panel-state-expanded.elsa-activity-picker-container {\r\n  width: var(--activity-picker-width);\r\n}\r\n\r\nelsa-panel.panel-state-expanded.elsa-workflow-editor-container {\r\n  width: var(--workflow-editor-width);\r\n  right: 0;\r\n  left: unset;\r\n}\r\n\r\nelsa-panel.panel-state-expanded.elsa-activity-editor-container {\r\n  height: var(--activity-editor-height);\r\n  right: var(--workflow-editor-width);\r\n  left: var(--activity-picker-width);\r\n  bottom: 0;\r\n}\r\n\r\n.activity-picker-closed {\r\n\r\n  .activity-list {\r\n    display: none;\r\n  }\r\n\r\n  elsa-flowchart {\r\n    left: 0;\r\n  }\r\n}\r\n\r\n.object-editor-closed {\r\n\r\n  .object-editor-container {\r\n    display: none;\r\n  }\r\n\r\n  elsa-flowchart {\r\n    right: 0;\r\n  }\r\n}\r\n\r\n\r\n.activity-editor-closed {\r\n\r\n  .activity-editor-container {\r\n    display: none;\r\n  }\r\n\r\n  elsa-flowchart {\r\n    bottom: 0;\r\n  }\r\n}\r\n","import {Component, h, Listen, Prop, State, Method, Watch, Element} from '@stencil/core';\r\nimport {Container} from \"typedi\";\r\nimport {PanelPosition, PanelStateChangedArgs} from '../../../components/panel/models';\r\nimport {\r\n  Activity,\r\n  ActivitySelectedArgs,\r\n  ContainerSelectedArgs,\r\n  WorkflowInstance,\r\n  WorkflowExecutionLogRecord,\r\n  Workflow\r\n} from '../../../models';\r\nimport {ActivityDriverRegistry, EventBus, ActivityNode} from '../../../services';\r\nimport {MonacoEditorSettings} from \"../../../services\";\r\nimport {WorkflowDefinition} from \"../../workflow-definitions/models/entities\";\r\nimport {WorkflowEditorEventTypes} from \"../../workflow-definitions/models/ui\";\r\nimport {JournalItemSelectedArgs} from '../events';\r\nimport {JournalApi} from \"../services/journal-api\";\r\nimport {Flowchart} from '../../flowchart/models';\r\nimport {WorkflowJournalModel} from \"../models\";\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-instance-viewer',\r\n  styleUrl: 'viewer.scss',\r\n})\r\nexport class WorkflowInstanceViewer {\r\n  private readonly eventBus: EventBus;\r\n  private readonly journalApi: JournalApi;\r\n  private flowchartElement: HTMLElsaFlowchartElement;\r\n  private container: HTMLDivElement;\r\n  private isJournalSelecting: boolean = false;\r\n\r\n  constructor() {\r\n    this.eventBus = Container.get(EventBus);\r\n    this.journalApi = Container.get(JournalApi);\r\n  }\r\n\r\n  @Element() private el: HTMLElsaWorkflowDefinitionEditorElement;\r\n  @Prop({attribute: 'monaco-lib-path'}) public monacoLibPath: string;\r\n  @Prop() workflowDefinition: WorkflowDefinition;\r\n  @Prop() workflowInstance: WorkflowInstance;\r\n  @State() private mainWorkflowDefinitionState: WorkflowDefinition;\r\n  @State() private targetWorkflowDefinitionState: WorkflowDefinition;\r\n  @State() private workflowInstanceState: WorkflowInstance;\r\n  @State() private selectedActivity?: Activity;\r\n  @State() private selectedExecutionLogRecord?: WorkflowExecutionLogRecord;\r\n  @State() private flowchartRootActivity: Activity;\r\n\r\n  @Watch('monacoLibPath')\r\n  private handleMonacoLibPath(value: string) {\r\n    const settings = Container.get(MonacoEditorSettings);\r\n    settings.monacoLibPath = value;\r\n  }\r\n\r\n  @Watch('workflowDefinition')\r\n  async onWorkflowDefinitionChanged(value: WorkflowDefinition) {\r\n    await this.importWorkflow(value, this.workflowInstanceState);\r\n\r\n  }\r\n\r\n  @Watch('workflowInstance')\r\n  async onWorkflowInstanceChanged(value: WorkflowDefinition) {\r\n    await this.importWorkflow(this.mainWorkflowDefinitionState, this.workflowInstance);\r\n  }\r\n\r\n  @Listen('resize', {target: 'window'})\r\n  private async handleResize() {\r\n    await this.updateLayout();\r\n  }\r\n\r\n  @Listen('collapsed')\r\n  private async handlePanelCollapsed() {\r\n    this.selectedActivity = null;\r\n  }\r\n\r\n  @Listen('containerSelected')\r\n  private async handleContainerSelected(e: CustomEvent<ContainerSelectedArgs>) {\r\n    //this.selectedActivity = this.getCurrentContainer();\r\n  }\r\n\r\n  @Listen('activitySelected')\r\n  private async handleActivitySelected(e: CustomEvent<ActivitySelectedArgs>) {\r\n    if (this.isJournalSelecting)\r\n      return;\r\n\r\n    this.selectedActivity = e.detail.activity;\r\n    const workflowInstanceId = this.workflowInstance.id;\r\n    const activityId = this.selectedActivity.id;\r\n    this.selectedExecutionLogRecord = await this.journalApi.getLastEntry({workflowInstanceId, activityId});\r\n  }\r\n\r\n  @Listen('journalItemSelected')\r\n  private async handleJournalItemSelected(e: CustomEvent<JournalItemSelectedArgs>) {\r\n    const activityId = e.detail.activity.id;\r\n    const activityNode = e.detail.activityNode;\r\n    const graph = await this.flowchartElement.getGraph();\r\n    const graphNode = graph.getNodes().find(n => n.id == activityId)\r\n\r\n    const executionEventBlock = e.detail.executionEventBlock;\r\n    this.selectedExecutionLogRecord = executionEventBlock.faulted ? executionEventBlock.faultedRecord : executionEventBlock.completed ? executionEventBlock.completedRecord : executionEventBlock.startedRecord;\r\n\r\n    this.isJournalSelecting = true;\r\n    if (graphNode == null) {\r\n      await this.importSelectedItemsWorkflow(activityNode);\r\n      this.selectedActivity = e.detail.activity;\r\n      graph.resetSelection();\r\n    } else {\r\n      this.selectedActivity = graphNode.data;\r\n      graph.resetSelection(graphNode);\r\n    }\r\n    this.isJournalSelecting = false;\r\n  }\r\n\r\n  private async importSelectedItemsWorkflow(activityNode: ActivityNode) {\r\n    const consumingWorkflowNode = this.findConsumingWorkflowRecursive(activityNode);\r\n    this.flowchartRootActivity = await this.getFlowchartByActivityNode(consumingWorkflowNode);\r\n    window.requestAnimationFrame(async () => {\r\n      await this.flowchartElement.updateGraph();\r\n    });\r\n  }\r\n\r\n  private findConsumingWorkflowRecursive(activityNode: ActivityNode): ActivityNode {\r\n    const parent = activityNode.parents[0];\r\n    if (parent == null) {\r\n      return activityNode;\r\n    } else {\r\n      const type = parent.activity.type;\r\n      if (type == \"Elsa.Workflow\" || type == \"Elsa.Flowchart\") {\r\n        return this.findConsumingWorkflowRecursive(parent);\r\n      } else {\r\n        return parent;\r\n      }\r\n    }\r\n  }\r\n\r\n  private async getFlowchartByActivityNode(consumingWorkflowNode: ActivityNode): Promise<Flowchart> {\r\n    const isConsumingWorkflowSameAsMain = consumingWorkflowNode.parents[0] == null;\r\n    return isConsumingWorkflowSameAsMain ? this.workflowDefinition.root as Flowchart : this.findFlowchartOfActivityRecursive(consumingWorkflowNode.activity);\r\n  }\r\n\r\n  private findFlowchartOfActivityRecursive(activity: Activity): Flowchart {\r\n    if (activity.type == \"Elsa.Flowchart\") {\r\n      return activity as Flowchart;\r\n    }\r\n    else if(activity.root == null && activity.body.type == \"Elsa.Flowchart\"){\r\n      return activity.body as Flowchart;\r\n    }\r\n    else {\r\n      return this.findFlowchartOfActivityRecursive((activity as Workflow).root);\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  public async getCanvas(): Promise<HTMLElsaFlowchartElement> {\r\n    return this.flowchartElement;\r\n  }\r\n\r\n  @Method()\r\n  public async registerActivityDrivers(register: (registry: ActivityDriverRegistry) => void): Promise<void> {\r\n    const registry = Container.get(ActivityDriverRegistry);\r\n    register(registry);\r\n  }\r\n\r\n  @Method()\r\n  public getWorkflow(): Promise<WorkflowDefinition> {\r\n    return this.getWorkflowInternal();\r\n  }\r\n\r\n  @Method()\r\n  public async importWorkflow(workflowDefinition: WorkflowDefinition, workflowInstance: WorkflowInstance): Promise<void> {\r\n    this.workflowInstanceState = workflowInstance;\r\n    await this.updateWorkflowDefinition(workflowDefinition);\r\n    // Update the flowchart after state is updated.\r\n    window.requestAnimationFrame(async () => {\r\n      await this.flowchartElement.updateGraph();\r\n    });\r\n\r\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowDefinition.Imported, this, {workflowDefinition});\r\n  }\r\n\r\n  // Updates the workflow definition without importing it into the designer.\r\n  @Method()\r\n  public async updateWorkflowDefinition(workflowDefinition: WorkflowDefinition): Promise<void> {\r\n    this.mainWorkflowDefinitionState = workflowDefinition;\r\n  }\r\n\r\n  public async componentWillLoad() {\r\n    this.workflowInstanceState = this.workflowInstance;\r\n    await this.updateWorkflowDefinition(this.workflowDefinition);\r\n  }\r\n\r\n  public async componentDidLoad() {\r\n    if (!!this.mainWorkflowDefinitionState && !!this.workflowInstanceState)\r\n      await this.importWorkflow(this.workflowDefinition, this.workflowInstance);\r\n\r\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowEditor.Ready, this, {workflowEditor: this});\r\n  }\r\n\r\n  private renderSelectedObject = () => {\r\n    const activity = this.selectedActivity;\r\n    if (!!activity) {\r\n      const selectedRecord = this.selectedExecutionLogRecord;\r\n      return <elsa-activity-properties activity={activity} activityExecutionLog={selectedRecord}/>;\r\n    }\r\n  }\r\n\r\n  private getWorkflowInternal = async (): Promise<WorkflowDefinition> => {\r\n    const root = await this.flowchartElement.export();\r\n    const workflowDefinition = this.mainWorkflowDefinitionState;\r\n    workflowDefinition.root = root;\r\n    return workflowDefinition;\r\n  };\r\n\r\n  private updateLayout = async () => {\r\n    await this.flowchartElement.updateLayout();\r\n  };\r\n\r\n  private updateContainerLayout = async (panelClassName: string, panelExpanded: boolean) => {\r\n\r\n    if (panelExpanded)\r\n      this.container.classList.remove(panelClassName);\r\n    else\r\n      this.container.classList.toggle(panelClassName, true);\r\n\r\n    await this.updateLayout();\r\n  }\r\n\r\n  private onActivityPickerPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('activity-picker-closed', e.expanded)\r\n  private onActivityEditorPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('object-editor-closed', e.expanded)\r\n\r\n  public render() {\r\n    const workflowDefinition = this.mainWorkflowDefinitionState;\r\n    const workflowInstance = this.workflowInstanceState;\r\n    const workflowJournalModel: WorkflowJournalModel = {\r\n      workflowInstance,\r\n      workflowDefinition\r\n    }\r\n\r\n    this.flowchartRootActivity = this.flowchartRootActivity ?? this.mainWorkflowDefinitionState.root;\r\n\r\n    return (\r\n\r\n      <div class=\"tw-absolute tw-inset-0\" ref={el => this.container = el}>\r\n        <elsa-panel\r\n          class=\"elsa-activity-picker-container tw-z-30\"\r\n          position={PanelPosition.Left}\r\n          onExpandedStateChanged={e => this.onActivityPickerPanelStateChanged(e.detail)}>\r\n          <elsa-workflow-journal model={workflowJournalModel}/>\r\n        </elsa-panel>\r\n        <elsa-flowchart\r\n          ref={el => this.flowchartElement = el}\r\n          rootActivity={this.flowchartRootActivity}\r\n          interactiveMode={false}/>\r\n        <elsa-panel\r\n          class=\"elsa-workflow-editor-container tw-z-30\"\r\n          position={PanelPosition.Right}\r\n          onExpandedStateChanged={e => this.onActivityEditorPanelStateChanged(e.detail)}>\r\n          <div class=\"object-editor-container\">\r\n            <elsa-workflow-instance-properties workflowDefinition={workflowDefinition} workflowInstance={this.workflowInstanceState}/>\r\n          </div>\r\n        </elsa-panel>\r\n        <elsa-panel\r\n          class=\"elsa-activity-editor-container\"\r\n          position={PanelPosition.Bottom}\r\n        >\r\n          <div class=\"activity-editor-container\">\r\n            {this.renderSelectedObject()}\r\n          </div>\r\n        </elsa-panel>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}