{"file":"elsa-activity-properties-editor.elsa-workflow-definition-editor-toolbar.elsa-workflow-definition-editor-toolbox.elsa-workflow-definition-properties-editor.entry.js","mappings":"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","names":["descriptorsStore","camelCase","uuid"],"sources":["./src/modules/workflow-definitions/components/activity-properties/activity-properties-editor.tsx","./src/modules/workflow-definitions/components/toolbar.tsx","./src/modules/workflow-definitions/components/toolbox.tsx","./src/modules/workflow-definitions/components/workflow-properties/properties.tsx"],"sourcesContent":["import {Component, Element, Event, EventEmitter, h, Method, Prop, State} from '@stencil/core';\nimport {camelCase} from 'lodash';\nimport {v4 as uuid} from 'uuid';\nimport {Activity, ActivityDescriptor, ActivityInput, ActivityKind, ActivityOutput, Expression, InputDescriptor, OutputDescriptor, PropertyDescriptor, TabChangedArgs, TabDefinition, Variable} from '../../../../models';\nimport {EventBus, InputDriverRegistry} from \"../../../../services\";\nimport {Container} from \"typedi\";\nimport {ActivityInputContext} from \"../../../../services/activity-input-driver\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {ActivityPropertyPanelEvents, ActivityUpdatedArgs, DeleteActivityRequestedArgs} from \"../../models/ui\";\nimport InputControlSwitchContextState from \"../../../../components/shared/input-control-switch/state\";\nimport {OutputDefinition} from \"../../models/entities\";\nimport {RenderActivityInputContext, RenderActivityPropsContext} from \"../models\";\nimport { getLocaleComponentStrings } from '../../../../utils/locale';\n\n@Component({\n  tag: 'elsa-activity-properties-editor',\n})\nexport class ActivityPropertiesEditor {\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private renderContext: RenderActivityPropsContext;\n  private readonly inputDriverRegistry: InputDriverRegistry;\n  private readonly eventBus: EventBus;\n\n  constructor() {\n    this.inputDriverRegistry = Container.get(InputDriverRegistry);\n    this.eventBus = Container.get(EventBus);\n  }\n\n  @Prop() workflowDefinitionId: string;\n  @Prop() activity?: Activity;\n  @Prop() variables: Array<Variable> = [];\n  @Prop() outputs: Array<OutputDefinition> = [];\n  @Prop() isReadonly: boolean;\n  @Event() activityUpdated: EventEmitter<ActivityUpdatedArgs>;\n  @Event() deleteActivityRequested: EventEmitter<DeleteActivityRequestedArgs>;\n  @State() private selectedTabIndex: number = 0;\n\n  @Method()\n  async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillRender() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    const activity = this.activity;\n    const activityDescriptor = this.findActivityDescriptor();\n    const title = activityDescriptor?.displayName ?? activityDescriptor?.typeName ?? 'Unknown Activity';\n    const inputs = this.createInputs();\n    const tabs = this.createTabs();\n\n    const onActivityChanged = () => this.activityUpdated.emit({\n      activity,\n      activityDescriptor\n    });\n\n    this.renderContext = {\n      activity,\n      activityDescriptor,\n      title,\n      inputs,\n      tabs,\n      notifyActivityChanged: () => onActivityChanged()\n    }\n\n    await this.eventBus.emit(ActivityPropertyPanelEvents.Displaying, this, this.renderContext);\n  }\n\n  render() {\n    const {activity, activityDescriptor, tabs} = this.renderContext;\n    const actions = [];\n    const mainTitle = activity.id;\n    const subTitle = activityDescriptor.displayName;\n    const selectedTabIndex = this.getSelectedTabIndex(tabs);\n\n    return (\n      <elsa-form-panel\n        isReadonly={this.isReadonly}\n        mainTitle={mainTitle}\n        subTitle={subTitle}\n        orientation=\"Landscape\"\n        tabs={tabs}\n        selectedTabIndex={selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}\n        actions={actions}/>\n    );\n  }\n\n  private getSelectedTabIndex = (tabs: Array<TabDefinition>): number => {\n    let selectedTabIndex = this.selectedTabIndex;\n\n    if (selectedTabIndex >= tabs.length)\n      selectedTabIndex = tabs.length - 1;\n\n    if (selectedTabIndex < 0)\n      selectedTabIndex = 0;\n\n    return selectedTabIndex;\n  };\n\n  private createTabs = (): Array<TabDefinition> => {\n    const activityDescriptor = this.findActivityDescriptor();\n    const isTask = activityDescriptor.kind == ActivityKind.Task;\n\n    const commonTab: TabDefinition = {\n      displayText: this.strings.generalTab,\n      order: 0,\n      content: () => this.renderCommonTab()\n    };\n\n    const inputTab: TabDefinition = {\n      displayText: this.strings.settingsTab,\n      order: 10,\n      content: () => this.renderInputTab()\n    };\n\n    const tabs = !!activityDescriptor ? [inputTab, commonTab] : [];\n\n    if (activityDescriptor.outputs.length > 0) {\n      const outputTab: TabDefinition = {\n        displayText: this.strings.outputTab,\n        order: 11,\n        content: () => this.renderOutputTab()\n      };\n\n      tabs.push(outputTab);\n    }\n\n    if (isTask) {\n      const taskTab: TabDefinition = {\n        displayText: this.strings.taskTab,\n        order: 12,\n        content: () => this.renderTaskTab()\n      };\n\n      tabs.push(taskTab);\n    }\n\n    return tabs;\n  };\n\n  private createInputs = (): Array<RenderActivityInputContext> => {\n    const activity = this.activity;\n    const activityId = activity.id;\n    const activityDescriptor = this.findActivityDescriptor();\n    const driverRegistry = this.inputDriverRegistry;\n\n    const onInputChanged = (inputDescriptor: InputDescriptor) => this.activityUpdated.emit({\n      newId: activityId,\n      originalId: activityId,\n      activity,\n      activityDescriptor\n    });\n\n    const filteredInputs = activityDescriptor.inputs.filter(x => x.isBrowsable);\n\n    return filteredInputs.map(inputDescriptor => {\n      const renderInputContext: ActivityInputContext = {\n        activity: activity,\n        activityDescriptor: activityDescriptor,\n        inputDescriptor,\n        notifyInputChanged: () => onInputChanged(inputDescriptor),\n        inputChanged: (v, s) => this.onInputPropertyEditorChanged(inputDescriptor, v, s)\n      };\n\n      const driver = driverRegistry.get(renderInputContext);\n      const workflowDefinitionId = this.workflowDefinitionId;\n      const activityType = activityDescriptor.typeName;\n      const propertyName = inputDescriptor.name;\n\n      const control =\n        <InputControlSwitchContextState.Provider state={{workflowDefinitionId, activityType, propertyName}}>\n          {driver?.renderInput(renderInputContext)}\n        </InputControlSwitchContextState.Provider>;\n\n      return {\n        inputContext: renderInputContext,\n        inputControl: control,\n      }\n    });\n  };\n\n  private findActivityDescriptor = (): ActivityDescriptor => !!this.activity ? descriptorsStore.activityDescriptors.find(x => x.typeName == this.activity.type && x.version == this.activity.version) : null;\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex\n\n  private onActivityIdChanged = (e: any) => {\n    const activity = this.activity;\n    const originalId = activity.id;\n    const inputElement = e.target as HTMLInputElement;\n    const newId = inputElement.value;\n    const activityDescriptor = this.findActivityDescriptor();\n\n    activity.id = newId;\n\n    this.activityUpdated.emit({\n      newId: newId,\n      originalId: originalId,\n      activity,\n      activityDescriptor\n    });\n  }\n\n  private onActivityDisplayTextChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.metadata = {\n      ...activity.metadata,\n      displayText: inputElement.value\n    };\n\n    this.updateActivity();\n  }\n\n  private onCanStartWorkflowChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.customProperties.canStartWorkflow = inputElement.checked;\n\n    this.updateActivity();\n  }\n\n  private onRunAsynchronouslyChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.customProperties.RunAsynchronously = inputElement.checked;\n\n    this.updateActivity();\n  }\n\n  private onInputPropertyEditorChanged = (inputDescriptor: InputDescriptor, propertyValue: any, syntax: string) => {\n    const activity = this.activity;\n    const propertyName = inputDescriptor.name;\n    const isWrapped = inputDescriptor.isWrapped;\n    const camelCasePropertyName = camelCase(propertyName);\n\n    console.log(propertyName, propertyValue, syntax)\n\n    if (isWrapped) {\n      let input: ActivityInput = activity[camelCasePropertyName];\n\n      const expression: Expression = {\n        type: syntax,\n        value: propertyValue // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\n      };\n\n      if (!input) {\n        input = {\n          typeName: inputDescriptor.typeName,\n          memoryReference: {id: uuid()},\n          expression: expression\n        }\n      }\n\n      input.expression = expression;\n      activity[camelCasePropertyName] = input;\n\n    } else {\n      activity[camelCasePropertyName] = propertyValue;\n    }\n    this.updateActivity(propertyName);\n  }\n\n  private onOutputPropertyEditorChanged = (outputDescriptor: OutputDescriptor, outputTargetValue: string) => {\n    const activity = this.activity;\n    const propertyName = outputDescriptor.name;\n    const camelCasePropertyName = camelCase(propertyName);\n    const outputTargetValuePair = outputTargetValue.split('::');\n    const outputTargetId = outputTargetValuePair[1];\n\n    const property: ActivityOutput = {\n      typeName: outputDescriptor.typeName,\n      memoryReference: {\n        id: outputTargetId\n      }\n    }\n\n    activity[camelCasePropertyName] = property;\n\n    this.updateActivity(propertyName);\n  }\n\n  private updateActivity = (propertyName?: string, propertyDescriptor?: PropertyDescriptor) => {\n    const activityDescriptor = this.findActivityDescriptor();\n    const activity = this.activity;\n    const activityId = activity.id;\n\n    console.log(`Activity ${activityId} updated.`);\n\n    this.activityUpdated.emit({\n      newId: activityId,\n      originalId: activityId,\n      activity,\n      activityDescriptor\n    });\n  }\n\n  private renderCommonTab = () => {\n    const {activity} = this.renderContext;\n    const activityId = activity.id;\n    const displayText: string = activity.metadata?.displayText ?? '';\n    const canStartWorkflow: boolean = activity.customProperties?.canStartWorkflow ?? activity?.customProperties?.CanStartWorkflow ?? activity.canStartWorkflow ?? false;\n    const key = `${activityId}`;\n\n    return <div key={key}>\n      <FormEntry fieldId=\"ActivityId\" label={this.strings.activityId} hint={this.strings.activityHint}>\n        <input type=\"text\" name=\"ActivityId\" id=\"ActivityId\" value={activityId} onChange={e => this.onActivityIdChanged(e)}/>\n      </FormEntry>\n\n      <FormEntry fieldId=\"ActivityDisplayText\" label={this.strings.activityDisplayText} hint={this.strings.activityDisplayHint}>\n        <input type=\"text\" name=\"ActivityDisplayText\" id=\"ActivityDisplayText\" value={displayText} onChange={e => this.onActivityDisplayTextChanged(e)}/>\n      </FormEntry>\n\n      <CheckboxFormEntry fieldId=\"CanStartWorkflow\" label={this.strings.activityCanStartWorkflow} hint={this.strings.activityCanStartWorkflowHint}>\n        <input type=\"checkbox\" name=\"CanStartWorkflow\" id=\"CanStartWorkflow\" value={\"true\"} checked={canStartWorkflow} onChange={e => this.onCanStartWorkflowChanged(e)}/>\n      </CheckboxFormEntry>\n\n    </div>\n  };\n\n  private renderInputTab = () => {\n    console.log('renderInputTab');\n    const {activity, inputs} = this.renderContext;\n    const activityId = activity.id;\n    const key = `${activityId}`;\n\n    return <div key={key}>\n      {inputs.filter(x => !!x.inputControl).map(propertyContext => {\n        const key = `${activity.id}-${propertyContext.inputContext.inputDescriptor.name}`;\n        console.log(key)\n        return <div key={key}>\n          {propertyContext.inputControl}\n        </div>;\n      })}\n    </div>\n  };\n\n  private renderOutputTab = () => {\n    const {activity, activityDescriptor} = this.renderContext;\n    const outputs = activityDescriptor.outputs;\n    const outputDefinitions = this.outputs || [];\n    const variables = this.variables || [];\n    const activityId = activity.id;\n    const key = `${activityId}`;\n    const outputTargetOptions: Array<any> = [null];\n\n    if (variables.length > 0) {\n      outputTargetOptions.push({label: 'Variables', items: [...variables.map(x => ({value: x.id, name: x.name}))], kind: 'variable'});\n    }\n\n    // Disable this for now until we rework the input output handling at the engine level.\n    // if (outputDefinitions.length > 0)\n    //   outputTargetOptions.push({label: 'Outputs', items: [...outputDefinitions.map(x => ({value: x.name, name: x.name}))], kind: 'output'});\n\n    return <div key={key}>\n      {outputs.map(propertyDescriptor => {\n        const key = `${activity.id}-${propertyDescriptor.name}`;\n        const displayName = isNullOrWhitespace(propertyDescriptor.displayName) ? propertyDescriptor.name : propertyDescriptor.displayName;\n        const propertyName = camelCase(propertyDescriptor.name);\n        const propertyValue = activity[propertyName] as ActivityOutput;\n        const propertyType = propertyDescriptor.typeName;\n        const typeDescriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == propertyType);\n        const propertyTypeName = typeDescriptor?.displayName ?? propertyType;\n\n        return <div key={key}>\n          <FormEntry fieldId={key} label={displayName} hint={propertyDescriptor.description}>\n\n            <div class=\"tw-relative\">\n              <select onChange={e => this.onOutputPropertyEditorChanged(propertyDescriptor, (e.currentTarget as HTMLSelectElement).value)}>\n                {outputTargetOptions.map(outputTarget => {\n                  if (!outputTarget) {\n                    return <option value=\"\" selected={!propertyValue?.memoryReference?.id}>-</option>\n                  }\n\n                  const items = outputTarget.items;\n\n                  return (\n                    <optgroup label={outputTarget.label}>\n                      {items.map(item => {\n                        const isSelected = propertyValue?.memoryReference?.id == item.value;\n                        return <option value={`${outputTarget.kind}::${item.value}`} selected={isSelected}>{item.name}</option>;\n                      })}\n                    </optgroup>);\n                })}\n              </select>\n              <div class=\"tw-pointer-events-none tw-absolute tw-inset-y-0 tw-right-0 tw-flex tw-items-center pr-10\">\n                <span class=\"tw-text-gray-500 sm:tw-text-sm\">{propertyTypeName}</span>\n              </div>\n            </div>\n          </FormEntry>\n        </div>;\n      })}\n    </div>\n  };\n\n  private renderTaskTab = () => {\n    const {activity} = this.renderContext;\n    const activityId = activity.id;\n    const runAsynchronously: boolean = activity.customProperties?.RunAsynchronously ?? activity.runAsynchronously ?? false;\n    const key = `${activityId}:task`;\n\n    return <div key={key}>\n      <CheckboxFormEntry fieldId=\"RunAsynchronously\" label={this.strings.taskExecuteAsynchronously} hint={this.strings.taskExecuteAsynchronouslyHint}>\n        <input type=\"checkbox\" name=\"RunAsynchronously\" id=\"RunAsynchronously\" value={\"true\"} checked={runAsynchronously} onChange={e => this.onRunAsynchronouslyChanged(e)}/>\n      </CheckboxFormEntry>\n    </div>\n  };\n}\n","import {Component, h, Prop, Event, EventEmitter} from '@stencil/core';\nimport {DropdownButtonItem} from \"../../../components/shared/dropdown-button/models\";\nimport {LayoutDirection} from \"../../flowchart/models\";\nimport {PlayButtonIcon} from \"../../../components/icons/buttons/play\";\n\n@Component({\n  tag: 'elsa-workflow-definition-editor-toolbar',\n})\nexport class Toolbar {\n  @Prop()\n  public zoomToFit: () => Promise<void>;\n\n  @Event()\n  public autoLayout: EventEmitter<LayoutDirection>;\n\n  render() {\n\n    const layoutButtons: Array<DropdownButtonItem> = [{\n      text: 'Horizontally',\n      handler: () => this.autoLayout.emit('LR')\n    },{\n      text: 'Vertically',\n      handler: () => this.autoLayout.emit('TB')\n    }];\n\n    return (\n      <div class=\"elsa-panel-toolbar tw-flex tw-justify-center tw-absolute tw-border-b tw-border-gray-200 tw-top-0 tw-px-1 tw-pl-4 tw-pb-2 tw-text-sm tw-bg-white tw-z-10 tw-space-x-2\">\n        <elsa-dropdown-button text=\"Auto-layout\" theme=\"Primary\" items={layoutButtons} class=\"tw-mt-2\"/>\n        <button onClick={this.zoomToFit} class=\"elsa-btn elsa-btn-primary\">\n          Zoom to fit\n        </button>\n        {/*Coming soon...*/}\n        {/*<button class=\"elsa-btn elsa-btn-action disabled\" disabled={true}>*/}\n        {/*  <PlayButtonIcon/> Run*/}\n        {/*</button>*/}\n      </div>\n    );\n  }\n}\n","import {Component, h, Prop, State} from '@stencil/core';\r\nimport {Graph} from '@antv/x6';\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-definition-editor-toolbox',\r\n})\r\nexport class Toolbox {\r\n  @Prop() graph: Graph;\r\n  @Prop() isReadonly: boolean;\r\n  @State() selectedTabIndex: number = 0;\r\n\r\n  private onTabSelected = (e: Event, index: number) => {\r\n    e.preventDefault();\r\n    this.selectedTabIndex = index;\r\n  };\r\n\r\n  render() {\r\n\r\n    const selectedTabIndex = this.selectedTabIndex;\r\n    const selectedCss = 'tw-border-blue-500 tw-text-blue-600';\r\n    const defaultCss = 'tw-border-transparent tw-text-gray-500 hover:tw-text-gray-700 hover:tw-border-gray-300';\r\n    const activitiesTabCssClass = selectedTabIndex == 0 ? selectedCss : defaultCss;\r\n\r\n    return (\r\n\r\n      <div class=\"activity-list tw-absolute tw-inset-0 tw-overflow-hidden\">\r\n        <div class=\"tw-h-full tw-flex tw-flex-col\">\r\n          <div class=\"tw-border-b tw-border-gray-200\">\r\n            <nav class=\"-tw-mb-px tw-flex\" aria-label=\"Tabs\">\r\n              <a href=\"#\"\r\n                 onClick={e => this.onTabSelected(e, 0)}\r\n                 class={`${activitiesTabCssClass} tw-w-1/2 tw-py-4 tw-px-1 tw-text-center tw-border-b-2 tw-font-medium tw-text-sm`}>\r\n                Activities\r\n              </a>\r\n            </nav>\r\n          </div>\r\n\r\n          <div class=\"tw-flex-1 tw-relative\">\r\n            <div class=\"tw-absolute tw-inset-0 tw-overflow-y-scroll\">\r\n              <elsa-workflow-definition-editor-toolbox-activities\r\n                isReadonly={this.isReadonly}\r\n                graph={this.graph}\r\n                class={selectedTabIndex == 0 ? '' : 'hidden'}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../../services\";\nimport {InputDefinition, OutputDefinition, WorkflowDefinition, WorkflowOptions} from \"../../models/entities\";\nimport {PropertiesTabModel, TabModel, Widget, WorkflowDefinitionPropsUpdatedArgs, WorkflowPropertiesEditorDisplayingArgs, WorkflowPropertiesEditorEventTypes, WorkflowPropertiesEditorModel} from \"../../models/ui\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport {InfoList} from \"../../../../components/shared/forms/info-list\";\nimport {TabChangedArgs, Variable} from \"../../../../models\";\nimport {WorkflowDefinitionsApi} from \"../../services/api\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {WorkflowPropertiesEditorTabs} from \"../../models/props-editor-tabs\";\nimport { getLocaleComponentStrings } from '../../../../utils/locale';\n\n@Component({\n  tag: 'elsa-workflow-definition-properties-editor',\n})\nexport class WorkflowDefinitionPropertiesEditor {\n  private readonly eventBus: EventBus;\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\n\n    this.model = {\n      tabModels: [],\n    }\n  }\n\n  @Prop() workflowDefinition?: WorkflowDefinition;\n  @Prop() workflowVersions: Array<WorkflowDefinition>;\n  @Prop() readonly: boolean;\n  @Event() workflowPropsUpdated: EventEmitter<WorkflowDefinitionPropsUpdatedArgs>;\n  @Event() versionSelected: EventEmitter<WorkflowDefinition>;\n  @Event() deleteVersionClicked: EventEmitter<WorkflowDefinition>;\n  @Event() revertVersionClicked: EventEmitter<WorkflowDefinition>;\n  @State() private model: WorkflowPropertiesEditorModel;\n  @State() private selectedTabIndex: number = 0;\n  @Element() element: HTMLElement;\n  strings!: any;\n\n\n  @Method()\n  public async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  public async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Watch('workflowDefinition')\n  async onWorkflowDefinitionChanged() {\n    await this.createModel();\n  }\n\n  @Watch('workflowVersions')\n  async onWorkflowVersionsChanged() {\n    await this.createModel();\n  }\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    await this.createModel();\n  }\n\n  public render() {\n    const workflowDefinition = this.workflowDefinition;\n    const title = workflowDefinition?.name ?? 'Untitled';\n    const subTitle = 'Workflow Definition'\n    const tabs = this.model.tabModels.map(x => x.tab);\n\n    return (\n      <elsa-form-panel\n        isReadonly={this.readonly}\n        mainTitle={title}\n        subTitle={subTitle}\n        tabs={tabs}\n        selectedTabIndex={this.selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}/>\n    );\n  }\n\n  private createModel = async () => {\n    const model = {\n      tabModels: []\n    };\n\n    const workflowDefinition = this.workflowDefinition;\n    const options: WorkflowOptions = workflowDefinition.options || {};\n    const autoUpdateConsumingWorkflows = options.autoUpdateConsumingWorkflows ?? false;\n    const usableAsActivity = options.usableAsActivity ?? false;\n\n    if (!workflowDefinition) {\n      this.model = model;\n      return;\n    }\n\n    const propertiesTabModel: PropertiesTabModel = {\n      name: 'properties',\n      tab: null,\n      Widgets: [{\n        name: 'workflowName',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label={this.strings.propertiesWorkflowName} fieldId=\"workflowName\" hint={this.strings.propertiesWorkflowNameHint}>\n            <input type=\"text\" name=\"workflowName\" id=\"workflowName\" value={workflow.name} onChange={e => this.onPropertyEditorChanged(wf => wf.name = (e.target as HTMLInputElement).value)}/>\n          </FormEntry>;\n        },\n        order: 0\n      }, {\n        name: 'workflowDescription',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label={this.strings.propertiesWorkflowDescription} fieldId=\"workflowDescription\" hint={this.strings.propertiesWorkflowDescriptionHint}>\n            <textarea name=\"workflowDescription\" id=\"workflowDescription\" value={workflow.description} rows={6} onChange={e => this.onPropertyEditorChanged(wf => wf.description = (e.target as HTMLTextAreaElement).value)}/>\n          </FormEntry>;\n        },\n        order: 5\n      }, {\n        name: 'workflowInfo',\n        content: () => {\n          const workflow = this.workflowDefinition;\n\n          const workflowDetails = {\n            [this.strings.propertiesDefitionId]: isNullOrWhitespace(workflow.definitionId) ? this.strings.propertiesNew : workflow.definitionId,\n            [this.strings.propertiesVersionId]: isNullOrWhitespace(workflow.id) ? this.strings.propertiesNew : workflow.id,\n            [this.strings.propertiesVersion]: workflow.version.toString(),\n            [this.strings.propertiesStatus]: workflow.isPublished ? this.strings.propertiesPublished : this.strings.propertiesDraft,\n            [this.strings.propertiesReadOnly]: workflow.isReadonly ? this.strings.propertiesYes : this.strings.propertiesNo\n          };\n\n          return <InfoList title=\"Information\" dictionary={workflowDetails}/>;\n        },\n        order: 10\n      }]\n    };\n\n    propertiesTabModel.tab = {\n      displayText: this.strings.propertiesTab,\n      order: 0,\n      content: () => this.renderPropertiesTab(propertiesTabModel)\n    };\n\n    const variablesTabModel: TabModel = {\n      name: 'variables',\n      tab: {\n        displayText: this.strings.variablesTab,\n        order: 5,\n        content: () => this.renderVariablesTab()\n      }\n    }\n\n    const strategies = descriptorsStore.workflowActivationStrategyDescriptors;\n    const firstStrategy = strategies.length > 0 ? strategies[0] : null;\n    const defaultDescription = firstStrategy?.description ?? '';\n\n    const settingsWidgets: Array<Widget> = [\n      {\n        name: 'workflowActivationValidator',\n        order: 0,\n        content: () => <FormEntry label={this.strings.settingsActivitationStrategy} fieldId=\"workflowActivationStrategyType\" hint={defaultDescription}>\n          <select name=\"workflowActivationStrategyType\" onChange={e => this.onPropertyEditorChanged(wf => {\n            const selectElement = (e.target as HTMLSelectElement);\n            options.activationStrategyType = selectElement.value;\n            wf.options = options;\n\n            const hintElement: HTMLElement = selectElement.closest('.form-entry').getElementsByClassName('form-field-hint')[0] as HTMLElement;\n            const strategy = strategies.find(x => x.typeName == selectElement.value);\n            hintElement.innerText = strategy.description;\n          })}>\n            {strategies.map(strategy => <option value={strategy.typeName} selected={strategy.typeName == options.activationStrategyType}>{strategy.displayName}</option>)}\n          </select>\n        </FormEntry>\n      },\n      {\n        name: 'usableAsActivity',\n        order: 0,\n        content: () => <CheckboxFormEntry label={this.strings.settingsUsableAsActivity} fieldId=\"UsableAsActivity\" hint={this.strings.settingsUsableAsActivityHint}>\n          <input type=\"checkbox\" id=\"UsableAsActivity\" name=\"UsableAsActivity\" checked={usableAsActivity} onChange={e => this.onPropertyEditorChanged(wf => {\n            const inputElement = (e.target as HTMLInputElement);\n            wf.options.usableAsActivity = inputElement.checked;\n            this.createModel();\n          })}/>\n        </CheckboxFormEntry>\n      },\n      {\n        name: 'autoUpdateConsumingWorkflows',\n        order: 0,\n        content: () =>\n          <CheckboxFormEntry fieldId=\"UpdateConsumingWorkflows\" label={this.strings.settingsAutoUpdateConsumingWorkflows} hint={this.strings.settingsAutoUpdateConsumingWorkflowsHint}>\n            <input type=\"checkbox\" name=\"UpdateConsumingWorkflows\" id=\"UpdateConsumingWorkflows\" checked={autoUpdateConsumingWorkflows} onChange={e => this.onPropertyEditorChanged(wf => {\n              const inputElement = e.target as HTMLInputElement;\n              options.autoUpdateConsumingWorkflows = inputElement.checked;\n              wf.options = options;\n            })}/>\n          </CheckboxFormEntry>\n      }\n    ];\n\n    const settingsTabModel: TabModel = {\n      name: 'settings',\n      tab: {\n        displayText: this.strings.settingsTab,\n        order: 10,\n        content: () => <elsa-widgets widgets={settingsWidgets}/>\n      }\n    }\n\n    const inputOutputTabModel: TabModel = {\n      name: 'input-output',\n      tab: {\n        displayText: this.strings.inputOutputTab,\n        order: 15,\n        content: () => this.renderInputOutputTab()\n      }\n    }\n\n    const versionHistoryTabModel: TabModel = {\n      name: 'versionHistory',\n      tab: {\n        displayText: this.strings.versionHistoryTab,\n        order: 20,\n        content: () => this.renderVersionHistoryTab()\n      }\n    }\n\n    model.tabModels = [propertiesTabModel, variablesTabModel, settingsTabModel, versionHistoryTabModel, inputOutputTabModel];\n\n    const args: WorkflowPropertiesEditorDisplayingArgs = {\n      workflowDefinition,\n      model,\n      notifyWorkflowDefinitionChanged: () => this.onWorkflowDefinitionUpdated()\n    };\n\n    await this.eventBus.emit(WorkflowPropertiesEditorEventTypes.Displaying, this, args);\n\n    this.model = model;\n  }\n\n  private renderPropertiesTab = (tabModel: PropertiesTabModel) => <elsa-widgets widgets={tabModel.Widgets}/>;\n\n  private renderVariablesTab = () => {\n    const variables: Array<Variable> = this.workflowDefinition?.variables ?? [];\n\n    return <div>\n      <elsa-variables-editor variables={variables} onVariablesChanged={e => this.onVariablesUpdated(e)}/>\n    </div>\n  };\n\n  private renderInputOutputTab = () => {\n    const inputs: Array<InputDefinition> = this.workflowDefinition?.inputs ?? [];\n    const outputs: Array<OutputDefinition> = this.workflowDefinition?.outputs ?? [];\n    const outcomes: Array<string> = this.workflowDefinition?.outcomes ?? [];\n\n    return <div>\n      <elsa-workflow-definition-input-output-settings\n        inputs={inputs}\n        outputs={outputs}\n        outcomes={outcomes}\n        onInputsChanged={e => this.onInputsUpdated(e)}\n        onOutputsChanged={e => this.onOutputsUpdated(e)}\n        onOutcomesChanged={e => this.onOutcomesUpdated(e)}\n      />\n    </div>\n  };\n\n  private renderVersionHistoryTab = () => {\n    return <div>\n      <elsa-workflow-definition-version-history\n        selectedVersion={this.workflowDefinition}\n        workflowVersions={this.workflowVersions}\n      />\n    </div>\n  };\n\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex;\n\n  private onPropertyEditorChanged = (apply: (w: WorkflowDefinition) => void) => {\n    const workflowDefinition = this.workflowDefinition;\n    apply(workflowDefinition);\n    this.workflowPropsUpdated.emit({workflowDefinition: workflowDefinition});\n  }\n\n  private onVariablesUpdated = async (e: CustomEvent<Array<Variable>>) => this.onPropsUpdated('variables', e.detail)\n\n  private onInputsUpdated = async (e: CustomEvent<Array<InputDefinition>>) => this.onPropsUpdated('inputs', e.detail)\n  private onOutputsUpdated = async (e: CustomEvent<Array<OutputDefinition>>) => this.onPropsUpdated('outputs', e.detail)\n\n  private onOutcomesUpdated = async (e: CustomEvent<Array<string>>) => this.onPropsUpdated('outcomes', e.detail)\n\n  private onPropsUpdated = async (\n    propName: string,\n    propValue: Array<Variable> | Array<InputDefinition> | Array<OutputDefinition> | Array<string>\n  ) => {\n    const workflowDefinition = this.workflowDefinition;\n\n    if (!workflowDefinition || !workflowDefinition.isLatest) {\n      console.debug('onPropsUpdated: workflowDefinition is not latest');\n      return;\n    }\n\n    workflowDefinition[propName] = propValue;\n    const updatedTab = this.getPropEditorSectionByPropName(propName);\n    this.workflowPropsUpdated.emit({workflowDefinition, updatedTab});\n    await this.createModel();\n  };\n\n  private onWorkflowDefinitionUpdated = () => {\n    const workflowDefinition = this.workflowDefinition;\n    this.workflowPropsUpdated.emit({workflowDefinition});\n  };\n\n  private getPropEditorSectionByPropName(propName: string): WorkflowPropertiesEditorTabs {\n    const enumKey = Object.keys(WorkflowPropertiesEditorTabs).find(key => WorkflowPropertiesEditorTabs[key as keyof typeof WorkflowPropertiesEditorTabs] === propName);\n\n    if (enumKey) {\n      return WorkflowPropertiesEditorTabs[enumKey as keyof typeof WorkflowPropertiesEditorTabs];\n    }\n    return null;\n  }\n}\n"],"version":3}