{"file":"elsa-output-picker-input.entry.js","mappings":";;;;;;;;;;;MAaa,YAAY;;;IAkCf,wBAAmB,GAAG,CAAC,CAAoC;MACjE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACtE,CAAA;IAEO,aAAQ,GAAG,CAAC,CAAQ;MAC1B,MAAM,YAAY,GAAG,CAAC,CAAC,MAA2B,CAAC;MACnD,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC;MACtC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;KACjE,CAAA;;;EAvCM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC;IACvC,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,KAAK,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAClD,MAAM,KAAK,GAAG,MAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAgC,0CAAE,KAAK,CAAC;IAC9D,MAAM,MAAM,GAAG,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,IAAI,mCAAI,eAAe,CAAC,aAAa,CAAC;IAExE,QACE,EAAC,wBAAwB,CAAC,QAAQ,QAC/B,CAAC,EAAC,kBAAkB,EAAC;;MACpB,IAAI,OAAO,GAAuB,MAAA,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,OAAO,mCAAI,EAAE,CAAC;MACpE,OAAO,GAAG,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC;MAC7B,OAAO,iCAA2B,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,IACvJ,cAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAClE,OAAO,CAAC,GAAG,CAAC,CAAC,MAAwB;;QACpC,MAAM,UAAU,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,CAAC;QAChC,MAAM,WAAW,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,mCAAI,EAAE,CAAC;QAC9C,MAAM,UAAU,GAAG,UAAU,IAAI,KAAK,CAAC;QACvC,OAAO,cAAQ,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,IAAG,WAAW,CAAU,CAAC;OAChF,CAAC,CACK,CACiB,CAAA;KAC7B,CACiC,EACpC;GACH;;;;;","names":[],"sources":["./src/components/inputs/output-picker.tsx"],"sourcesContent":["import {Component, Prop, h} from '@stencil/core';\r\nimport {LiteralExpression, SyntaxNames, Variable} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue, getPropertyValue} from \"../../utils\";\r\nimport {FormEntry} from \"../shared/forms/form-entry\";\r\nimport WorkflowDefinitionTunnel from \"../../modules/workflow-definitions/state\";\r\nimport {OutputDefinition} from \"../../modules/workflow-definitions/models/entities\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-output-picker-input',\r\n  shadow: false\r\n})\r\nexport class OutputPicker {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const description = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const value = (input?.expression as LiteralExpression)?.value;\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n\r\n    return (\r\n      <WorkflowDefinitionTunnel.Consumer>\r\n        {({workflowDefinition}) => {\r\n          let outputs: OutputDefinition[] = workflowDefinition?.outputs ?? [];\r\n          outputs = [null, ...outputs];\r\n          return <elsa-input-control-switch label={displayName} hint={description} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n            <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n              {outputs.map((output: OutputDefinition) => {\r\n                const outputName = output?.name;\r\n                const displayName = output?.displayName ?? '';\r\n                const isSelected = outputName == value;\r\n                return <option value={outputName} selected={isSelected}>{displayName}</option>;\r\n              })}\r\n            </select>\r\n          </elsa-input-control-switch>\r\n        }}\r\n      </WorkflowDefinitionTunnel.Consumer>\r\n    );\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    const outputName = inputElement.value;\r\n    this.inputContext.inputChanged(outputName, SyntaxNames.Literal);\r\n  }\r\n}\r\n"],"version":3}