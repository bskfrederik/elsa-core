import { WorkflowInstance } from '../../../models';
import { ActivityDriverRegistry } from '../../../services';
import { WorkflowDefinition } from "../../workflow-definitions/models/entities";
export declare class WorkflowInstanceViewer {
  private readonly eventBus;
  private readonly journalApi;
  private flowchartElement;
  private container;
  private isJournalSelecting;
  constructor();
  private el;
  monacoLibPath: string;
  workflowDefinition: WorkflowDefinition;
  workflowInstance: WorkflowInstance;
  private mainWorkflowDefinitionState;
  private targetWorkflowDefinitionState;
  private workflowInstanceState;
  private selectedActivity?;
  private selectedExecutionLogRecord?;
  private flowchartRootActivity;
  private handleMonacoLibPath;
  onWorkflowDefinitionChanged(value: WorkflowDefinition): Promise<void>;
  onWorkflowInstanceChanged(value: WorkflowDefinition): Promise<void>;
  private handleResize;
  private handlePanelCollapsed;
  private handleContainerSelected;
  private handleActivitySelected;
  private handleJournalItemSelected;
  private importSelectedItemsWorkflow;
  private findConsumingWorkflowRecursive;
  private getFlowchartByActivityNode;
  private findFlowchartOfActivityRecursive;
  getCanvas(): Promise<HTMLElsaFlowchartElement>;
  registerActivityDrivers(register: (registry: ActivityDriverRegistry) => void): Promise<void>;
  getWorkflow(): Promise<WorkflowDefinition>;
  importWorkflow(workflowDefinition: WorkflowDefinition, workflowInstance: WorkflowInstance): Promise<void>;
  updateWorkflowDefinition(workflowDefinition: WorkflowDefinition): Promise<void>;
  componentWillLoad(): Promise<void>;
  componentDidLoad(): Promise<void>;
  private renderSelectedObject;
  private getWorkflowInternal;
  private updateLayout;
  private updateContainerLayout;
  private onActivityPickerPanelStateChanged;
  private onActivityEditorPanelStateChanged;
  render(): any;
}
