import 'reflect-metadata';
import { EventEmitter } from '../../stencil-public-runtime';
import { Graph, Node } from '@antv/x6';
import './shapes';
import './ports';
import { Activity, ActivityDeletedArgs, ActivitySelectedArgs, ChildActivitySelectedArgs, ContainerSelectedArgs, GraphUpdatedArgs } from '../../models';
import { AddActivityArgs, LayoutDirection, RenameActivityArgs, UpdateActivityArgs } from './models';
export declare class FlowchartComponent {
  private readonly eventBus;
  private readonly nodeFactory;
  private readonly portProviderRegistry;
  private activityContextMenu;
  constructor();
  rootActivity: Activity;
  interactiveMode: boolean;
  silent: boolean;
  isReadonly: boolean;
  el: HTMLElement;
  container: HTMLElement;
  graph: Graph;
  target: Node;
  activitySelected: EventEmitter<ActivitySelectedArgs>;
  activityDeleted: EventEmitter<ActivityDeletedArgs>;
  containerSelected: EventEmitter<ContainerSelectedArgs>;
  childActivitySelected: EventEmitter<ChildActivitySelectedArgs>;
  graphUpdated: EventEmitter<GraphUpdatedArgs>;
  private activityLookup;
  private activities;
  private path;
  private handleChildActivitySelected;
  newRoot(): Promise<Activity>;
  updateGraph(): Promise<void>;
  getGraph(): Promise<Graph>;
  reset(): Promise<void>;
  updateLayout(): Promise<void>;
  zoomToFit(): Promise<void>;
  scrollToStart(): Promise<void>;
  autoLayout(direction: LayoutDirection): Promise<void>;
  addActivity(args: AddActivityArgs): Promise<Activity>;
  updateActivity(args: UpdateActivityArgs): Promise<void>;
  getActivity(id: string): Promise<Activity>;
  renameActivity(args: RenameActivityArgs): Promise<void>;
  export(): Promise<Activity>;
  private onActivityChanged;
  private onInteractiveModeChange;
  private editChildActivity;
  componentWillLoad(): Promise<void>;
  componentDidLoad(): Promise<void>;
  private getFlowchartDescriptor;
  private createFlowchart;
  private createAndInitializeGraph;
  private getCurrentActivity;
  private getCurrentFlowchartActivity;
  private resolvePort;
  private setPort;
  private updateModel;
  private exportInternal;
  private getActivityDescriptor;
  private setupGraph;
  private updateGraphInternal;
  private getFlowchartModel;
  private createEdge;
  private syncEdgeData;
  private updateLookups;
  private generateUniqueActivityName;
  private getAllActivities;
  private onGraphClick;
  private onNodeSelected;
  private onNodeContextMenu;
  private onNodeMoved;
  private onEdgeConnected;
  private onGraphChanged;
  private onNodeRemoved;
  private onNodeAdded;
  private onToggleCanStartWorkflowClicked;
  private onDeleteActivityClicked;
  private onCopyActivityClicked;
  private onCutActivityClicked;
  private onNavigateHierarchy;
  private updatePorts;
  render(): any;
}
