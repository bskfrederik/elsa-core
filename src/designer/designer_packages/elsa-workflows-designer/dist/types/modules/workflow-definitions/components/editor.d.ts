import { EventEmitter } from '../../../stencil-public-runtime';
import { Activity } from '../../../models';
import { ActivityDriverRegistry } from '../../../services';
import { WorkflowDefinitionUpdatedArgs } from "../models/ui";
import { WorkflowDefinition } from "../models/entities";
export declare class WorkflowDefinitionEditor {
  el: HTMLElsaWorkflowDefinitionEditorElement;
  private readonly pluginRegistry;
  private readonly eventBus;
  private readonly activityNameFormatter;
  private readonly portProviderRegistry;
  private flowchart;
  private container;
  private toolbox;
  private readonly saveChangesDebounced;
  private readonly workflowDefinitionApi;
  constructor();
  workflowDefinition?: WorkflowDefinition;
  monacoLibPath: string;
  workflowUpdated: EventEmitter<WorkflowDefinitionUpdatedArgs>;
  private workflowDefinitionState;
  private selectedActivity?;
  private workflowVersions;
  private handleMonacoLibPath;
  onWorkflowDefinitionChanged(value: WorkflowDefinition): Promise<void>;
  private handleResize;
  private handleContainerSelected;
  getFlowchart(): Promise<HTMLElsaFlowchartElement>;
  registerActivityDrivers(register: (registry: ActivityDriverRegistry) => void): Promise<void>;
  getWorkflowDefinition(): Promise<WorkflowDefinition>;
  importWorkflow(workflowDefinition: WorkflowDefinition): Promise<void>;
  updateWorkflowDefinition(workflowDefinition: WorkflowDefinition): Promise<void>;
  newWorkflow(): Promise<WorkflowDefinition>;
  loadWorkflowVersions(): Promise<void>;
  updateActivity(activity: Activity): Promise<void>;
  componentWillLoad(): Promise<void>;
  componentDidLoad(): Promise<void>;
  private renderSelectedObject;
  private getWorkflowDefinitionInternal;
  private saveChanges;
  private hasWorkflowDefinitionAnyUpdatedData;
  private updateLayout;
  private updateContainerLayout;
  private updateActivityInternal;
  private onActivityPickerPanelStateChanged;
  private onWorkflowEditorPanelStateChanged;
  private onActivityEditorPanelStateChanged;
  private onDragOver;
  private onDrop;
  private onZoomToFit;
  private onAutoLayout;
  private onActivityUpdated;
  private onWorkflowPropsUpdated;
  private onActivitySelected;
  private onChildActivitySelected;
  private onGraphUpdated;
  private updateSelectedActivity;
  private onVersionSelected;
  private onDeleteVersionClicked;
  private onRevertVersionClicked;
  render(): any;
}
