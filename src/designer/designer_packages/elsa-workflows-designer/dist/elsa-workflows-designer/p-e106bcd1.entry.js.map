{"version":3,"names":["TypePickerInput","this","onChange","e","inputElement","target","inputContext","inputChanged","value","SyntaxNames","Literal","onExpressionChanged","detail","expression","syntax","render","inputDescriptor","fieldName","name","fieldId","displayName","description","availableTypes","descriptorsStore","variableDescriptors","groupedVariableTypes","groupBy","x","category","input","getInputPropertyValue","_b","_a","type","defaultSyntax","_c","currentValue","undefined","defaultValue","toString","h","label","hint","id","selected","Object","keys","map","variableTypes","descriptor","typeName"],"sources":["./src/components/inputs/type-picker.tsx"],"sourcesContent":["import {Component, Prop, h} from '@stencil/core';\r\nimport {groupBy} from 'lodash';\r\nimport {LiteralExpression, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue} from \"../../utils\";\r\nimport descriptorsStore from '../../data/descriptors-store';\r\nimport {VariableDescriptor} from \"../../services/api-client/variable-descriptors-api\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-type-picker-input',\r\n  shadow: false\r\n})\r\nexport class TypePickerInput {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const description = inputDescriptor.description;\r\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\r\n    const groupedVariableTypes = groupBy(availableTypes, x => x.category);\r\n    const input = getInputPropertyValue(inputContext);\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const value = (input?.expression as LiteralExpression)?.value;\r\n    let currentValue = value;\r\n\r\n    if (currentValue == undefined) {\r\n      const defaultValue = inputDescriptor.defaultValue;\r\n      currentValue = defaultValue ? defaultValue.toString() : undefined;\r\n    }\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={description} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n          <option value=\"\" selected={(!currentValue || currentValue == \"\")}></option>\r\n          {Object.keys(groupedVariableTypes).map(category => {\r\n            const variableTypes = groupedVariableTypes[category] as Array<VariableDescriptor>;\r\n            return (<optgroup label={category}>\r\n              {variableTypes.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == currentValue}>{descriptor.displayName}</option>)}\r\n            </optgroup>);\r\n          })}\r\n        </select>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    this.inputContext.inputChanged(inputElement.value, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"],"mappings":"oQAaaA,EAAe,M,yBAqClBC,KAAAC,SAAYC,IAClB,MAAMC,EAAeD,EAAEE,OACvBJ,KAAKK,aAAaC,aAAaH,EAAaI,MAAOC,EAAYC,QAAQ,EAGjET,KAAAU,oBAAuBR,IAC7BF,KAAKK,aAAaC,aAAaJ,EAAES,OAAOC,WAAYV,EAAES,OAAOE,OAAO,E,4BAxC/DC,S,UACL,MAAMT,EAAeL,KAAKK,aAC1B,MAAMU,EAAkBV,EAAaU,gBACrC,MAAMC,EAAYD,EAAgBE,KAClC,MAAMC,EAAUH,EAAgBE,KAChC,MAAME,EAAcJ,EAAgBI,YACpC,MAAMC,EAAcL,EAAgBK,YACpC,MAAMC,EAA4CC,EAAiBC,oBACnE,MAAMC,EAAuBC,UAAQJ,GAAgBK,GAAKA,EAAEC,WAC5D,MAAMC,EAAQC,EAAsBxB,GACpC,MAAMQ,GAASiB,GAAAC,EAAAH,IAAK,MAALA,SAAK,SAALA,EAAOhB,cAAU,MAAAmB,SAAA,SAAAA,EAAEC,QAAI,MAAAF,SAAA,EAAAA,EAAIf,EAAgBkB,cAC1D,MAAM1B,GAAQ2B,EAACN,IAAK,MAALA,SAAK,SAALA,EAAOhB,cAAgC,MAAAsB,SAAA,SAAAA,EAAE3B,MACxD,IAAI4B,EAAe5B,EAEnB,GAAI4B,GAAgBC,UAAW,CAC7B,MAAMC,EAAetB,EAAgBsB,aACrCF,EAAeE,EAAeA,EAAaC,WAAaF,S,CAG1D,OACEG,EAAA,6BAA2BC,MAAOrB,EAAasB,KAAMrB,EAAaP,OAAQA,EAAQD,WAAYL,EAAOG,oBAAqBV,KAAKU,qBAC7H6B,EAAA,UAAQG,GAAIxB,EAASD,KAAMD,EAAWf,SAAUC,GAAKF,KAAKC,SAASC,IACjEqC,EAAA,UAAQhC,MAAM,GAAGoC,UAAYR,GAAgBA,GAAgB,KAC5DS,OAAOC,KAAKrB,GAAsBsB,KAAInB,IACrC,MAAMoB,EAAgBvB,EAAqBG,GAC3C,OAAQY,EAAA,YAAUC,MAAOb,GACtBoB,EAAcD,KAAIE,GAAcT,EAAA,UAAQhC,MAAOyC,EAAWC,SAAUN,SAAUK,EAAWC,UAAYd,GAAea,EAAW7B,eACvH,K"}