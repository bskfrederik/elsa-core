{"version":3,"names":["RevertIcon","h","class","width","height","viewBox","xmlns","fill","stroke","d","PublishedIcon","ActivityInputEditorDialogContent","this","onSubmit","async","e","preventDefault","form","target","input","getInputInternal","inputChanged","emit","formData","FormData","name","get","displayName","type","description","category","uiHint","isArray","driverType","storageDriverType","isNullOrWhitespace","formElement","strings","getLocaleComponentStrings","element","console","log","render","_a","inputTypeName","availableTypes","descriptorsStore","variableDescriptors","storageDrivers","groupedTypes","groupBy","x","selectedUIHint","uiHints","value","ref","el","method","editInputConfiguration","FormEntry","fieldId","label","inputName","hint","inputNameHint","id","inputType","inputTypeHint","Object","keys","map","types","descriptor","typeName","selected","CheckboxFormEntry","arrayInputLabel","arrayInputHint","checked","displayNameLabel","displayNameHint","inputDescriptionLabel","inputDescriptionHint","inputCategoryLabel","inputCategoryHint","controlLabel","controlHint","isSelected","storageLabel","storageHint","driver","text","ActivityOutputEditorDialogContent","output","getOutputInternal","outputChanged","outputTypeName","editOutputDefinition","outputName","outputNameHint","outputType","outputTypeHint","outputDisplayName","outputDisplayNameHint","outputDescription","outputDescriptionHint","VariableEditorDialogContent","variable","getVariableInternal","variableChanged","driverTypeName","generateIdentity","storageDriverTypeName","variableTypeName","groupedVariableTypes","editVariable","labelName","nameHint","labelType","typeHint","variableTypes","labelArray","arrayHint","labelValue","valueHint","labelStorage","VariablesEditor","constructor","hostRef","getVariableNameExists","variables","find","updateVariablesState","variablesState","variablesChanged","generateNewVariableName","counter","length","newVariableName","onAddVariableClick","modalDialogInstance","modalDialogService","show","actions","saveAction","onEditClick","onDeleteClick","filter","onVariableChanged","a","updatedVariable","instance","modalDialogContentRef","getVariable","variableExists","sort","b","Container","ModalDialogService","ModalActionType","Submit","isPrimary","onClick","onVariablesPropChanged","scope","columName","columnType","columStorage","storage","storageName","typeDisplayName","_b","menuItems","variableEditButton","handler","icon","EditIcon","variableDeleteButton","DeleteIcon","Widgets","widgets","order","widget","content","InputOutputSettings","renderInputs","inputs","inputsState","inputsLabel","editButton","onEditInputClick","deleteButton","onDeleteInputClick","onAddInputClick","addInputButton","renderOutputs","outputs","outputsState","outputLabel","onEditOutputClick","onDeleteOutputClick","onAddOutputClick","addOutputButton","renderOutcomes","outcomes","labelOutcome","outcomeHint","placeHolder","placeholderOutcome","values","onValueChanged","onOutcomesChanged","detail","getInputNameExists","getOutputNameExists","updateInputsState","inputsChanged","updateOutputsState","outputsChanged","generateNewInputName","newName","generateNewOutputName","inputSaveAction","outputSaveAction","onInputDefinitionChanged","updatedInput","getInput","inputExists","onOutputDefinitionChanged","updatedOutput","getOutput","outputExists","outcomesChanged","onInputsPropChanged","onOutputsPropChanged","WorkflowDefinitionVersionHistory","onViewVersionClick","version","versionSelected","onDeleteVersionClick","DefaultContents","Warning","modalType","ModalType","Confirmation","DefaultModalActions","Delete","deleteVersionClicked","Cancel","onRevertVersionClick","revertVersionClicked","eventBus","EventBus","workflowDefinitionApi","WorkflowDefinitionsApi","created","workflowVersions","v","push","delete","isLatest","revert","isPublished","moment","createdAt","format","disabled","selectedVersion","view","undefined"],"sources":["./src/components/icons/tooling/revert.tsx","./src/components/icons/tooling/published.tsx","./src/modules/workflow-definitions/components/workflow-properties/activity-input-editor-dialog-content.tsx","./src/modules/workflow-definitions/components/workflow-properties/activity-output-editor-dialog-content.tsx","./src/modules/workflow-definitions/components/workflow-properties/variable-editor-dialog-content.tsx","./src/modules/workflow-definitions/components/workflow-properties/variables-editor.tsx","./src/modules/workflow-definitions/components/widgets.tsx","./src/modules/workflow-definitions/components/workflow-properties/input-output-settings.tsx","./src/modules/workflow-definitions/components/workflow-properties/version-history.tsx"],"sourcesContent":["import {FunctionalComponent, h} from \"@stencil/core\";\r\n\r\nexport const RevertIcon: FunctionalComponent = () =>\r\n  <svg class=\"tw-h-6 tw-w-6 tw-text-gray-500\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\r\n       stroke-linejoin=\"round\">\r\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>\r\n    <path d=\"M9 11l-4 4l4 4m-4 -4h11a4 4 0 0 0 0 -8h-1\"/>\r\n  </svg>;\r\n","import {FunctionalComponent, h} from \"@stencil/core\";\r\n\r\nexport const PublishedIcon: FunctionalComponent = () =>\r\n  <svg class=\"tw-h-6 tw-w-6 tw-text-blue-500\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\r\n       stroke-linejoin=\"round\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n  </svg>;\r\n","import {Component, h, Prop, Event, EventEmitter, Method, Element} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {InputDefinition} from \"../../models/entities\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {StorageDriverDescriptor} from \"../../../../models\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-activity-input-editor-dialog-content',\n  shadow: false\n})\nexport class ActivityInputEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() input: InputDefinition;\n  @Event() inputChanged: EventEmitter<InputDefinition>;\n\n  @Method()\n  async getInput(): Promise<InputDefinition> {\n    return this.getInputInternal(this.formElement);\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    console.log(this.strings);\n  }\n\n  render() {\n    const input: InputDefinition = this.input ?? {name: '', type: 'Object', isArray: false};\n    const inputTypeName = input.type;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n    const groupedTypes = groupBy(availableTypes, x => x.category);\n    const selectedUIHint = input.uiHint;\n\n    // TODO: Get this from configuration (API).\n    const uiHints = [{\n      name: 'Single line',\n      value: 'single-line'\n    }, {\n      name: 'Multi line',\n      value: 'multi-line'\n    }, {\n      name: 'Checkbox',\n      value: 'checkbox'\n    }, {\n      name: 'Check list',\n      value: 'check-list'\n    }, {\n      name: 'Radio list',\n      value: 'radio-list'\n    }, {\n      name: 'Dropdown',\n      value: 'dropdown'\n    }, {\n      name: 'Multi text',\n      value: 'multi-text'\n    }, {\n      name: 'Code editor',\n      value: 'code-editor'\n    }, {\n      name: 'Variable picker',\n      value: 'variable-picker'\n    }, {\n      name: 'Type picker',\n      value: 'type-picker'\n    }\n    ];\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\"> {this.strings.editInputConfiguration}</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"inputName\" label={this.strings.inputName} hint={this.strings.inputNameHint}>\n                <input type=\"text\" name=\"inputName\" id=\"inputName\" value={input.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputTypeName\" label={this.strings.inputType} hint={this.strings.inputTypeHint}>\n                <select id=\"inputTypeName\" name=\"inputTypeName\">\n                  {Object.keys(groupedTypes).map(category => {\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == inputTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <CheckboxFormEntry fieldId=\"inputIsArray\" label={this.strings.arrayInputLabel} hint={this.strings.arrayInputHint}>\n                <input type=\"checkbox\" name=\"inputIsArray\" id=\"inputIsArray\" value=\"true\" checked={input.isArray}/>\n              </CheckboxFormEntry>\n\n              <FormEntry fieldId=\"inputDisplayName\" label={this.strings.displayNameLabel} hint={this.strings.displayNameHint}>\n                <input type=\"text\" name=\"inputDisplayName\" id=\"inputDisplayName\" value={input.displayName}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputDescription\" label={this.strings.inputDescriptionLabel} hint={this.strings.inputDescriptionHint}>\n                <input type=\"text\" name=\"inputDescription\" id=\"inputDescription\" value={input.description}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputCategory\" label={this.strings.inputCategoryLabel} hint={this.strings.inputCategoryHint}>\n                <input type=\"text\" name=\"inputCategory\" id=\"inputCategory\" value={input.category}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputUIHint\" label={this.strings.controlLabel} hint={this.strings.controlHint}>\n                <select name=\"inputUIHint\" id=\"inputUIHint\">\n                  {uiHints.map(uiHint => {\n                    const isSelected = uiHint.value == selectedUIHint;\n                    return <option value={uiHint.value} selected={isSelected}>{uiHint.name}</option>\n                  })}\n                </select>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputStorageDriverType\" label={this.strings.storageLabel} hint={this.strings.storageHint}>\n                <select id=\"inputStorageDriverType\" name=\"inputStorageDriverType\">\n                  {storageDrivers.map(driver => {\n                    const value = driver.typeName;\n                    const text = driver.displayName;\n                    const selected = value == input.storageDriverType;\n                    return <option value={value} selected={selected}>{text}</option>;\n                  })}\n                </select>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const input = this.getInputInternal(form);\n    this.inputChanged.emit(input);\n  };\n\n  private getInputInternal = (form: HTMLFormElement): InputDefinition => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('inputName') as string;\n    const displayName = formData.get('inputDisplayName') as string;\n    const type = formData.get('inputTypeName') as string;\n    const description = formData.get('inputDescription') as string;\n    const category = formData.get('inputCategory') as string;\n    const uiHint = formData.get('inputUIHint') as string;\n    const isArray = formData.get('inputIsArray') as string === 'true';\n    const driverType = formData.get('inputStorageDriverType') as string;\n    const input = this.input;\n\n    input.name = name;\n    input.type = type;\n    input.displayName = displayName;\n    input.category = category;\n    input.description = description;\n    input.uiHint = uiHint;\n    input.isArray = isArray;\n    input.storageDriverType = isNullOrWhitespace(driverType) ? null : driverType;\n\n    return input;\n  };\n\n}\n","import {Component, h, Prop, Event, EventEmitter, Method, Element} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {InputDefinition, OutputDefinition} from \"../../models/entities\";\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-activity-output-editor-dialog-content',\n  shadow: false\n})\nexport class ActivityOutputEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() output: OutputDefinition;\n  @Event() outputChanged: EventEmitter<OutputDefinition>;\n\n  @Method()\n  async getOutput(): Promise<OutputDefinition> {\n    return this.getOutputInternal(this.formElement);\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n  }\n\n\n  render() {\n    const output: OutputDefinition = this.output ?? {name: '', type: 'Object', isArray: false};\n    const outputTypeName = output.type;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const groupedTypes = groupBy(availableTypes, x => x.category);\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">{this.strings.editOutputDefinition}</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"outputName\" label={this.strings.outputName} hint={this.strings.outputNameHint}>\n                <input type=\"text\" name=\"outputName\" id=\"outputName\" value={output.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputTypeName\" label={this.strings.outputType} hint={this.strings.outputTypeHint}>\n                <select id=\"outputTypeName\" name=\"outputTypeName\">\n                  {Object.keys(groupedTypes).map(category => {\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == outputTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputDisplayName\" label={this.strings.outputDisplayName} hint={this.strings.outputDisplayNameHint}>\n                <input type=\"text\" name=\"outputDisplayName\" id=\"outputDisplayName\" value={output.displayName}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputDescription\" label={this.strings.outputDescription} hint={this.strings.outputDescriptionHint}>\n                <input type=\"text\" name=\"outputDescription\" id=\"outputDescription\" value={output.description}/>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const output = this.getOutputInternal(form);\n    this.outputChanged.emit(output);\n  };\n\n  private getOutputInternal = (form: HTMLFormElement): OutputDefinition => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('outputName') as string;\n    const displayName = formData.get('outputDisplayName') as string;\n    const type = formData.get('outputTypeName') as string;\n    const description = formData.get('outputDescription') as string;\n    const output = this.output;\n\n    output.name = name;\n    output.type = type;\n    output.displayName = displayName;\n    output.description = description;\n\n    return output;\n  };\n\n}\n","import {Component, h, Prop, Event, EventEmitter, Method, Element} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport {StorageDriverDescriptor, Variable} from \"../../../../models\";\nimport {generateIdentity, isNullOrWhitespace} from \"../../../../utils\";\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-variable-editor-dialog-content',\n  shadow: false\n})\nexport class VariableEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() variable: Variable;\n  @Event() variableChanged: EventEmitter<Variable>;\n\n  @Method()\n  async getVariable(): Promise<Variable> {\n    return this.getVariableInternal(this.formElement);\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    console.log(this.strings)\n  }\n\n  render() {\n    const variable: Variable = this.variable ?? {id: '', name: '', typeName: 'Object', isArray: false};\n    const variableTypeName = variable.typeName;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const groupedVariableTypes = groupBy(availableTypes, x => x.category);\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">{this.strings.editVariable}</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"variableName\" label={this.strings.labelName} hint={this.strings.nameHint}>\n                <input type=\"text\" name=\"variableName\" id=\"variableName\" value={variable.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"variableTypeName\" label={this.strings.labelType} hint={this.strings.typeHint}>\n                <select id=\"variableTypeName\" name=\"variableTypeName\">\n                  {Object.keys(groupedVariableTypes).map(category => {\n                    const variableTypes = groupedVariableTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {variableTypes.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == variableTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <CheckboxFormEntry fieldId=\"variableIsArray\" label={this.strings.labelArray} hint={this.strings.arrayHint}>\n                <input type=\"checkbox\" name=\"variableIsArray\" id=\"variableIsArray\" value=\"true\" checked={variable.isArray}/>\n              </CheckboxFormEntry>\n\n              <FormEntry fieldId=\"variableValue\" label={this.strings.labelValue} hint={this.strings.valueHint}>\n                <input type=\"text\" name=\"variableValue\" id=\"variableValue\" value={variable.value}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"variableStorageDriverId\" label={this.strings.labelStorage} hint={this.strings.storageHint}>\n                <select id=\"variableStorageDriverTypeName\" name=\"variableStorageDriverTypeName\">\n                  {storageDrivers.map(driver => {\n                    const value = driver.typeName;\n                    const text = driver.displayName;\n                    const selected = value == variable.storageDriverTypeName;\n                    return <option value={value} selected={selected}>{text}</option>;\n                  })}\n                </select>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const variable = this.getVariableInternal(form);\n    this.variableChanged.emit(variable);\n  };\n\n  private getVariableInternal = (form: HTMLFormElement): Variable => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('variableName') as string;\n    const value = formData.get('variableValue') as string;\n    const type = formData.get('variableTypeName') as string;\n    const isArray = formData.get('variableIsArray') as string == 'true';\n    const driverTypeName = formData.get('variableStorageDriverTypeName') as string;\n    const variable = this.variable;\n\n    if (isNullOrWhitespace(variable.id))\n      variable.id = generateIdentity();\n\n    variable.name = name;\n    variable.typeName = type;\n    variable.value = value;\n    variable.isArray = isArray;\n    variable.storageDriverTypeName = isNullOrWhitespace(driverTypeName) ? null : driverTypeName;\n\n    return variable;\n  };\n\n}\n","import {Component, Element, Event, EventEmitter, h, Prop, State, Watch} from \"@stencil/core\";\nimport {StorageDriverDescriptor, Variable} from \"../../../../models\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {Container} from \"typedi\";\nimport {ModalActionClickArgs, ModalActionDefinition, ModalActionType, ModalDialogInstance, ModalDialogService} from \"../../../../components/shared/modal-dialog\";\nimport {DeleteIcon, EditIcon} from \"../../../../components/icons/tooling\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-variables-editor',\n  shadow: false\n})\nexport class VariablesEditor {\n  private readonly modalDialogService: ModalDialogService;\n  private readonly saveAction: ModalActionDefinition;\n  private modalDialogInstance: ModalDialogInstance;\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  constructor() {\n    this.modalDialogService = Container.get(ModalDialogService);\n\n    this.saveAction = {\n      name: 'Save',\n      type: ModalActionType.Submit,\n      text: 'Save',\n      isPrimary: true,\n      onClick: this.onVariableChanged\n    };\n  }\n\n  @Prop() variables?: Array<Variable>;\n  @Event() variablesChanged: EventEmitter<Variable[]>;\n  @State() variablesState: Array<Variable> = [];\n\n  @Watch('variables')\n  onVariablesPropChanged(value: Array<Variable>) {\n    this.variablesState = !!this.variables ? [...this.variables] : [];\n  }\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    this.onVariablesPropChanged(this.variables);\n  }\n\n  render() {\n    const variables = this.variables;\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n\n    return (\n      <div>\n        <div class=\"tw-flex tw-justify-end tw-m-4\">\n          <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddVariableClick()}>Add variable</button>\n        </div>\n        <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n          <table class=\"default-table\">\n            <thead>\n            <tr>\n              <th scope=\"col\">{this.strings.columName}</th>\n              <th scope=\"col\">{this.strings.columnType}</th>\n              <th scope=\"col\">{this.strings.columStorage}</th>\n              <th scope=\"col\"/>\n            </tr>\n            </thead>\n            <tbody>\n            {variables.map(variable => {\n                const storage = storageDrivers.find(x => x.typeName == variable.storageDriverTypeName);\n                const storageName = storage?.displayName ?? '-';\n                const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == variable.typeName);\n                const typeDisplayName = descriptor?.displayName ?? variable.typeName;\n\n                return (\n                  <tr>\n                    <td class=\"tw-whitespace-nowrap\">{variable.name}</td>\n                    <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                    <td>{storageName}</td>\n                    <td class=\"tw-pr-6\">\n                      <elsa-context-menu\n                        menuItems={[\n                          {text: this.strings.variableEditButton, handler: e => this.onEditClick(e, variable), icon: <EditIcon/>},\n                          {text: this.strings.variableDeleteButton, handler: e => this.onDeleteClick(e, variable), icon: <DeleteIcon/>},\n                        ]}\n                      />\n                    </td>\n                  </tr>);\n              }\n            )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private getVariableNameExists = (name: string): boolean => !!this.variables.find(x => x.name == name);\n\n  private updateVariablesState = (value: Array<Variable>) => {\n    this.variablesState = value;\n    this.variablesChanged.emit(value);\n  };\n\n  private generateNewVariableName = () => {\n    const variables = this.variables;\n    let counter = variables.length;\n\n    while (true) {\n      const newVariableName = `Variable${++counter}`;\n\n      if (!this.getVariableNameExists(newVariableName))\n        return newVariableName;\n    }\n  };\n\n  private onAddVariableClick = async () => {\n    const newVariableName = this.generateNewVariableName();\n    const variable: Variable = {id: '', name: newVariableName, typeName: 'Object', value: null, isArray: false};\n\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]})\n  };\n\n  private onEditClick = async (e: Event, variable: Variable) => {\n    e.preventDefault();\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]});\n  };\n\n  private onDeleteClick = (e: Event, variable: Variable) => {\n    e.preventDefault();\n    const variables = this.variables.filter(x => x != variable);\n    this.updateVariablesState(variables);\n  };\n\n  private onVariableChanged = async (a: ModalActionClickArgs) => {\n    const updatedVariable = await (a.instance.modalDialogContentRef as HTMLElsaVariableEditorDialogContentElement).getVariable();\n    let variables = this.variables;\n    const variableExists = !!variables.find(x => x == updatedVariable);\n\n    if (variableExists)\n      variables = [...variables];\n    else\n      variables = [...variables, updatedVariable];\n\n    variables = variables.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    this.updateVariablesState(variables);\n  };\n}\n","import {Component, Event, EventEmitter, h, Method, Prop, State, Watch} from '@stencil/core';\r\nimport {Container} from \"typedi\";\r\nimport {EventBus} from \"../../../services\";\r\nimport {WorkflowDefinition} from \"../models/entities\";\r\nimport {PropertiesTabModel, TabModel, Widget, WorkflowDefinitionPropsUpdatedArgs, WorkflowPropertiesEditorDisplayingArgs, WorkflowPropertiesEditorEventTypes, WorkflowPropertiesEditorModel} from \"../models/ui\";\r\nimport {FormEntry} from \"../../../components/shared/forms/form-entry\";\r\nimport {isNullOrWhitespace} from \"../../../utils\";\r\nimport {InfoList} from \"../../../components/shared/forms/info-list\";\r\nimport {TabChangedArgs, Variable, VersionedEntity} from \"../../../models\";\r\nimport {WorkflowDefinitionsApi} from \"../services/api\";\r\n\r\n@Component({\r\n  tag: 'elsa-widgets',\r\n})\r\nexport class Widgets {\r\n  @Prop() widgets: Array<Widget> = [];\r\n\r\n  public render() {\r\n    const widgets = this.widgets.sort((a, b) => a.order < b.order ? -1 : a.order > b.order ? 1 : 0);\r\n\r\n    return <div>\r\n      {widgets.map(widget => widget.content())}\r\n    </div>\r\n  }\r\n}\r\n","import {Component, Element, Event, EventEmitter, h, Prop, State, Watch} from \"@stencil/core\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {Container} from \"typedi\";\nimport {ModalActionClickArgs, ModalActionDefinition, ModalActionType, ModalDialogInstance, ModalDialogService} from \"../../../../components/shared/modal-dialog\";\nimport {InputDefinition, OutputDefinition} from \"../../models/entities\";\nimport {DeleteIcon, EditIcon} from \"../../../../components/icons/tooling\";\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-workflow-definition-input-output-settings',\n  shadow: false\n})\nexport class InputOutputSettings {\n  private readonly modalDialogService: ModalDialogService;\n  private readonly inputSaveAction: ModalActionDefinition;\n  private readonly outputSaveAction: ModalActionDefinition;\n  private modalDialogInstance: ModalDialogInstance;\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n\n\n  constructor() {\n    this.modalDialogService = Container.get(ModalDialogService);\n\n    this.inputSaveAction = {\n      name: 'Save',\n      type: ModalActionType.Submit,\n      text: 'Save',\n      isPrimary: true,\n      onClick: this.onInputDefinitionChanged\n    };\n\n    this.outputSaveAction = {\n      name: 'Save',\n      type: ModalActionType.Submit,\n      text: 'Save',\n      isPrimary: true,\n      onClick: this.onOutputDefinitionChanged\n    };\n  }\n\n  @Prop() inputs?: Array<InputDefinition>;\n  @Prop() outputs?: Array<OutputDefinition>;\n  @Prop() outcomes?: Array<string>;\n  @Event() inputsChanged: EventEmitter<InputDefinition[]>;\n  @Event() outputsChanged: EventEmitter<OutputDefinition[]>;\n  @Event() outcomesChanged: EventEmitter<Array<string>>;\n  @State() inputsState: Array<InputDefinition> = [];\n  @State() outputsState: Array<OutputDefinition> = [];\n\n  @Watch('inputs')\n  onInputsPropChanged(value: Array<InputDefinition>) {\n    this.inputsState = !!this.inputs ? [...this.inputs] : [];\n  }\n\n  @Watch('outputs')\n  onOutputsPropChanged(value: Array<OutputDefinition>) {\n    this.outputsState = !!this.outputs ? [...this.outputs] : [];\n  }\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    this.onInputsPropChanged(this.inputs);\n    this.onOutputsPropChanged(this.outputs);\n  }\n\n  render() {\n\n    return (\n      <div>\n        {this.renderInputs()}\n        {this.renderOutputs()}\n        {this.renderOutcomes()}\n      </div>\n    );\n  }\n\n  private renderInputs = () => {\n    const inputs = this.inputsState;\n\n    return <div>\n      <div class=\"tw-p-4\">\n        <h3 class=\"tw-text-base tw-leading-6 tw-font-medium tw-text-gray-900\">{this.strings.inputsLabel}</h3>\n      </div>\n      <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n        <table class=\"default-table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">{this.strings.inputName}</th>\n            <th scope=\"col\">{this.strings.inputType}</th>\n            <th scope=\"col\"/>\n          </tr>\n          </thead>\n          <tbody>\n          {inputs.map(input => {\n\n              const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == input.type);\n              const typeDisplayName = descriptor?.displayName ?? input.type;\n\n              return (\n                <tr>\n                  <td class=\"tw-whitespace-nowrap\">{input.name}</td>\n                  <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                  <td class=\"tw-pr-6\">\n                    <elsa-context-menu\n                      menuItems={[\n                        {text: this.strings.editButton, handler: e => this.onEditInputClick(e, input), icon: <EditIcon/>},\n                        {text: this.strings.deleteButton, handler: e => this.onDeleteInputClick(e, input), icon: <DeleteIcon/>},\n                      ]}\n                    />\n                  </td>\n                </tr>);\n            }\n          )}\n          </tbody>\n        </table>\n      </div>\n      <div class=\"tw-flex tw-justify-end tw-m-4\">\n        <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddInputClick()}>{this.strings.addInputButton}</button>\n      </div>\n    </div>\n  };\n\n  private renderOutputs = () => {\n    const outputs = this.outputsState;\n\n    return <div>\n      <div class=\"tw-p-4\">\n        <h3 class=\"tw-text-base tw-leading-6 tw-font-medium tw-text-gray-900\">{this.strings.outputLabel}</h3>\n      </div>\n      <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n        <table class=\"default-table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">{this.strings.outputName}</th>\n            <th scope=\"col\">{this.strings.outputType}</th>\n            <th scope=\"col\"/>\n          </tr>\n          </thead>\n          <tbody>\n          {outputs.map(output => {\n\n              const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == output.type);\n              const typeDisplayName = descriptor?.displayName ?? output.type;\n\n              return (\n                <tr>\n                  <td class=\"tw-whitespace-nowrap\">{output.name}</td>\n                  <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                  <td class=\"tw-pr-6\">\n                    <elsa-context-menu\n                      menuItems={[\n                        {text: this.strings.editButton, handler: e => this.onEditOutputClick(e, output), icon: <EditIcon/>},\n                        {text: this.strings.deleteButton, handler: e => this.onDeleteOutputClick(e, output), icon: <DeleteIcon/>},\n                      ]}\n                    />\n                  </td>\n                </tr>);\n            }\n          )}\n          </tbody>\n        </table>\n      </div>\n      <div class=\"tw-flex tw-justify-end tw-m-4\">\n        <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddOutputClick()}>{this.strings.addOutputButton}</button>\n      </div>\n    </div>\n  };\n\n  private renderOutcomes = () => {\n    const outcomes = [...this.outcomes];\n\n    return <div>\n      <div class=\"tw-p-4\">\n        <h3 class=\"tw-text-base tw-leading-6 tw-font-medium tw-text-gray-900\">{this.strings.labelOutcome}</h3>\n      </div>\n      <FormEntry label=\"\" fieldId=\"WorkflowDefinitionOutcomes\" hint={this.strings.outcomeHint}>\n        <elsa-input-tags placeHolder={this.strings.placeholderOutcome} values={outcomes} onValueChanged={e => this.onOutcomesChanged(e.detail)}/>\n      </FormEntry>\n    </div>\n  };\n\n  private getInputNameExists = (name: string): boolean => !!this.inputsState.find(x => x.name == name);\n  private getOutputNameExists = (name: string): boolean => !!this.outputsState.find(x => x.name == name);\n\n  private updateInputsState = (value: Array<InputDefinition>) => {\n    this.inputsState = value;\n    this.inputsChanged.emit(value);\n  };\n\n  private updateOutputsState = (value: Array<OutputDefinition>) => {\n    this.outputsState = value;\n    this.outputsChanged.emit(value);\n  };\n\n  private generateNewInputName = () => {\n    const inputs = this.inputsState;\n    let counter = inputs.length;\n\n    while (true) {\n      const newName = `Input${++counter}`;\n\n      if (!this.getInputNameExists(newName))\n        return newName;\n    }\n  };\n\n  private generateNewOutputName = () => {\n    const outputs = this.outputsState;\n    let counter = outputs.length;\n\n    while (true) {\n      const newName = `Output${++counter}`;\n\n      if (!this.getOutputNameExists(newName))\n        return newName;\n    }\n  };\n\n  private onAddInputClick = async () => {\n    const newName = this.generateNewInputName();\n    const input: InputDefinition = {name: newName, type: 'Object', displayName: newName, isArray: false};\n\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-input-editor-dialog-content input={input}/>, {actions: [this.inputSaveAction]})\n  };\n\n  private onAddOutputClick = async () => {\n    const newName = this.generateNewOutputName();\n    const output: OutputDefinition = {name: newName, type: 'Object', displayName: newName, isArray: false};\n\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-output-editor-dialog-content output={output}/>, {actions: [this.outputSaveAction]})\n  };\n\n  private onEditInputClick = async (e: Event, input: InputDefinition) => {\n    e.preventDefault();\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-input-editor-dialog-content input={input}/>, {actions: [this.inputSaveAction]});\n  };\n\n  private onEditOutputClick = async (e: Event, output: OutputDefinition) => {\n    e.preventDefault();\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-output-editor-dialog-content output={output}/>, {actions: [this.outputSaveAction]});\n  };\n\n  private onDeleteInputClick = (e: Event, input: InputDefinition) => {\n    e.preventDefault();\n    const inputs = this.inputsState.filter(x => x != input);\n    this.updateInputsState(inputs);\n  };\n\n  private onDeleteOutputClick = (e: Event, output: OutputDefinition) => {\n    e.preventDefault();\n    const outputs = this.outputsState.filter(x => x != output);\n    this.updateOutputsState(outputs);\n  };\n\n  private onInputDefinitionChanged = async (a: ModalActionClickArgs) => {\n    const updatedInput = await (a.instance.modalDialogContentRef as HTMLElsaActivityInputEditorDialogContentElement).getInput();\n    let inputs = this.inputsState;\n    const inputExists = !!inputs.find(x => x == updatedInput);\n\n    if (inputExists)\n      inputs = [...inputs];\n    else\n      inputs = [...inputs, updatedInput];\n\n    inputs = inputs.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    this.updateInputsState(inputs);\n  };\n\n  private onOutputDefinitionChanged = async (a: ModalActionClickArgs) => {\n    const updatedOutput = await (a.instance.modalDialogContentRef as HTMLElsaActivityOutputEditorDialogContentElement).getOutput();\n    let outputs = this.outputsState;\n    const outputExists = !!outputs.find(x => x == updatedOutput);\n\n    if (outputExists)\n      outputs = [...outputs];\n    else\n      outputs = [...outputs, updatedOutput];\n\n    outputs = outputs.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    this.updateOutputsState(outputs);\n  };\n\n  private onOutcomesChanged = (outcomes: Array<string>) => {\n    this.outcomesChanged.emit(outcomes);\n  }\n}\n","import {Component, Element, Event, EventEmitter, h, Prop, Watch} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../../services\";\nimport {WorkflowDefinition} from \"../../models/entities\";\nimport {WorkflowDefinitionsApi} from \"../../services/api\";\nimport {DeleteIcon, RevertIcon, PublishedIcon} from \"../../../../components/icons/tooling\";\nimport moment from \"moment\";\nimport {ModalDialogService, DefaultModalActions, DefaultContents, ModalType} from \"../../../../components/shared/modal-dialog\";\nimport { getLocaleComponentStrings } from '../../../../utils/locale';\n\n@Component({\n  tag: 'elsa-workflow-definition-version-history',\n})\nexport class WorkflowDefinitionVersionHistory {\n  private readonly eventBus: EventBus;\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\n  private readonly modalDialogService: ModalDialogService;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\n    this.modalDialogService = Container.get(ModalDialogService);\n  }\n\n  @Prop() selectedVersion: WorkflowDefinition;\n  @Prop() workflowVersions: Array<WorkflowDefinition>;\n  @Prop() serverUrl: string;\n  @Event() versionSelected: EventEmitter<WorkflowDefinition>;\n  @Event() deleteVersionClicked: EventEmitter<WorkflowDefinition>;\n  @Event() revertVersionClicked: EventEmitter<WorkflowDefinition>;\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n  }\n\n\n  onViewVersionClick = (e: Event, version: WorkflowDefinition) => {\n    e.preventDefault();\n    this.versionSelected.emit(version);\n  };\n\n  onDeleteVersionClick = async (e: Event, version: WorkflowDefinition) => {\n    e.preventDefault();\n    this.modalDialogService.show(\n      () => DefaultContents.Warning(\"Are you sure you want to delete this version?\"),\n      {\n        modalType: ModalType.Confirmation,\n        actions: [DefaultModalActions.Delete(() => this.deleteVersionClicked.emit(version)), DefaultModalActions.Cancel()]\n      });\n  };\n\n  onRevertVersionClick = (e: Event, version: WorkflowDefinition) => {\n    e.preventDefault();\n    this.revertVersionClicked.emit(version);\n  };\n\n  render() {\n    return (\n      <div>\n        <table>\n          <thead>\n          <tr>\n            <th/>\n            <th>{this.strings.version}</th>\n            <th>{this.strings.created}</th>\n            <th/>\n            <th/>\n          </tr>\n          </thead>\n          <tbody>\n          {this.workflowVersions.map(v => {\n              let menuItems = [];\n              menuItems.push({text: this.strings.delete, handler: e => this.onDeleteVersionClick(e, v), icon: <DeleteIcon/>});\n\n              if (!v.isLatest)\n                menuItems.push({text: this.strings.revert, handler: e => this.onRevertVersionClick(e, v), icon: <RevertIcon/>});\n\n              return (\n                <tr>\n                  <td>{v.isPublished ? <PublishedIcon/> : \"\"}</td>\n                  <td>{v.version}</td>\n                  <td>{moment(v.createdAt).format('DD-MM-YYYY HH:mm:ss')}</td>\n                  <td>\n                    <button onClick={e => this.onViewVersionClick(e, v)}\n                            type=\"button\"\n                            disabled={this.selectedVersion.version == v.version}\n                            class={this.selectedVersion.version == v.version ? \"elsa-btn elsa-btn-primary\" : \"elsa-btn elsa-btn-secondary\"}>\n                      {this.strings.view}\n                    </button>\n                  </td>\n                  <td>\n                    {v.isPublished || v.isPublished ? undefined : <elsa-context-menu menuItems={menuItems}/>}\n                  </td>\n                </tr>\n              );\n            }\n          )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n"],"mappings":"ueAEO,MAAMA,EAAkC,IAC7CC,EAAA,OAAKC,MAAM,iCAAiCC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,6BAA6BC,KAAK,OAAOC,OAAO,eAAc,eAAc,IAAG,iBAAgB,QAAO,kBAC9K,SACnBP,EAAA,QAAMO,OAAO,OAAOC,EAAE,kBACtBR,EAAA,QAAMQ,EAAE,+CCJL,MAAMC,EAAqC,IAChDT,EAAA,OAAKC,MAAM,iCAAiCC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,6BAA6BC,KAAK,OAAOC,OAAO,eAAc,eAAc,IAAG,iBAAgB,QAAO,kBAC9K,SACnBP,EAAA,yBAAqB,QAAO,kBAAiB,QAAO,eAAc,IAAIQ,EAAE,mD,MCS/DE,EAAgC,M,oEA8HnCC,KAAAC,SAAWC,MAAOC,IACxBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,OACf,MAAMC,EAAQP,KAAKQ,iBAAiBH,GACpCL,KAAKS,aAAaC,KAAKH,EAAM,EAGvBP,KAAAQ,iBAAoBH,IAC1B,MAAMM,EAAW,IAAIC,SAASP,GAC9B,MAAMQ,EAAOF,EAASG,IAAI,aAC1B,MAAMC,EAAcJ,EAASG,IAAI,oBACjC,MAAME,EAAOL,EAASG,IAAI,iBAC1B,MAAMG,EAAcN,EAASG,IAAI,oBACjC,MAAMI,EAAWP,EAASG,IAAI,iBAC9B,MAAMK,EAASR,EAASG,IAAI,eAC5B,MAAMM,EAAUT,EAASG,IAAI,kBAA8B,OAC3D,MAAMO,EAAaV,EAASG,IAAI,0BAChC,MAAMP,EAAQP,KAAKO,MAEnBA,EAAMM,KAAOA,EACbN,EAAMS,KAAOA,EACbT,EAAMQ,YAAcA,EACpBR,EAAMW,SAAWA,EACjBX,EAAMU,YAAcA,EACpBV,EAAMY,OAASA,EACfZ,EAAMa,QAAUA,EAChBb,EAAMe,kBAAoBC,EAAmBF,GAAc,KAAOA,EAElE,OAAOd,CAAK,E,qBAnJdL,iBACE,OAAOF,KAAKQ,iBAAiBR,KAAKwB,Y,CAMpCtB,0BACEF,KAAKyB,cAAgBC,EAA0B1B,KAAK2B,SACpDC,QAAQC,IAAI7B,KAAKyB,Q,CAGnBK,S,MACE,MAAMvB,GAAyBwB,EAAA/B,KAAKO,SAAK,MAAAwB,SAAA,EAAAA,EAAI,CAAClB,KAAM,GAAIG,KAAM,SAAUI,QAAS,OACjF,MAAMY,EAAgBzB,EAAMS,KAC5B,MAAMiB,EAA4CC,EAAiBC,oBACnE,MAAMC,EAAiDF,EAAiBE,eACxE,MAAMC,EAAeC,UAAQL,GAAgBM,GAAKA,EAAErB,WACpD,MAAMsB,EAAiBjC,EAAMY,OAG7B,MAAMsB,EAAU,CAAC,CACf5B,KAAM,cACN6B,MAAO,eACN,CACD7B,KAAM,aACN6B,MAAO,cACN,CACD7B,KAAM,WACN6B,MAAO,YACN,CACD7B,KAAM,aACN6B,MAAO,cACN,CACD7B,KAAM,aACN6B,MAAO,cACN,CACD7B,KAAM,WACN6B,MAAO,YACN,CACD7B,KAAM,aACN6B,MAAO,cACN,CACD7B,KAAM,cACN6B,MAAO,eACN,CACD7B,KAAM,kBACN6B,MAAO,mBACN,CACD7B,KAAM,cACN6B,MAAO,gBAIT,OACErD,EAAA,WACEA,EAAA,QAAMsD,IAAKC,GAAM5C,KAAKwB,YAAcoB,EAAItD,MAAM,4CAA4CW,SAAUE,GAAKH,KAAKC,SAASE,GAAI0C,OAAO,QAChIxD,EAAA,OAAKC,MAAM,WACTD,EAAA,MAAIC,MAAM,6CAA2C,IAAGU,KAAKyB,QAAQqB,wBACrEzD,EAAA,OAAKC,MAAM,gFAETD,EAAC0D,EAAS,CAACC,QAAQ,YAAYC,MAAOjD,KAAKyB,QAAQyB,UAAWC,KAAMnD,KAAKyB,QAAQ2B,eAC/E/D,EAAA,SAAO2B,KAAK,OAAOH,KAAK,YAAYwC,GAAG,YAAYX,MAAOnC,EAAMM,QAGlExB,EAAC0D,EAAS,CAACC,QAAQ,gBAAgBC,MAAOjD,KAAKyB,QAAQ6B,UAAWH,KAAMnD,KAAKyB,QAAQ8B,eACnFlE,EAAA,UAAQgE,GAAG,gBAAgBxC,KAAK,iBAC7B2C,OAAOC,KAAKpB,GAAcqB,KAAIxC,IAC7B,MAAMyC,EAAQtB,EAAanB,GAC3B,OAAQ7B,EAAA,YAAU4D,MAAO/B,GACtByC,EAAMD,KAAIE,GAAcvE,EAAA,UAAQqD,MAAOkB,EAAWC,SAAUC,SAAUF,EAAWC,UAAY7B,GAAgB4B,EAAW7C,eAChH,MAKjB1B,EAAC0E,EAAiB,CAACf,QAAQ,eAAeC,MAAOjD,KAAKyB,QAAQuC,gBAAiBb,KAAMnD,KAAKyB,QAAQwC,gBAChG5E,EAAA,SAAO2B,KAAK,WAAWH,KAAK,eAAewC,GAAG,eAAeX,MAAM,OAAOwB,QAAS3D,EAAMa,WAG3F/B,EAAC0D,EAAS,CAACC,QAAQ,mBAAmBC,MAAOjD,KAAKyB,QAAQ0C,iBAAkBhB,KAAMnD,KAAKyB,QAAQ2C,iBAC7F/E,EAAA,SAAO2B,KAAK,OAAOH,KAAK,mBAAmBwC,GAAG,mBAAmBX,MAAOnC,EAAMQ,eAGhF1B,EAAC0D,EAAS,CAACC,QAAQ,mBAAmBC,MAAOjD,KAAKyB,QAAQ4C,sBAAuBlB,KAAMnD,KAAKyB,QAAQ6C,sBAClGjF,EAAA,SAAO2B,KAAK,OAAOH,KAAK,mBAAmBwC,GAAG,mBAAmBX,MAAOnC,EAAMU,eAGhF5B,EAAC0D,EAAS,CAACC,QAAQ,gBAAgBC,MAAOjD,KAAKyB,QAAQ8C,mBAAoBpB,KAAMnD,KAAKyB,QAAQ+C,mBAC5FnF,EAAA,SAAO2B,KAAK,OAAOH,KAAK,gBAAgBwC,GAAG,gBAAgBX,MAAOnC,EAAMW,YAG1E7B,EAAC0D,EAAS,CAACC,QAAQ,cAAcC,MAAOjD,KAAKyB,QAAQgD,aAActB,KAAMnD,KAAKyB,QAAQiD,aACpFrF,EAAA,UAAQwB,KAAK,cAAcwC,GAAG,eAC3BZ,EAAQiB,KAAIvC,IACX,MAAMwD,EAAaxD,EAAOuB,OAASF,EACnC,OAAOnD,EAAA,UAAQqD,MAAOvB,EAAOuB,MAAOoB,SAAUa,GAAaxD,EAAON,KAAc,MAKtFxB,EAAC0D,EAAS,CAACC,QAAQ,yBAAyBC,MAAOjD,KAAKyB,QAAQmD,aAAczB,KAAMnD,KAAKyB,QAAQoD,aAC/FxF,EAAA,UAAQgE,GAAG,yBAAyBxC,KAAK,0BACtCuB,EAAesB,KAAIoB,IAClB,MAAMpC,EAAQoC,EAAOjB,SACrB,MAAMkB,EAAOD,EAAO/D,YACpB,MAAM+C,EAAWpB,GAASnC,EAAMe,kBAChC,OAAOjC,EAAA,UAAQqD,MAAOA,EAAOoB,SAAUA,GAAWiB,EAAc,S,sCCpHvEC,EAAiC,M,sEA8DpChF,KAAAC,SAAWC,MAAOC,IACxBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,OACf,MAAM2E,EAASjF,KAAKkF,kBAAkB7E,GACtCL,KAAKmF,cAAczE,KAAKuE,EAAO,EAGzBjF,KAAAkF,kBAAqB7E,IAC3B,MAAMM,EAAW,IAAIC,SAASP,GAC9B,MAAMQ,EAAOF,EAASG,IAAI,cAC1B,MAAMC,EAAcJ,EAASG,IAAI,qBACjC,MAAME,EAAOL,EAASG,IAAI,kBAC1B,MAAMG,EAAcN,EAASG,IAAI,qBACjC,MAAMmE,EAASjF,KAAKiF,OAEpBA,EAAOpE,KAAOA,EACdoE,EAAOjE,KAAOA,EACdiE,EAAOlE,YAAcA,EACrBkE,EAAOhE,YAAcA,EAErB,OAAOgE,CAAM,E,sBA3Ef/E,kBACE,OAAOF,KAAKkF,kBAAkBlF,KAAKwB,Y,CAMrCtB,0BACEF,KAAKyB,cAAgBC,EAA0B1B,KAAK2B,Q,CAItDG,S,MACE,MAAMmD,GAA2BlD,EAAA/B,KAAKiF,UAAM,MAAAlD,SAAA,EAAAA,EAAI,CAAClB,KAAM,GAAIG,KAAM,SAAUI,QAAS,OACpF,MAAMgE,EAAiBH,EAAOjE,KAC9B,MAAMiB,EAA4CC,EAAiBC,oBACnE,MAAME,EAAeC,UAAQL,GAAgBM,GAAKA,EAAErB,WAEpD,OACE7B,EAAA,WACEA,EAAA,QAAMsD,IAAKC,GAAM5C,KAAKwB,YAAcoB,EAAItD,MAAM,4CAA4CW,SAAUE,GAAKH,KAAKC,SAASE,GAAI0C,OAAO,QAChIxD,EAAA,OAAKC,MAAM,WACTD,EAAA,MAAIC,MAAM,6CAA6CU,KAAKyB,QAAQ4D,sBACpEhG,EAAA,OAAKC,MAAM,gFAETD,EAAC0D,EAAS,CAACC,QAAQ,aAAaC,MAAOjD,KAAKyB,QAAQ6D,WAAYnC,KAAMnD,KAAKyB,QAAQ8D,gBACjFlG,EAAA,SAAO2B,KAAK,OAAOH,KAAK,aAAawC,GAAG,aAAaX,MAAOuC,EAAOpE,QAGrExB,EAAC0D,EAAS,CAACC,QAAQ,iBAAiBC,MAAOjD,KAAKyB,QAAQ+D,WAAYrC,KAAMnD,KAAKyB,QAAQgE,gBACrFpG,EAAA,UAAQgE,GAAG,iBAAiBxC,KAAK,kBAC9B2C,OAAOC,KAAKpB,GAAcqB,KAAIxC,IAC7B,MAAMyC,EAAQtB,EAAanB,GAC3B,OAAQ7B,EAAA,YAAU4D,MAAO/B,GACtByC,EAAMD,KAAIE,GAAcvE,EAAA,UAAQqD,MAAOkB,EAAWC,SAAUC,SAAUF,EAAWC,UAAYuB,GAAiBxB,EAAW7C,eACjH,MAKjB1B,EAAC0D,EAAS,CAACC,QAAQ,oBAAoBC,MAAOjD,KAAKyB,QAAQiE,kBAAmBvC,KAAMnD,KAAKyB,QAAQkE,uBAC/FtG,EAAA,SAAO2B,KAAK,OAAOH,KAAK,oBAAoBwC,GAAG,oBAAoBX,MAAOuC,EAAOlE,eAGnF1B,EAAC0D,EAAS,CAACC,QAAQ,oBAAoBC,MAAOjD,KAAKyB,QAAQmE,kBAAmBzC,KAAMnD,KAAKyB,QAAQoE,uBAC/FxG,EAAA,SAAO2B,KAAK,OAAOH,KAAK,oBAAoBwC,GAAG,oBAAoBX,MAAOuC,EAAOhE,kB,sCCnDpF6E,EAA2B,M,0EA0E9B9F,KAAAC,SAAWC,MAAOC,IACxBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,OACf,MAAMyF,EAAW/F,KAAKgG,oBAAoB3F,GAC1CL,KAAKiG,gBAAgBvF,KAAKqF,EAAS,EAG7B/F,KAAAgG,oBAAuB3F,IAC7B,MAAMM,EAAW,IAAIC,SAASP,GAC9B,MAAMQ,EAAOF,EAASG,IAAI,gBAC1B,MAAM4B,EAAQ/B,EAASG,IAAI,iBAC3B,MAAME,EAAOL,EAASG,IAAI,oBAC1B,MAAMM,EAAUT,EAASG,IAAI,oBAAgC,OAC7D,MAAMoF,EAAiBvF,EAASG,IAAI,iCACpC,MAAMiF,EAAW/F,KAAK+F,SAEtB,GAAIxE,EAAmBwE,EAAS1C,IAC9B0C,EAAS1C,GAAK8C,IAEhBJ,EAASlF,KAAOA,EAChBkF,EAASlC,SAAW7C,EACpB+E,EAASrD,MAAQA,EACjBqD,EAAS3E,QAAUA,EACnB2E,EAASK,sBAAwB7E,EAAmB2E,GAAkB,KAAOA,EAE7E,OAAOH,CAAQ,E,wBA5FjB7F,oBACE,OAAOF,KAAKgG,oBAAoBhG,KAAKwB,Y,CAMvCtB,0BACEF,KAAKyB,cAAgBC,EAA0B1B,KAAK2B,SACpDC,QAAQC,IAAI7B,KAAKyB,Q,CAGnBK,S,MACE,MAAMiE,GAAqBhE,EAAA/B,KAAK+F,YAAQ,MAAAhE,SAAA,EAAAA,EAAI,CAACsB,GAAI,GAAIxC,KAAM,GAAIgD,SAAU,SAAUzC,QAAS,OAC5F,MAAMiF,EAAmBN,EAASlC,SAClC,MAAM5B,EAA4CC,EAAiBC,oBACnE,MAAMmE,EAAuBhE,UAAQL,GAAgBM,GAAKA,EAAErB,WAC5D,MAAMkB,EAAiDF,EAAiBE,eAExE,OACE/C,EAAA,WACEA,EAAA,QAAMsD,IAAKC,GAAM5C,KAAKwB,YAAcoB,EAAItD,MAAM,4CAA4CW,SAAUE,GAAKH,KAAKC,SAASE,GAAI0C,OAAO,QAChIxD,EAAA,OAAKC,MAAM,WACTD,EAAA,MAAIC,MAAM,6CAA6CU,KAAKyB,QAAQ8E,cACpElH,EAAA,OAAKC,MAAM,gFAETD,EAAC0D,EAAS,CAACC,QAAQ,eAAeC,MAAOjD,KAAKyB,QAAQ+E,UAAWrD,KAAMnD,KAAKyB,QAAQgF,UAClFpH,EAAA,SAAO2B,KAAK,OAAOH,KAAK,eAAewC,GAAG,eAAeX,MAAOqD,EAASlF,QAG3ExB,EAAC0D,EAAS,CAACC,QAAQ,mBAAmBC,MAAOjD,KAAKyB,QAAQiF,UAAWvD,KAAMnD,KAAKyB,QAAQkF,UACtFtH,EAAA,UAAQgE,GAAG,mBAAmBxC,KAAK,oBAChC2C,OAAOC,KAAK6C,GAAsB5C,KAAIxC,IACrC,MAAM0F,EAAgBN,EAAqBpF,GAC3C,OAAQ7B,EAAA,YAAU4D,MAAO/B,GACtB0F,EAAclD,KAAIE,GAAcvE,EAAA,UAAQqD,MAAOkB,EAAWC,SAAUC,SAAUF,EAAWC,UAAYwC,GAAmBzC,EAAW7C,eAC3H,MAKjB1B,EAAC0E,EAAiB,CAACf,QAAQ,kBAAkBC,MAAOjD,KAAKyB,QAAQoF,WAAY1D,KAAMnD,KAAKyB,QAAQqF,WAC9FzH,EAAA,SAAO2B,KAAK,WAAWH,KAAK,kBAAkBwC,GAAG,kBAAkBX,MAAM,OAAOwB,QAAS6B,EAAS3E,WAGpG/B,EAAC0D,EAAS,CAACC,QAAQ,gBAAgBC,MAAOjD,KAAKyB,QAAQsF,WAAY5D,KAAMnD,KAAKyB,QAAQuF,WACpF3H,EAAA,SAAO2B,KAAK,OAAOH,KAAK,gBAAgBwC,GAAG,gBAAgBX,MAAOqD,EAASrD,SAG7ErD,EAAC0D,EAAS,CAACC,QAAQ,0BAA0BC,MAAOjD,KAAKyB,QAAQwF,aAAc9D,KAAMnD,KAAKyB,QAAQoD,aAChGxF,EAAA,UAAQgE,GAAG,gCAAgCxC,KAAK,iCAC7CuB,EAAesB,KAAIoB,IAClB,MAAMpC,EAAQoC,EAAOjB,SACrB,MAAMkB,EAAOD,EAAO/D,YACpB,MAAM+C,EAAWpB,GAASqD,EAASK,sBACnC,OAAO/G,EAAA,UAAQqD,MAAOA,EAAOoB,SAAUA,GAAWiB,EAAc,S,sCC/DvEmC,EAAe,MAQ1BC,YAAAC,G,6DA2EQpH,KAAAqH,sBAAyBxG,KAA4Bb,KAAKsH,UAAUC,MAAKhF,GAAKA,EAAE1B,MAAQA,IAExFb,KAAAwH,qBAAwB9E,IAC9B1C,KAAKyH,eAAiB/E,EACtB1C,KAAK0H,iBAAiBhH,KAAKgC,EAAM,EAG3B1C,KAAA2H,wBAA0B,KAChC,MAAML,EAAYtH,KAAKsH,UACvB,IAAIM,EAAUN,EAAUO,OAExB,MAAO,KAAM,CACX,MAAMC,EAAkB,aAAaF,IAErC,IAAK5H,KAAKqH,sBAAsBS,GAC9B,OAAOA,C,GAIL9H,KAAA+H,mBAAqB7H,UAC3B,MAAM4H,EAAkB9H,KAAK2H,0BAC7B,MAAM5B,EAAqB,CAAC1C,GAAI,GAAIxC,KAAMiH,EAAiBjE,SAAU,SAAUnB,MAAO,KAAMtB,QAAS,OAErGpB,KAAKgI,oBAAsBhI,KAAKiI,mBAAmBC,MAAK,IAAM7I,EAAA,uCAAqC0G,SAAUA,KAAa,CAACoC,QAAS,CAACnI,KAAKoI,aAAa,EAGjJpI,KAAAqI,YAAcnI,MAAOC,EAAU4F,KACrC5F,EAAEC,iBACFJ,KAAKgI,oBAAsBhI,KAAKiI,mBAAmBC,MAAK,IAAM7I,EAAA,uCAAqC0G,SAAUA,KAAa,CAACoC,QAAS,CAACnI,KAAKoI,aAAa,EAGjJpI,KAAAsI,cAAgB,CAACnI,EAAU4F,KACjC5F,EAAEC,iBACF,MAAMkH,EAAYtH,KAAKsH,UAAUiB,QAAOhG,GAAKA,GAAKwD,IAClD/F,KAAKwH,qBAAqBF,EAAU,EAG9BtH,KAAAwI,kBAAoBtI,MAAOuI,IACjC,MAAMC,QAAyBD,EAAEE,SAASC,sBAAqEC,cAC/G,IAAIvB,EAAYtH,KAAKsH,UACrB,MAAMwB,IAAmBxB,EAAUC,MAAKhF,GAAKA,GAAKmG,IAElD,GAAII,EACFxB,EAAY,IAAIA,QAEhBA,EAAY,IAAIA,EAAWoB,GAE7BpB,EAAYA,EAAUyB,MAAK,CAACN,EAAGO,IAAMP,EAAE5H,KAAOmI,EAAEnI,MAAQ,EAAI4H,EAAE5H,KAAOmI,EAAEnI,KAAO,EAAI,IAElFb,KAAKwH,qBAAqBF,EAAU,E,6CA9GK,GAbzCtH,KAAKiI,mBAAqBgB,EAAUnI,IAAIoI,GAExClJ,KAAKoI,WAAa,CAChBvH,KAAM,OACNG,KAAMmI,EAAgBC,OACtBrE,KAAM,OACNsE,UAAW,KACXC,QAAStJ,KAAKwI,kB,CASlBe,uBAAuB7G,GACrB1C,KAAKyH,iBAAmBzH,KAAKsH,UAAY,IAAItH,KAAKsH,WAAa,E,CAGjEpH,0BACEF,KAAKyB,cAAgBC,EAA0B1B,KAAK2B,SACpD3B,KAAKuJ,uBAAuBvJ,KAAKsH,U,CAGnCxF,SACE,MAAMwF,EAAYtH,KAAKsH,UACvB,MAAMlF,EAAiDF,EAAiBE,eAExE,OACE/C,EAAA,WACEA,EAAA,OAAKC,MAAM,iCACTD,EAAA,UAAQC,MAAM,4BAA4BgK,QAASnJ,GAAKH,KAAK+H,sBAAoB,iBAEnF1I,EAAA,OAAKC,MAAM,gFACTD,EAAA,SAAOC,MAAM,iBACXD,EAAA,aACAA,EAAA,UACEA,EAAA,MAAImK,MAAM,OAAOxJ,KAAKyB,QAAQgI,WAC9BpK,EAAA,MAAImK,MAAM,OAAOxJ,KAAKyB,QAAQiI,YAC9BrK,EAAA,MAAImK,MAAM,OAAOxJ,KAAKyB,QAAQkI,cAC9BtK,EAAA,MAAImK,MAAM,UAGZnK,EAAA,aACCiI,EAAU5D,KAAIqC,I,QACX,MAAM6D,EAAUxH,EAAemF,MAAKhF,GAAKA,EAAEsB,UAAYkC,EAASK,wBAChE,MAAMyD,GAAc9H,EAAA6H,IAAO,MAAPA,SAAO,SAAPA,EAAS7I,eAAW,MAAAgB,SAAA,EAAAA,EAAI,IAC5C,MAAM6B,EAAa1B,EAAiBC,oBAAoBoF,MAAKhF,GAAKA,EAAEsB,UAAYkC,EAASlC,WACzF,MAAMiG,GAAkBC,EAAAnG,IAAU,MAAVA,SAAU,SAAVA,EAAY7C,eAAW,MAAAgJ,SAAA,EAAAA,EAAIhE,EAASlC,SAE5D,OACExE,EAAA,UACEA,EAAA,MAAIC,MAAM,wBAAwByG,EAASlF,MAC3CxB,EAAA,MAAIC,MAAM,wBAAwBwK,GAClCzK,EAAA,UAAKwK,GACLxK,EAAA,MAAIC,MAAM,WACRD,EAAA,qBACE2K,UAAW,CACT,CAACjF,KAAM/E,KAAKyB,QAAQwI,mBAAoBC,QAAS/J,GAAKH,KAAKqI,YAAYlI,EAAG4F,GAAWoE,KAAM9K,EAAC+K,EAAQ,OACpG,CAACrF,KAAM/E,KAAKyB,QAAQ4I,qBAAsBH,QAAS/J,GAAKH,KAAKsI,cAAcnI,EAAG4F,GAAWoE,KAAM9K,EAACiL,EAAU,WAI7G,O,yGCvEVC,EAAO,M,sCACe,E,CAE1BzI,SACL,MAAM0I,EAAUxK,KAAKwK,QAAQzB,MAAK,CAACN,EAAGO,IAAMP,EAAEgC,MAAQzB,EAAEyB,OAAS,EAAIhC,EAAEgC,MAAQzB,EAAEyB,MAAQ,EAAI,IAE7F,OAAOpL,EAAA,WACJmL,EAAQ9G,KAAIgH,GAAUA,EAAOC,Y,SCRvBC,EAAmB,MAW9BzD,YAAAC,G,uJAwDQpH,KAAA6K,aAAe,KACrB,MAAMC,EAAS9K,KAAK+K,YAEpB,OAAO1L,EAAA,WACLA,EAAA,OAAKC,MAAM,UACTD,EAAA,MAAIC,MAAM,6DAA6DU,KAAKyB,QAAQuJ,cAEtF3L,EAAA,OAAKC,MAAM,gFACTD,EAAA,SAAOC,MAAM,iBACXD,EAAA,aACAA,EAAA,UACEA,EAAA,MAAImK,MAAM,OAAOxJ,KAAKyB,QAAQyB,WAC9B7D,EAAA,MAAImK,MAAM,OAAOxJ,KAAKyB,QAAQ6B,WAC9BjE,EAAA,MAAImK,MAAM,UAGZnK,EAAA,aACCyL,EAAOpH,KAAInD,I,MAER,MAAMqD,EAAa1B,EAAiBC,oBAAoBoF,MAAKhF,GAAKA,EAAEsB,UAAYtD,EAAMS,OACtF,MAAM8I,GAAkB/H,EAAA6B,IAAU,MAAVA,SAAU,SAAVA,EAAY7C,eAAW,MAAAgB,SAAA,EAAAA,EAAIxB,EAAMS,KAEzD,OACE3B,EAAA,UACEA,EAAA,MAAIC,MAAM,wBAAwBiB,EAAMM,MACxCxB,EAAA,MAAIC,MAAM,wBAAwBwK,GAClCzK,EAAA,MAAIC,MAAM,WACRD,EAAA,qBACE2K,UAAW,CACT,CAACjF,KAAM/E,KAAKyB,QAAQwJ,WAAYf,QAAS/J,GAAKH,KAAKkL,iBAAiB/K,EAAGI,GAAQ4J,KAAM9K,EAAC+K,EAAQ,OAC9F,CAACrF,KAAM/E,KAAKyB,QAAQ0J,aAAcjB,QAAS/J,GAAKH,KAAKoL,mBAAmBjL,EAAGI,GAAQ4J,KAAM9K,EAACiL,EAAU,WAIvG,OAMfjL,EAAA,OAAKC,MAAM,iCACTD,EAAA,UAAQC,MAAM,4BAA4BgK,QAASnJ,GAAKH,KAAKqL,mBAAoBrL,KAAKyB,QAAQ6J,iBAE5F,EAGAtL,KAAAuL,cAAgB,KACtB,MAAMC,EAAUxL,KAAKyL,aAErB,OAAOpM,EAAA,WACLA,EAAA,OAAKC,MAAM,UACTD,EAAA,MAAIC,MAAM,6DAA6DU,KAAKyB,QAAQiK,cAEtFrM,EAAA,OAAKC,MAAM,gFACTD,EAAA,SAAOC,MAAM,iBACXD,EAAA,aACAA,EAAA,UACEA,EAAA,MAAImK,MAAM,OAAOxJ,KAAKyB,QAAQ6D,YAC9BjG,EAAA,MAAImK,MAAM,OAAOxJ,KAAKyB,QAAQ+D,YAC9BnG,EAAA,MAAImK,MAAM,UAGZnK,EAAA,aACCmM,EAAQ9H,KAAIuB,I,MAET,MAAMrB,EAAa1B,EAAiBC,oBAAoBoF,MAAKhF,GAAKA,EAAEsB,UAAYoB,EAAOjE,OACvF,MAAM8I,GAAkB/H,EAAA6B,IAAU,MAAVA,SAAU,SAAVA,EAAY7C,eAAW,MAAAgB,SAAA,EAAAA,EAAIkD,EAAOjE,KAE1D,OACE3B,EAAA,UACEA,EAAA,MAAIC,MAAM,wBAAwB2F,EAAOpE,MACzCxB,EAAA,MAAIC,MAAM,wBAAwBwK,GAClCzK,EAAA,MAAIC,MAAM,WACRD,EAAA,qBACE2K,UAAW,CACT,CAACjF,KAAM/E,KAAKyB,QAAQwJ,WAAYf,QAAS/J,GAAKH,KAAK2L,kBAAkBxL,EAAG8E,GAASkF,KAAM9K,EAAC+K,EAAQ,OAChG,CAACrF,KAAM/E,KAAKyB,QAAQ0J,aAAcjB,QAAS/J,GAAKH,KAAK4L,oBAAoBzL,EAAG8E,GAASkF,KAAM9K,EAACiL,EAAU,WAIzG,OAMfjL,EAAA,OAAKC,MAAM,iCACTD,EAAA,UAAQC,MAAM,4BAA4BgK,QAASnJ,GAAKH,KAAK6L,oBAAqB7L,KAAKyB,QAAQqK,kBAE7F,EAGA9L,KAAA+L,eAAiB,KACvB,MAAMC,EAAW,IAAIhM,KAAKgM,UAE1B,OAAO3M,EAAA,WACLA,EAAA,OAAKC,MAAM,UACTD,EAAA,MAAIC,MAAM,6DAA6DU,KAAKyB,QAAQwK,eAEtF5M,EAAC0D,EAAS,CAACE,MAAM,GAAGD,QAAQ,6BAA6BG,KAAMnD,KAAKyB,QAAQyK,aAC1E7M,EAAA,mBAAiB8M,YAAanM,KAAKyB,QAAQ2K,mBAAoBC,OAAQL,EAAUM,eAAgBnM,GAAKH,KAAKuM,kBAAkBpM,EAAEqM,WAE7H,EAGAxM,KAAAyM,mBAAsB5L,KAA4Bb,KAAK+K,YAAYxD,MAAKhF,GAAKA,EAAE1B,MAAQA,IACvFb,KAAA0M,oBAAuB7L,KAA4Bb,KAAKyL,aAAalE,MAAKhF,GAAKA,EAAE1B,MAAQA,IAEzFb,KAAA2M,kBAAqBjK,IAC3B1C,KAAK+K,YAAcrI,EACnB1C,KAAK4M,cAAclM,KAAKgC,EAAM,EAGxB1C,KAAA6M,mBAAsBnK,IAC5B1C,KAAKyL,aAAe/I,EACpB1C,KAAK8M,eAAepM,KAAKgC,EAAM,EAGzB1C,KAAA+M,qBAAuB,KAC7B,MAAMjC,EAAS9K,KAAK+K,YACpB,IAAInD,EAAUkD,EAAOjD,OAErB,MAAO,KAAM,CACX,MAAMmF,EAAU,UAAUpF,IAE1B,IAAK5H,KAAKyM,mBAAmBO,GAC3B,OAAOA,C,GAILhN,KAAAiN,sBAAwB,KAC9B,MAAMzB,EAAUxL,KAAKyL,aACrB,IAAI7D,EAAU4D,EAAQ3D,OAEtB,MAAO,KAAM,CACX,MAAMmF,EAAU,WAAWpF,IAE3B,IAAK5H,KAAK0M,oBAAoBM,GAC5B,OAAOA,C,GAILhN,KAAAqL,gBAAkBnL,UACxB,MAAM8M,EAAUhN,KAAK+M,uBACrB,MAAMxM,EAAyB,CAACM,KAAMmM,EAAShM,KAAM,SAAUD,YAAaiM,EAAS5L,QAAS,OAE9FpB,KAAKgI,oBAAsBhI,KAAKiI,mBAAmBC,MAAK,IAAM7I,EAAA,6CAA2CkB,MAAOA,KAAU,CAAC4H,QAAS,CAACnI,KAAKkN,kBAAkB,EAGtJlN,KAAA6L,iBAAmB3L,UACzB,MAAM8M,EAAUhN,KAAKiN,wBACrB,MAAMhI,EAA2B,CAACpE,KAAMmM,EAAShM,KAAM,SAAUD,YAAaiM,EAAS5L,QAAS,OAEhGpB,KAAKgI,oBAAsBhI,KAAKiI,mBAAmBC,MAAK,IAAM7I,EAAA,8CAA4C4F,OAAQA,KAAW,CAACkD,QAAS,CAACnI,KAAKmN,mBAAmB,EAG1JnN,KAAAkL,iBAAmBhL,MAAOC,EAAUI,KAC1CJ,EAAEC,iBACFJ,KAAKgI,oBAAsBhI,KAAKiI,mBAAmBC,MAAK,IAAM7I,EAAA,6CAA2CkB,MAAOA,KAAU,CAAC4H,QAAS,CAACnI,KAAKkN,kBAAkB,EAGtJlN,KAAA2L,kBAAoBzL,MAAOC,EAAU8E,KAC3C9E,EAAEC,iBACFJ,KAAKgI,oBAAsBhI,KAAKiI,mBAAmBC,MAAK,IAAM7I,EAAA,8CAA4C4F,OAAQA,KAAW,CAACkD,QAAS,CAACnI,KAAKmN,mBAAmB,EAG1JnN,KAAAoL,mBAAqB,CAACjL,EAAUI,KACtCJ,EAAEC,iBACF,MAAM0K,EAAS9K,KAAK+K,YAAYxC,QAAOhG,GAAKA,GAAKhC,IACjDP,KAAK2M,kBAAkB7B,EAAO,EAGxB9K,KAAA4L,oBAAsB,CAACzL,EAAU8E,KACvC9E,EAAEC,iBACF,MAAMoL,EAAUxL,KAAKyL,aAAalD,QAAOhG,GAAKA,GAAK0C,IACnDjF,KAAK6M,mBAAmBrB,EAAQ,EAG1BxL,KAAAoN,yBAA2BlN,MAAOuI,IACxC,MAAM4E,QAAsB5E,EAAEE,SAASC,sBAA0E0E,WACjH,IAAIxC,EAAS9K,KAAK+K,YAClB,MAAMwC,IAAgBzC,EAAOvD,MAAKhF,GAAKA,GAAK8K,IAE5C,GAAIE,EACFzC,EAAS,IAAIA,QAEbA,EAAS,IAAIA,EAAQuC,GAEvBvC,EAASA,EAAO/B,MAAK,CAACN,EAAGO,IAAMP,EAAE5H,KAAOmI,EAAEnI,MAAQ,EAAI4H,EAAE5H,KAAOmI,EAAEnI,KAAO,EAAI,IAE5Eb,KAAK2M,kBAAkB7B,EAAO,EAGxB9K,KAAAwN,0BAA4BtN,MAAOuI,IACzC,MAAMgF,QAAuBhF,EAAEE,SAASC,sBAA2E8E,YACnH,IAAIlC,EAAUxL,KAAKyL,aACnB,MAAMkC,IAAiBnC,EAAQjE,MAAKhF,GAAKA,GAAKkL,IAE9C,GAAIE,EACFnC,EAAU,IAAIA,QAEdA,EAAU,IAAIA,EAASiC,GAEzBjC,EAAUA,EAAQzC,MAAK,CAACN,EAAGO,IAAMP,EAAE5H,KAAOmI,EAAEnI,MAAQ,EAAI4H,EAAE5H,KAAOmI,EAAEnI,KAAO,EAAI,IAE9Eb,KAAK6M,mBAAmBrB,EAAQ,EAG1BxL,KAAAuM,kBAAqBP,IAC3BhM,KAAK4N,gBAAgBlN,KAAKsL,EAAS,E,sFA/OU,G,kBACE,GA1B/ChM,KAAKiI,mBAAqBgB,EAAUnI,IAAIoI,GAExClJ,KAAKkN,gBAAkB,CACrBrM,KAAM,OACNG,KAAMmI,EAAgBC,OACtBrE,KAAM,OACNsE,UAAW,KACXC,QAAStJ,KAAKoN,0BAGhBpN,KAAKmN,iBAAmB,CACtBtM,KAAM,OACNG,KAAMmI,EAAgBC,OACtBrE,KAAM,OACNsE,UAAW,KACXC,QAAStJ,KAAKwN,0B,CAclBK,oBAAoBnL,GAClB1C,KAAK+K,cAAgB/K,KAAK8K,OAAS,IAAI9K,KAAK8K,QAAU,E,CAIxDgD,qBAAqBpL,GACnB1C,KAAKyL,eAAiBzL,KAAKwL,QAAU,IAAIxL,KAAKwL,SAAW,E,CAG3DtL,0BACEF,KAAKyB,cAAgBC,EAA0B1B,KAAK2B,SACpD3B,KAAK6N,oBAAoB7N,KAAK8K,QAC9B9K,KAAK8N,qBAAqB9N,KAAKwL,Q,CAGjC1J,SAEE,OACEzC,EAAA,WACGW,KAAK6K,eACL7K,KAAKuL,gBACLvL,KAAK+L,iB,oIC9DDgC,EAAgC,MAK3C5G,YAAAC,G,iLAqBApH,KAAAgO,mBAAqB,CAAC7N,EAAU8N,KAC9B9N,EAAEC,iBACFJ,KAAKkO,gBAAgBxN,KAAKuN,EAAQ,EAGpCjO,KAAAmO,qBAAuBjO,MAAOC,EAAU8N,KACtC9N,EAAEC,iBACFJ,KAAKiI,mBAAmBC,MACtB,IAAMkG,EAAgBC,QAAQ,kDAC9B,CACEC,UAAWC,EAAUC,aACrBrG,QAAS,CAACsG,EAAoBC,QAAO,IAAM1O,KAAK2O,qBAAqBjO,KAAKuN,KAAWQ,EAAoBG,WACzG,EAGN5O,KAAA6O,qBAAuB,CAAC1O,EAAU8N,KAChC9N,EAAEC,iBACFJ,KAAK8O,qBAAqBpO,KAAKuN,EAAQ,E,wFArCvCjO,KAAK+O,SAAW9F,EAAUnI,IAAIkO,GAC9BhP,KAAKiP,sBAAwBhG,EAAUnI,IAAIoO,GAC3ClP,KAAKiI,mBAAqBgB,EAAUnI,IAAIoI,E,CAa1ChJ,0BACEF,KAAKyB,cAAgBC,EAA0B1B,KAAK2B,Q,CAwBtDG,SACE,OACEzC,EAAA,WACEA,EAAA,aACEA,EAAA,aACAA,EAAA,UACEA,EAAA,WACAA,EAAA,UAAKW,KAAKyB,QAAQwM,SAClB5O,EAAA,UAAKW,KAAKyB,QAAQ0N,SAClB9P,EAAA,WACAA,EAAA,aAGFA,EAAA,aACCW,KAAKoP,iBAAiB1L,KAAI2L,IACvB,IAAIrF,EAAY,GAChBA,EAAUsF,KAAK,CAACvK,KAAM/E,KAAKyB,QAAQ8N,OAAQrF,QAAS/J,GAAKH,KAAKmO,qBAAqBhO,EAAGkP,GAAIlF,KAAM9K,EAACiL,EAAU,QAE3G,IAAK+E,EAAEG,SACLxF,EAAUsF,KAAK,CAACvK,KAAM/E,KAAKyB,QAAQgO,OAAQvF,QAAS/J,GAAKH,KAAK6O,qBAAqB1O,EAAGkP,GAAIlF,KAAM9K,EAACD,EAAU,QAE7G,OACEC,EAAA,UACEA,EAAA,UAAKgQ,EAAEK,YAAcrQ,EAACS,EAAa,MAAK,IACxCT,EAAA,UAAKgQ,EAAEpB,SACP5O,EAAA,UAAKsQ,EAAON,EAAEO,WAAWC,OAAO,wBAChCxQ,EAAA,UACEA,EAAA,UAAQiK,QAASnJ,GAAKH,KAAKgO,mBAAmB7N,EAAGkP,GACzCrO,KAAK,SACL8O,SAAU9P,KAAK+P,gBAAgB9B,SAAWoB,EAAEpB,QAC5C3O,MAAOU,KAAK+P,gBAAgB9B,SAAWoB,EAAEpB,QAAU,4BAA8B,+BACtFjO,KAAKyB,QAAQuO,OAGlB3Q,EAAA,UACGgQ,EAAEK,aAAeL,EAAEK,YAAcO,UAAY5Q,EAAA,qBAAmB2K,UAAWA,KAE3E,M"}