{"version":3,"names":["CodeEditorInput","this","onChange","e","value","detail","inputContext","inputChanged","SyntaxNames","Literal","render","inputDescriptor","fieldId","name","displayName","hint","description","options","defaultValue","input","getInputPropertyValue","getValueOrDefault","_a","expression","undefined","h","FormEntry","label","Object","assign","onValueChanged"],"sources":["./src/components/inputs/code-editor.tsx"],"sourcesContent":["import {Component, h, Prop} from '@stencil/core';\nimport {EditorHeight, LiteralExpression, SyntaxNames} from \"../../models\";\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\nimport {getInputPropertyValue} from \"../../utils\";\nimport {MonacoValueChangedArgs} from \"../shared/monaco-editor/monaco-editor\";\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\nimport {FormEntry} from \"../shared/forms/form-entry\";\n\ninterface CodeEditorOptions {\n  editorHeight?: EditorHeight;\n  language?: string;\n  singleLineMode?: boolean;\n}\n\n@Component({\n  tag: 'elsa-code-editor-input',\n  shadow: false\n})\nexport class CodeEditorInput {\n  @Prop() public inputContext: ActivityInputContext;\n\n  public render() {\n    const inputContext = this.inputContext;\n    const inputDescriptor = inputContext.inputDescriptor;\n    const fieldId = inputDescriptor.name;\n    const displayName = inputDescriptor.displayName;\n    const hint = inputDescriptor.description;\n    const options: CodeEditorOptions = inputDescriptor.options || {};\n    const defaultValue = inputDescriptor.defaultValue;\n    const input = getInputPropertyValue(inputContext);\n    let value = this.getValueOrDefault((input?.expression as LiteralExpression)?.value, defaultValue);\n\n    if (value == undefined)\n      value = inputDescriptor.defaultValue;\n\n    return (\n      <FormEntry label={displayName} fieldId={fieldId} hint={hint}>\n        <elsa-monaco-editor value={value} {...options} onValueChanged={this.onChange}/>\n      </FormEntry>\n    );\n  }\n\n  private onChange = (e: CustomEvent<MonacoValueChangedArgs>) => {\n    const value = e.detail.value;\n    this.inputContext.inputChanged(value, SyntaxNames.Literal);\n  }\n\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\n    return value ?? defaultValue ?? '';\n  }\n}\n"],"mappings":"wSAkBaA,EAAe,M,yBAwBlBC,KAAAC,SAAYC,IAClB,MAAMC,EAAQD,EAAEE,OAAOD,MACvBH,KAAKK,aAAaC,aAAaH,EAAOI,EAAYC,QAAQ,E,4BAvBrDC,S,MACL,MAAMJ,EAAeL,KAAKK,aAC1B,MAAMK,EAAkBL,EAAaK,gBACrC,MAAMC,EAAUD,EAAgBE,KAChC,MAAMC,EAAcH,EAAgBG,YACpC,MAAMC,EAAOJ,EAAgBK,YAC7B,MAAMC,EAA6BN,EAAgBM,SAAW,GAC9D,MAAMC,EAAeP,EAAgBO,aACrC,MAAMC,EAAQC,EAAsBd,GACpC,IAAIF,EAAQH,KAAKoB,mBAAkBC,EAACH,IAAK,MAALA,SAAK,SAALA,EAAOI,cAAgC,MAAAD,SAAA,SAAAA,EAAElB,MAAOc,GAEpF,GAAId,GAASoB,UACXpB,EAAQO,EAAgBO,aAE1B,OACEO,EAACC,EAAS,CAACC,MAAOb,EAAaF,QAASA,EAASG,KAAMA,GACrDU,EAAA,qBAAAG,OAAAC,OAAA,CAAoBzB,MAAOA,GAAWa,EAAO,CAAEa,eAAgB7B,KAAKC,Y,CAUlEmB,kBAAkBjB,EAA2Bc,G,MACnD,OAAOI,EAAAlB,IAAK,MAALA,SAAK,EAALA,EAASc,KAAY,MAAAI,SAAA,EAAAA,EAAI,E"}