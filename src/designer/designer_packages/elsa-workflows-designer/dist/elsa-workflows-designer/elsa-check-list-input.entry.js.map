{"file":"elsa-check-list-input.entry.esm.js","mappings":"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","names":["uniq"],"sources":["./src/components/inputs/check-list.tsx"],"sourcesContent":["import {Component, h, Prop, State} from '@stencil/core';\r\nimport {uniq} from 'lodash'\r\nimport {ObjectExpression, SelectList, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getSelectListItems, getInputPropertyValue, parseJson, getObjectOrParseJson} from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-check-list-input',\r\n  shadow: false\r\n})\r\nexport class CheckList {\r\n  private selectList: SelectList = {items: [], isFlagsEnum: false};\r\n\r\n  @Prop() public inputContext: ActivityInputContext;\r\n  @State() private selectedValues?: Array<string> = [];\r\n  @State() private selectedValue?: number;\r\n\r\n  public async componentWillLoad() {\r\n    this.selectList = await getSelectListItems(this.inputContext.inputDescriptor);\r\n    const selectedValues = this.getSelectedValues(this.selectList);\r\n\r\n    if (Array.isArray(selectedValues))\r\n      this.selectedValues = selectedValues;\r\n    else if (typeof (selectedValues) == 'number')\r\n      this.selectedValue = selectedValues;\r\n    else if (typeof selectedValues == 'string')\r\n      this.selectedValues = JSON.parse(selectedValues);\r\n  }\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const value = (input?.expression as ObjectExpression)?.value; // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const selectList = this.selectList;\r\n    const selectListItems = selectList.items\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <div class=\"tw-max-w-lg tw-space-y-4 tw-my-4\">\r\n          {selectList.items.map((item, index) => {\r\n            const inputId = `${fieldId}_${index}`;\r\n            const optionIsString = typeof (item as any) == 'string';\r\n            const value = optionIsString ? item : item.value;\r\n            const text = optionIsString ? item : item.text;\r\n            const isSelected = selectList.isFlagsEnum\r\n              ? (this.selectedValue & (parseInt(value as string))) == parseInt(value as string)\r\n              : this.selectedValues.findIndex(x => x == value) >= 0;\r\n\r\n            return (\r\n              <div class=\"tw-relative tw-flex tw-items-start\">\r\n                <div class=\"tw-flex tw-items-center tw-h-5\">\r\n                  <input id={inputId} type=\"checkbox\" name={fieldName} checked={isSelected} value={value}\r\n                         onChange={e => this.onCheckChanged(e)}\r\n                         class=\"focus:tw-ring-blue-500 tw-h-4 tw-w-4 tw-text-blue-600 tw-border-gray-300 tw-rounded\"/>\r\n                </div>\r\n                <div class=\"tw-ml-3 tw-text-sm\">\r\n                  <label htmlFor={inputId} class=\"tw-font-medium tw-text-gray-700\">{text}</label>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private getSelectedValues = (selectList: SelectList): number | Array<string> => {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const input = getInputPropertyValue(this.inputContext);\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const json = this.getValueOrDefault(input?.expression?.value, defaultValue);\r\n    let parsedValue = selectList.isFlagsEnum ? parseInt(json) : getObjectOrParseJson(json) || [];\r\n\r\n    if (parsedValue.length == 0)\r\n      parsedValue = getObjectOrParseJson(defaultValue) || [];\r\n\r\n    return parsedValue;\r\n  };\r\n\r\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\r\n    return value ?? defaultValue ?? '';\r\n  }\r\n\r\n  private onCheckChanged = (e: Event) => {\r\n    const checkbox = (e.target as HTMLInputElement);\r\n    const checked = checkbox.checked;\r\n    const value = checkbox.value;\r\n    const isFlags = this.selectList.isFlagsEnum;\r\n    let json = '[]';\r\n\r\n    if (isFlags) {\r\n      let newValue = this.selectedValue;\r\n\r\n      if (checked)\r\n        newValue = newValue | parseInt(value);\r\n      else\r\n        newValue = newValue & ~parseInt(value);\r\n\r\n      this.selectedValue = newValue;\r\n      json = newValue.toString();\r\n    } else {\r\n      let newValue = this.selectedValues;\r\n\r\n      if (checked)\r\n        newValue = uniq([...newValue, value]);\r\n      else\r\n        newValue = newValue.filter(x => x !== value);\r\n\r\n      this.selectedValues = newValue;\r\n      json = JSON.stringify(newValue);\r\n    }\r\n\r\n    this.inputContext.inputChanged(json, SyntaxNames.Object);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"],"version":3}