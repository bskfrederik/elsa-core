{"version":3,"names":["RadioList","this","selectList","items","isFlagsEnum","getSelectedValue","inputContext","inputDescriptor","defaultValue","input","getInputPropertyValue","_b","_a","expression","value","onCheckChanged","e","checkbox","target","inputChanged","SyntaxNames","Literal","onExpressionChanged","detail","syntax","async","getSelectListItems","selectedValue","render","fieldName","name","fieldId","displayName","hint","description","type","defaultSyntax","h","label","class","map","item","index","inputId","optionIsString","text","isSelected","id","checked","onChange","htmlFor"],"sources":["./src/components/inputs/radio-list.tsx"],"sourcesContent":["import {Component, h, Prop, State} from '@stencil/core';\r\nimport {LiteralExpression, SelectList, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getSelectListItems, getInputPropertyValue} from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-radio-list-input',\r\n  shadow: false\r\n})\r\nexport class RadioList {\r\n  private selectList: SelectList = {items: [], isFlagsEnum: false};\r\n\r\n  @Prop() public inputContext: ActivityInputContext;\r\n  @State() private selectedValue?: string;\r\n\r\n  public async componentWillLoad() {\r\n    this.selectList = await getSelectListItems(this.inputContext.inputDescriptor);\r\n    this.selectedValue = this.getSelectedValue();\r\n  }\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const value = this.getSelectedValue();\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const selectList = this.selectList;\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <div class=\"tw-max-w-lg tw-space-y-4 tw-my-4\">\r\n          {selectList.items.map((item, index) => {\r\n            const inputId = `${fieldId}_${index}`;\r\n            const optionIsString = typeof (item as any) == 'string';\r\n            const value = optionIsString ? item : item.value;\r\n            const text = optionIsString ? item : item.text;\r\n            const isSelected = this.selectedValue === value as string;\r\n\r\n            return (\r\n              <div class=\"tw-relative tw-flex tw-items-start\">\r\n                <div class=\"tw-flex tw-items-center tw-h-5\">\r\n                  <input id={inputId} type=\"radio\" name={fieldName} checked={isSelected} value={value}\r\n                         onChange={e => this.onCheckChanged(e)}\r\n                         class=\"focus:tw-ring-blue-500 tw-h-4 tw-w-4 tw-text-blue-600 tw-border-gray-300\"/>\r\n                </div>\r\n                <div class=\"tw-ml-3 tw-text-sm\">\r\n                  <label htmlFor={inputId} class=\"tw-font-medium tw-text-gray-700\">{text}</label>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private getSelectedValue = (): string => {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const input = getInputPropertyValue(inputContext);\r\n    return ((input?.expression as LiteralExpression)?.value) ?? defaultValue;\r\n  };\r\n\r\n  private onCheckChanged = (e: Event) => {\r\n    const checkbox = (e.target as HTMLInputElement);\r\n    const value = checkbox.value;\r\n\r\n    this.inputContext.inputChanged(value, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"],"mappings":"gRAUaA,EAAS,M,yBACZC,KAAAC,WAAyB,CAACC,MAAO,GAAIC,YAAa,OAkDlDH,KAAAI,iBAAmB,K,QACzB,MAAMC,EAAeL,KAAKK,aAC1B,MAAMC,EAAkBD,EAAaC,gBACrC,MAAMC,EAAeD,EAAgBC,aACrC,MAAMC,EAAQC,EAAsBJ,GACpC,OAAOK,GAACC,EAACH,IAAK,MAALA,SAAK,SAALA,EAAOI,cAAgC,MAAAD,SAAA,SAAAA,EAAEE,SAAM,MAAAH,SAAA,EAAAA,EAAIH,CAAY,EAGlEP,KAAAc,eAAkBC,IACxB,MAAMC,EAAYD,EAAEE,OACpB,MAAMJ,EAAQG,EAASH,MAEvBb,KAAKK,aAAaa,aAAaL,EAAOM,EAAYC,QAAQ,EAGpDpB,KAAAqB,oBAAuBN,IAC7Bf,KAAKK,aAAaa,aAAaH,EAAEO,OAAOV,WAAYG,EAAEO,OAAOC,OAAO,E,yDA7D/DC,0BACLxB,KAAKC,iBAAmBwB,EAAmBzB,KAAKK,aAAaC,iBAC7DN,KAAK0B,cAAgB1B,KAAKI,kB,CAGrBuB,S,QACL,MAAMtB,EAAeL,KAAKK,aAC1B,MAAMC,EAAkBD,EAAaC,gBACrC,MAAMsB,EAAYtB,EAAgBuB,KAClC,MAAMC,EAAUxB,EAAgBuB,KAChC,MAAME,EAAczB,EAAgByB,YACpC,MAAMC,EAAO1B,EAAgB2B,YAC7B,MAAMzB,EAAQC,EAAsBJ,GACpC,MAAMQ,EAAQb,KAAKI,mBACnB,MAAMmB,GAASb,GAAAC,EAAAH,IAAK,MAALA,SAAK,SAALA,EAAOI,cAAU,MAAAD,SAAA,SAAAA,EAAEuB,QAAI,MAAAxB,SAAA,EAAAA,EAAIJ,EAAgB6B,cAC1D,MAAMlC,EAAaD,KAAKC,WAExB,OACEmC,EAAA,6BAA2BC,MAAON,EAAaC,KAAMA,EAAMT,OAAQA,EAAQX,WAAYC,EAAOQ,oBAAqBrB,KAAKqB,qBACtHe,EAAA,OAAKE,MAAM,oCACRrC,EAAWC,MAAMqC,KAAI,CAACC,EAAMC,KAC3B,MAAMC,EAAU,GAAGZ,KAAWW,IAC9B,MAAME,SAAyBH,GAAgB,SAC/C,MAAM3B,EAAQ8B,EAAiBH,EAAOA,EAAK3B,MAC3C,MAAM+B,EAAOD,EAAiBH,EAAOA,EAAKI,KAC1C,MAAMC,EAAa7C,KAAK0B,gBAAkBb,EAE1C,OACEuB,EAAA,OAAKE,MAAM,sCACTF,EAAA,OAAKE,MAAM,kCACTF,EAAA,SAAOU,GAAIJ,EAASR,KAAK,QAAQL,KAAMD,EAAWmB,QAASF,EAAYhC,MAAOA,EACvEmC,SAAUjC,GAAKf,KAAKc,eAAeC,GACnCuB,MAAM,8EAEfF,EAAA,OAAKE,MAAM,sBACTF,EAAA,SAAOa,QAASP,EAASJ,MAAM,mCAAmCM,IAEhE,K"}