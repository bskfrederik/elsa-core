{"file":"index-c5813c2e.js","mappings":"AAAY,MAAC,sBAAsB,GAAG,CAAC,YAAY,EAAE,cAAc,KAAK;AACxE,IAAI,IAAI,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;AAC9B,IAAI,IAAI,YAAY,GAAG,YAAY,CAAC;AACpC,IAAI,MAAM,cAAc,GAAG,CAAC,MAAM,EAAE,QAAQ,KAAK;AACjD,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AACnC,YAAY,CAAC,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI;AAC7C,gBAAgB,QAAQ,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;AAC9D,aAAa,CAAC,CAAC;AACf,SAAS;AACT,aAAa;AACb,YAAY,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;AAC/D,SAAS;AACT,KAAK,CAAC;AACN,IAAI,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,KAAK;AAC9C,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AACtC,YAAY,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC9C,YAAY,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC/C,SAAS;AACT,QAAQ,OAAO,MAAM;AACrB,YAAY,IAAI,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AACzC,gBAAgB,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC3C,aAAa;AACb,SAAS,CAAC;AACV,KAAK,CAAC;AACN,IAAI,MAAM,QAAQ,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,QAAQ,KAAK;AAC9C,QAAQ,YAAY,GAAG,KAAK,CAAC;AAC7B,QAAQ,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC1C,QAAQ,OAAO,QAAQ,CAAC;AACxB,KAAK,CAAC;AACN,IAAI,MAAM,QAAQ,GAAG,CAAC,KAAK,EAAE,QAAQ,KAAK;AAC1C;AACA;AACA,QAAQ,OAAO,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,KAAK,CAAC;AACN,IAAI,MAAM,WAAW,GAAG,CAAC,IAAI,EAAE,SAAS,KAAK;AAC7C,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;AAC7C,QAAQ,MAAM,qBAAqB,GAAG,aAAa,CAAC,iBAAiB,CAAC;AACtE,QAAQ,MAAM,wBAAwB,GAAG,aAAa,CAAC,oBAAoB,CAAC;AAC5E,QAAQ,aAAa,CAAC,iBAAiB,GAAG,YAAY;AACtD,YAAY,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACvC,YAAY,IAAI,qBAAqB,EAAE;AACvC,gBAAgB,OAAO,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxD,aAAa;AACb,SAAS,CAAC;AACV,QAAQ,aAAa,CAAC,oBAAoB,GAAG,YAAY;AACzD,YAAY,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnC,YAAY,IAAI,wBAAwB,EAAE;AAC1C,gBAAgB,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpD,aAAa;AACb,SAAS,CAAC;AACV,KAAK,CAAC;AACN,IAAI,OAAO;AACX,QAAQ,QAAQ;AAChB,QAAQ,QAAQ;AAChB,QAAQ,WAAW;AACnB,KAAK,CAAC;AACN;;;;","names":[],"sources":["../../node_modules/@stencil/state-tunnel/dist/collection/utils/state-tunnel.js"],"sourcesContent":["export const createProviderConsumer = (defaultState, consumerRender) => {\r\n    let listeners = new Map();\r\n    let currentState = defaultState;\r\n    const updateListener = (fields, instance) => {\r\n        if (Array.isArray(fields)) {\r\n            [...fields].forEach(fieldName => {\r\n                instance[fieldName] = currentState[fieldName];\r\n            });\r\n        }\r\n        else {\r\n            instance[fields] = Object.assign({}, currentState);\r\n        }\r\n    };\r\n    const subscribe = (instance, propList) => {\r\n        if (!listeners.has(instance)) {\r\n            listeners.set(instance, propList);\r\n            updateListener(propList, instance);\r\n        }\r\n        return () => {\r\n            if (listeners.has(instance)) {\r\n                listeners.delete(instance);\r\n            }\r\n        };\r\n    };\r\n    const Provider = ({ state }, children) => {\r\n        currentState = state;\r\n        listeners.forEach(updateListener);\r\n        return children;\r\n    };\r\n    const Consumer = (props, children) => {\r\n        // The casting on subscribe is to allow for crossover through the stencil compiler\r\n        // In the future we should allow for generics in components.\r\n        return consumerRender(subscribe, children[0]);\r\n    };\r\n    const injectProps = (Cstr, fieldList) => {\r\n        const CstrPrototype = Cstr.prototype;\r\n        const cstrConnectedCallback = CstrPrototype.connectedCallback;\r\n        const cstrDisconnectedCallback = CstrPrototype.disconnectedCallback;\r\n        CstrPrototype.connectedCallback = function () {\r\n            subscribe(this, fieldList);\r\n            if (cstrConnectedCallback) {\r\n                return cstrConnectedCallback.call(this);\r\n            }\r\n        };\r\n        CstrPrototype.disconnectedCallback = function () {\r\n            listeners.delete(this);\r\n            if (cstrDisconnectedCallback) {\r\n                cstrDisconnectedCallback.call(this);\r\n            }\r\n        };\r\n    };\r\n    return {\r\n        Provider,\r\n        Consumer,\r\n        injectProps\r\n    };\r\n};\r\n"],"version":3}