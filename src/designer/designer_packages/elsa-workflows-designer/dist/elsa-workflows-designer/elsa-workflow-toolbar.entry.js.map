{"file":"elsa-workflow-toolbar.entry.esm.js","mappings":"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","names":["notificationStore","toolbarComponentStore","notificationService"],"sources":["./src/modules/notifications/event-types.ts","./src/services/api-client/packages-api.ts","./src/components/toolbar/workflow-toolbar/workflow-toolbar.tsx"],"sourcesContent":["export const NotificationEventTypes = {\r\n  Add: 'notification-added',\r\n  Update: 'notification-updated',\r\n  Toggle: 'notification-toggle',\r\n};\r\n","import {Service} from \"typedi\";\r\nimport {ElsaClientProvider} from \"./elsa-client\";\r\nimport { PackageVersion } from \"../../models\";\r\n\r\n@Service()\r\nexport class PackagesApi {\r\n  private provider: ElsaClientProvider;\r\n\r\n  constructor(provider: ElsaClientProvider) {\r\n    this.provider = provider;\r\n  }\r\n\r\n  async getVersion(): Promise<PackageVersion> {\r\n    const httpClient = await this.getHttpClient();\r\n    const response = await httpClient.get<PackageVersion>(`package/version`);\r\n    return response.data;\r\n  }\r\n\r\n  private getHttpClient = async () => await this.provider.getHttpClient();\r\n}\r\n","import {Component, State, h, getAssetPath} from '@stencil/core';\r\nimport Container from 'typedi';\r\nimport {NotificationEventTypes} from '../../../modules/notifications/event-types';\r\nimport {EventBus} from '../../../services';\r\nimport toolbarComponentStore from \"../../../data/toolbar-component-store\";\r\nimport notificationService from '../../../modules/notifications/notification-service';\r\nimport notificationStore from \"../../../modules/notifications/notification-store\";\r\nimport {PackagesApi} from \"../../../services/api-client/packages-api\";\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-toolbar',\r\n  assetsDirs: ['assets']\r\n})\r\nexport class WorkflowToolbar {\r\n  private readonly eventBus: EventBus;\r\n  private readonly packagesApi: PackagesApi;\r\n\r\n  private currentElsaVersion: string;\r\n\r\n  static NotificationService = notificationService;\r\n\r\n  constructor() {\r\n    this.eventBus = Container.get(EventBus);\r\n    this.packagesApi = Container.get(PackagesApi);\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    var response = await this.packagesApi.getVersion();\r\n    return this.currentElsaVersion = response.packageVersion;\r\n  }\r\n\r\n  onNotificationClick = async e => {\r\n    e.stopPropagation();\r\n    await this.eventBus.emit(NotificationEventTypes.Toggle, this);\r\n    WorkflowToolbar.NotificationService.toggleNotification();\r\n  };\r\n\r\n  render() {\r\n    const logoPath = getAssetPath('./assets/logo.png');\r\n    const infoPanelBoolean = notificationStore.infoPanelBoolean;\r\n\r\n    return (\r\n      <div>\r\n        <nav class=\"tw-bg-gray-800\">\r\n          <div class=\"tw-mx-auto tw-px-2 sm:tw-px-6 lg:tw-px-6\">\r\n\r\n            <div class=\"tw-flex tw-items-center tw-h-16\">\r\n              <div class=\"tw-flex-shrink-0\">\r\n                <div class=\"tw-flex tw-items-end tw-space-x-1\">\r\n                  <div>\r\n                    <a href=\"#\"><img class=\"tw-h-6 tw-w-6\" src={logoPath} alt=\"Workflow\"/></a>\r\n                  </div>\r\n                  <div>\r\n                    <span class=\"tw-text-gray-300 tw-text-sm\">{this.currentElsaVersion}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"tw-flex-grow\"></div>\r\n\r\n              <div class=\"tw-relative tw-flex tw-items-center tw-justify-end tw-h-16\">\r\n                <div class=\"tw-absolute tw-inset-y-0 tw-right-0 tw-flex tw-items-center tw-pr-2 sm:tw-static sm:tw-inset-auto sm:tw-ml-6 sm:tw-pr-0 tw-z-40\">\r\n                  <div class=\"tw-inset-y-0 tw-right-0 tw-flex tw-items-center tw-pr-2 sm:tw-static sm:tw-inset-auto sm:tw-ml-6 sm:tw-pr-0 tw-z-40\">\r\n                    {/* Notifications*/}\r\n                    <button\r\n                      onClick={e => this.onNotificationClick(e)}\r\n                      type=\"button\"\r\n                      class=\"tw-bg-gray-800 tw-p-1 tw-rounded-full tw-text-gray-400 hover:tw-text-white focus:tw-outline-none focus:tw-ring-2 focus:tw-ring-offset-2 focus:tw-ring-offset-gray-800 focus:tw-ring-white tw-mr-4\"\r\n                    >\r\n                      <span class=\"tw-sr-only\">View notifications</span>\r\n                      <svg class=\"tw-h-6 tw-w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                        <path\r\n                          stroke-linecap=\"round\"\r\n                          stroke-linejoin=\"round\"\r\n                          stroke-width=\"2\"\r\n                          d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"\r\n                        />\r\n                      </svg>\r\n                    </button>\r\n\r\n                    {toolbarComponentStore.components.map(component => (\r\n                      <div class=\"tw-flex-shrink-0 tw-mr-4\">\r\n                        {component()}\r\n                      </div>\r\n                    ))}\r\n\r\n                    {/* Menu */}\r\n                    <elsa-workflow-toolbar-menu/>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </nav>\r\n        <elsa-notifications-manager modalState={infoPanelBoolean}></elsa-notifications-manager>\r\n        <elsa-toast-manager></elsa-toast-manager>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}