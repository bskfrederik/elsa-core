{"version":3,"names":["HttpStatusCodesEditor","this","onPropertyEditorChanged","e","statusCodes","detail","activity","inputContext","expectedStatusCodes","_a","statusCode","findIndex","x","toString","push","parseInt","i","length","splice","notifyInputChanged","render","inputDescriptor","fieldId","name","displayName","hint","description","getPropertyValue","statusCodeTags","map","h","FormEntry","label","values","onValueChanged","placeHolder"],"sources":["./src/modules/http-request/sequence/http-status-codes-editor.tsx"],"sourcesContent":["import {Component, h, Prop} from \"@stencil/core\";\r\nimport {ActivityInputContext} from \"../../../services/activity-input-driver\";\r\nimport {FormEntry} from \"../../../components/shared/forms/form-entry\";\r\nimport {getPropertyValue} from \"../../../utils\";\r\nimport {HttpStatusCodeCase, SendHttpRequest} from \"./models\";\r\n\r\n@Component({\r\n  tag: 'elsa-http-status-codes-editor',\r\n  shadow: false\r\n})\r\nexport class HttpStatusCodesEditor {\r\n  @Prop() inputContext: ActivityInputContext;\r\n\r\n  render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const expectedStatusCodes: Array<HttpStatusCodeCase> = getPropertyValue(inputContext) ?? [];\r\n    const statusCodeTags = expectedStatusCodes.map(x => x.statusCode.toString());\r\n\r\n    return (\r\n      <FormEntry fieldId={fieldId} label={displayName} hint={hint}>\r\n        <elsa-input-tags fieldId={fieldId} values={statusCodeTags} onValueChanged={this.onPropertyEditorChanged} placeHolder=\"Add status code\"/>\r\n      </FormEntry>\r\n    );\r\n  }\r\n\r\n  private onPropertyEditorChanged = (e: CustomEvent<Array<string>>) => {\r\n    const statusCodes = e.detail;\r\n    const activity = this.inputContext.activity as SendHttpRequest;\r\n    const expectedStatusCodes = activity.expectedStatusCodes ?? [];\r\n\r\n    // Push new status codes.\r\n    for (const statusCode of statusCodes) {\r\n      if (expectedStatusCodes.findIndex(x => x.statusCode.toString() == statusCode) == -1)\r\n        expectedStatusCodes.push({statusCode: parseInt(statusCode)});\r\n    }\r\n\r\n    // Remove status codes that are no longer present.\r\n    for (let i = expectedStatusCodes.length - 1; i >= 0; i--) {\r\n      const statusCode = expectedStatusCodes[i].statusCode.toString();\r\n      if (statusCodes.findIndex(x => x == statusCode) == -1)\r\n        expectedStatusCodes.splice(i, 1);\r\n    }\r\n\r\n    activity.expectedStatusCodes = expectedStatusCodes;\r\n    this.inputContext.notifyInputChanged();\r\n  };\r\n}\r\n"],"mappings":"iSAUaA,EAAqB,M,yBAmBxBC,KAAAC,wBAA2BC,I,MACjC,MAAMC,EAAcD,EAAEE,OACtB,MAAMC,EAAWL,KAAKM,aAAaD,SACnC,MAAME,GAAsBC,EAAAH,EAASE,uBAAmB,MAAAC,SAAA,EAAAA,EAAI,GAG5D,IAAK,MAAMC,KAAcN,EAAa,CACpC,GAAII,EAAoBG,WAAUC,GAAKA,EAAEF,WAAWG,YAAcH,MAAgB,EAChFF,EAAoBM,KAAK,CAACJ,WAAYK,SAASL,I,CAInD,IAAK,IAAIM,EAAIR,EAAoBS,OAAS,EAAGD,GAAK,EAAGA,IAAK,CACxD,MAAMN,EAAaF,EAAoBQ,GAAGN,WAAWG,WACrD,GAAIT,EAAYO,WAAUC,GAAKA,GAAKF,MAAgB,EAClDF,EAAoBU,OAAOF,EAAG,E,CAGlCV,EAASE,oBAAsBA,EAC/BP,KAAKM,aAAaY,oBAAoB,E,4BAnCxCC,S,MACE,MAAMb,EAAeN,KAAKM,aAC1B,MAAMc,EAAkBd,EAAac,gBACrC,MAAMC,EAAUD,EAAgBE,KAChC,MAAMC,EAAcH,EAAgBG,YACpC,MAAMC,EAAOJ,EAAgBK,YAC7B,MAAMlB,GAAiDC,EAAAkB,EAAiBpB,MAAa,MAAAE,SAAA,EAAAA,EAAI,GACzF,MAAMmB,EAAiBpB,EAAoBqB,KAAIjB,GAAKA,EAAEF,WAAWG,aAEjE,OACEiB,EAACC,EAAS,CAACT,QAASA,EAASU,MAAOR,EAAaC,KAAMA,GACrDK,EAAA,mBAAiBR,QAASA,EAASW,OAAQL,EAAgBM,eAAgBjC,KAAKC,wBAAyBiC,YAAY,oB"}