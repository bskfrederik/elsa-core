{"version":3,"names":["ActivityProperties","constructor","hostRef","this","findActivityDescriptor","activity","descriptor","descriptorsStore","activityDescriptors","find","x","typeName","type","version","sort","a","b","onSelectedTabIndexChanged","e","selectedTabIndex","detail","renderPropertiesTab","activityDescriptor","properties","inputs","filter","isBrowsable","activityId","id","displayText","_b","_a","metadata","executionLogEntry","activityExecutionLog","activityState","_c","propertyDetails","strings","propertiesTabActivityId","propertiesTabDisplayText","property","loggedPropName","name","propertyValue","propertyValueText","JSON","stringify","toString","displayName","h","InfoList","title","propertiesTab","dictionary","renderCommonTab","renderJournalTab","log","exception","payload","statusColor","eventName","icon","iconRegistry","getOrDefault","activityType","size","ActivityIconSize","Small","class","moment","timestamp","format","journalTabActivityId","value","journalTabException","Type","Message","message","undefined","Container","get","ActivityIconRegistry","async","slideOverPanel","show","hide","tabIndex","getLocaleComponentStrings","element","console","activityPropertyTabIndex","render","content","commonTab","journalTab","tabs","mainTitle","subTitle","WorkflowInstancePropertiesEventTypes","Displaying","WorkflowDefinitionPropertiesEditor","createModel","model","tabModels","workflowDefinition","workflowInstance","propertiesTabModel","tab","Widgets","identityDetails","propertiesTabInstanceId","isNullOrWhitespace","propertiesNew","propertiesTabDefinitionId","definitionId","propertiesTabVersion","statusDetails","propertiesTabStatus","status","propertiesTabSubStatus","subStatus","timestampDetails","propertiesTabCreated","formatTimestamp","createdAt","propertiesTabLastExecution","updatedAt","propertiesTabFinished","finishedAt","propertiesTabTimeStamps","hideEmptyValues","order","variablesTabModel","variablesTab","renderVariablesTab","args","eventBus","emit","tabModel","widgets","map","widget","variables","EventBus","journalCss","PAGE_SIZE","Journal","renderBlocks","blocks","journalActivityMap","expandedBlocks","sortedBlocks","sortByTimestamp","block","activityNode","nodeId","children","activityMetadata","activityDisplayText","duration","durationToString","completed","suspended","faulted","expanded","toggleIcon","width","height","viewBox","stroke","fill","d","y","rx","x1","y1","x2","y2","length","href","onClick","onBlockClick","onJournalItemClick","formatTime","loadJournalPage","page","workflowInstanceId","pageOfRecords","workflowInstancesApi","getJournal","pageSize","createBlocks","items","rootBlocks","parentActivityInstanceId","workflowExecutionLogRecords","records","startedEvents","completedEvents","faultedEvents","suspendedEvents","startedRecord","completedRecord","activityInstanceId","faultedRecord","suspendedRecord","getDuration","findChildBlocks","preventDefault","existingBlock","journalItemSelected","executionEventBlock","Set","WorkflowInstancesApi","oldValue","newValue","refresh","createActivityMapForJournal","worfklowJournal","time","workflow","root","customProperties","graph","walkActivities","nodes","flatten","node"],"sources":["./src/modules/workflow-instances/components/activity-properties.tsx","./src/modules/workflow-instances/models.ts","./src/modules/workflow-instances/components/properties.tsx","./src/modules/workflow-instances/components/journal.scss?tag=elsa-workflow-journal","./src/modules/workflow-instances/components/journal.tsx"],"sourcesContent":["import {Component, Element, h, Method, Prop, State, Watch} from '@stencil/core';\nimport {camelCase} from 'lodash';\nimport {\n  Activity,\n  ActivityDescriptor,\n  Lookup,\n  TabChangedArgs,\n  TabDefinition,\n  WorkflowExecutionLogRecord\n} from '../../../models';\nimport {InfoList} from \"../../../components/shared/forms/info-list\";\nimport descriptorsStore from \"../../../data/descriptors-store\";\nimport moment from 'moment';\nimport Container from 'typedi';\nimport { ActivityIconRegistry } from '../../../services';\nimport {ActivityIconSize} from \"../../../components/icons/activities\";\nimport { getLocaleComponentStrings } from '../../../utils/locale';\n\n@Component({\n  tag: 'elsa-activity-properties',\n})\nexport class ActivityProperties {\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private readonly iconRegistry: ActivityIconRegistry;\n\n  constructor() {\n    this.iconRegistry = Container.get(ActivityIconRegistry);\n  }\n\n  @Prop({mutable: true}) public activity?: Activity;\n  @Prop() activityExecutionLog: WorkflowExecutionLogRecord;\n  @Prop() activityPropertyTabIndex?: number;\n  @State() private selectedTabIndex: number = 0;\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  @Method()\n  async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Method()\n  async updateSelectedTab(tabIndex : number): Promise<void> {\n    this.selectedTabIndex = tabIndex;\n  }\n\n  @Watch('activity')\n\n\n  async componentWillLoad(): Promise<void> {\n    this.strings = await getLocaleComponentStrings(this.element);\n    console.log(this.strings);\n    if(this.activityPropertyTabIndex != null) {\n      this.selectedTabIndex = this.activityPropertyTabIndex;\n    }\n  }\n\n  render() {\n    const activity = this.activity;\n    const activityDescriptor = this.findActivityDescriptor();\n\n    const propertiesTab: TabDefinition = {\n      displayText: this.strings.propertiesTab,\n      content: () => this.renderPropertiesTab()\n    };\n\n    const commonTab: TabDefinition = {\n      displayText: this.strings.commonTab,\n      content: () => this.renderCommonTab()\n    };\n\n    const journalTab: TabDefinition = {\n      displayText: this.strings.journalTab,\n      content: () => this.renderJournalTab()\n    };\n\n    const tabs = !!activityDescriptor ? [propertiesTab, commonTab, journalTab] : [];\n    const mainTitle = activity.id;\n    const subTitle = activityDescriptor.displayName;\n\n    return (\n      <elsa-form-panel\n        mainTitle={mainTitle}\n        subTitle={subTitle}\n        tabs={tabs}\n        selectedTabIndex={this.selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}\n      />\n    );\n  }\n\n  private findActivityDescriptor = (): ActivityDescriptor => {\n    const activity = this.activity;\n\n    if(!activity) return null;\n\n    const descriptor = descriptorsStore.activityDescriptors.find(x => x.typeName == activity.type && x.version == activity.version);\n    return descriptor ?? descriptorsStore.activityDescriptors.sort((a, b) => b.version - a.version).find(x => x.typeName == this.activity.type);\n  };\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex\n\n  private renderPropertiesTab = () => {\n    const activity = this.activity;\n    const activityDescriptor = this.findActivityDescriptor();\n    const properties = activityDescriptor.inputs.filter(x => x.isBrowsable);\n    const activityId = activity.id;\n    const displayText: string = activity.metadata?.displayText ?? '';\n    const executionLogEntry = this.activityExecutionLog;\n    const activityState = executionLogEntry?.activityState ?? {};\n\n    const propertyDetails: Lookup<string> = {\n      [this.strings.propertiesTabActivityId]: activityId,\n      [this.strings.propertiesTabDisplayText]: displayText\n    };\n\n    for (const property of properties) {\n      const loggedPropName = property.name;\n      const propertyValue = activityState[loggedPropName];\n      const propertyValueText = (propertyValue !== null && typeof propertyValue === 'object') ? JSON.stringify(propertyValue) : (propertyValue != null ? propertyValue.toString() : '');\n      propertyDetails[property.displayName] = propertyValueText;\n    }\n\n    return <div>\n      <InfoList title={this.strings.propertiesTab} dictionary={propertyDetails}/>\n    </div>\n  };\n\n  private renderCommonTab = () => {\n    return <div>\n    </div>\n  };\n\n  private renderJournalTab = () => {\n    const log = this.activityExecutionLog;\n    if(log == null) return;\n\n    const exception = log.payload?.exception;\n    const statusColor = log.eventName == \"Completed\" ? \"tw-bg-blue-100\" : log.eventName == \"Faulted\" ? \"tw-bg-red-100\" : \"tw-bg-green-100\";\n    const icon = this.iconRegistry.getOrDefault(log.activityType)({size: ActivityIconSize.Small});\n    return (\n      <div class=\"tw-border-2 tw-cursor-pointer tw-p-4 tw-rounded\">\n        <div class=\"tw-relative tw-pb-10\">\n          <div class=\"tw-relative tw-flex tw-space-x-3\">\n            <div>\n              <span class={`tw-h-8 tw-w-8 tw-rounded tw-p-1 tw-bg-blue-500 tw-flex tw-items-center tw-justify-center tw-ring-8 tw-ring-white tw-mr-1`}>\n                {icon}\n              </span>\n            </div>\n            <div class=\"tw-min-w-0 tw-flex-1 tw-pt-1.5 tw-flex tw-justify-between tw-space-x-4\">\n              <div>\n                <h3 class=\"tw-text-lg tw-leading-6 tw-font-medium tw-text-gray-900\">\n                  {log.activityType}\n                </h3>\n              </div>\n              <div>\n                <span\n                  class={`tw-relative tw-inline-flex tw-items-center tw-rounded-full ${statusColor} tw-border tw-border-gray-300 tw-px-3 tw-py-0.5 tw-text-sm`}>\n                  <span class=\"tw-absolute tw-flex-shrink-0 tw-flex tw-items-center tw-justify-center\">\n                    <span class={`tw-h-1.5 tw-w-1.5 tw-rounded-full`} aria-hidden=\"true\"/>\n                  </span>\n                  <span class=\"tw-font-medium tw-text-gray-900\">{log.eventName}</span>\n                </span>\n              </div>\n              <div class=\"tw-text-right tw-text-sm tw-whitespace-nowrap tw-text-gray-500\">\n                <span>{moment(log.timestamp).format('DD-MM-YYYY HH:mm:ss')}</span>\n              </div>\n            </div>\n          </div>\n          <div class=\"tw-ml-12 tw-mt-2\">\n            <dl class=\"sm:tw-divide-y sm:tw-divide-gray-200\">\n              <div class=\"tw-grid tw-grid-cols-2 tw-gap-x-4 tw-gap-y-8 sm:tw-grid-cols-2\">\n                <div class=\"sm:tw-col-span-2\">\n                  <dt class=\"tw-text-sm tw-font-medium tw-text-gray-500\">\n                    <span>{this.strings.journalTabActivityId}</span>\n                    <copy-button value={log.activityId}/>\n                  </dt>\n                  <dd class=\"tw-mt-1 tw-text-sm tw-text-gray-900 tw-mb-2\">{log.activityId}</dd>\n                </div>\n                {!!exception ? (\n                  [<div class=\"sm:tw-col-span-2\">\n                    <dt class=\"tw-text-sm tw-font-medium tw-text-gray-500\">\n                      <span>{this.strings.journalTabException}</span>\n                      <copy-button value={exception.Type + '\\n' + exception.Message}/>\n                    </dt>\n                    <dd class=\"tw-mt-1 tw-text-sm tw-text-gray-900\">\n                      {exception.message}\n                    </dd>\n                  </div>,\n                    <div class=\"sm:tw-col-span-2\">\n                      <dt class=\"tw-text-sm tw-font-medium tw-text-gray-500\">\n                        <span>Exception Details</span>\n                        <copy-button value={JSON.stringify(exception, null, 1)}/>\n                      </dt>\n                      <dd class=\"tw-mt-1 tw-text-sm tw-text-gray-900 tw-overflow-x-auto\">\n                        <pre>{JSON.stringify(exception, null, 1)}</pre>\n                      </dd>\n                    </div>]\n                ) : undefined}\n              </div>\n            </dl>\n          </div>\n        </div>\n      </div>\n    )\n  };\n}\n","import {TabDefinition, WorkflowExecutionLogRecord, WorkflowInstance} from \"../../models\";\r\nimport moment from \"moment\";\r\nimport {WorkflowDefinition} from \"../workflow-definitions/models/entities\";\r\n\r\nexport const WorkflowInstanceViewerEventTypes = {\r\n  WorkflowDefinition: {\r\n    Imported: 'workflow-instance-viewer:workflow-instance:imported'\r\n  },\r\n  WorkflowInstanceViewer: {\r\n    Ready: 'workflow-instance-viewer:ready'\r\n  }\r\n}\r\n\r\nexport const WorkflowInstancePropertiesEventTypes = {\r\n  Displaying: 'workflow-instance-properties:displaying'\r\n}\r\n\r\nexport interface WorkflowInstancePropertiesDisplayingArgs {\r\n  model: WorkflowInstancePropertiesViewerModel;\r\n}\r\n\r\nexport interface TabModel {\r\n  name: string;\r\n  tab: TabDefinition;\r\n}\r\n\r\nexport interface Widget {\r\n  name: string;\r\n  content: () => any;\r\n  order?: number;\r\n}\r\n\r\nexport interface PropertiesTabModel extends TabModel {\r\n  Widgets: Array<Widget>;\r\n}\r\n\r\nexport interface WorkflowInstancePropertiesViewerModel {\r\n  tabModels: Array<TabModel>;\r\n}\r\n\r\nexport interface ActivityExecutionEventBlock {\r\n  nodeId: string;\r\n  activityId: string;\r\n  activityInstanceId: string;\r\n  parentActivityInstanceId: string;\r\n  completed: boolean;\r\n  suspended: boolean;\r\n  faulted: boolean;\r\n  timestamp: Date;\r\n  duration?: moment.Duration;\r\n  startedRecord: WorkflowExecutionLogRecord;\r\n  completedRecord?: WorkflowExecutionLogRecord;\r\n  faultedRecord?: WorkflowExecutionLogRecord;\r\n  suspendedRecord?: WorkflowExecutionLogRecord;\r\n  children: Array<ActivityExecutionEventBlock>;\r\n}\r\n\r\nexport interface WorkflowJournalModel {\r\n  workflowInstance: WorkflowInstance;\r\n  workflowDefinition: WorkflowDefinition;\r\n}\r\n","import {Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch} from '@stencil/core';\nimport {TabChangedArgs, Variable, WorkflowInstance} from '../../../models';\nimport {InfoList} from \"../../../components/shared/forms/info-list\";\nimport {formatTimestamp, isNullOrWhitespace} from \"../../../utils\";\nimport {PropertiesTabModel, TabModel, WorkflowInstancePropertiesDisplayingArgs, WorkflowInstancePropertiesEventTypes, WorkflowInstancePropertiesViewerModel} from \"../models\";\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../services\";\nimport {WorkflowDefinition} from \"../../workflow-definitions/models/entities\";\nimport { getLocaleComponentStrings } from '../../../utils/locale';\n\n@Component({\n  tag: 'elsa-workflow-instance-properties',\n})\nexport class WorkflowDefinitionPropertiesEditor {\n  private readonly eventBus: EventBus;\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n\n    this.model = {\n      tabModels: [],\n    }\n  }\n\n  @Prop() workflowDefinition?: WorkflowDefinition;\n  @Prop() workflowInstance?: WorkflowInstance;\n  @State() private model: WorkflowInstancePropertiesViewerModel;\n  @State() private selectedTabIndex: number = 0;\n  @State() private changeHandle: object = {};\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n\n  @Method()\n  public async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  public async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Watch('workflowDefinition')\n  async onWorkflowDefinitionChanged() {\n    await this.createModel();\n  }\n\n  @Watch('workflowInstance')\n  async onWorkflowInstanceChanged() {\n    await this.createModel();\n  }\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    await this.createModel();\n  }\n\n  public render() {\n    const workflowDefinition = this.workflowDefinition;\n    const title = !isNullOrWhitespace(workflowDefinition?.name) ? workflowDefinition.name : '-';\n    const subTitle = 'Workflow Instance';\n    const tabs = this.model.tabModels.map(x => x.tab);\n\n    return (\n      <elsa-form-panel\n        mainTitle={title}\n        subTitle={subTitle}\n        tabs={tabs}\n        selectedTabIndex={this.selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}/>\n    );\n  }\n\n  private createModel = async () => {\n    const model = {\n      tabModels: [],\n    };\n\n    const workflowDefinition = this.workflowDefinition;\n    const workflowInstance = this.workflowInstance;\n\n    if (!workflowDefinition || !workflowInstance) {\n      this.model = model;\n      return;\n    }\n\n    const propertiesTabModel: PropertiesTabModel = {\n      name: 'properties',\n      tab: null,\n      Widgets: [{\n        name: 'workflowInstanceInfo',\n        content: () => {\n\n          const identityDetails = {\n            [this.strings.propertiesTabInstanceId]: isNullOrWhitespace(workflowInstance.id) ? this.strings.propertiesNew : workflowInstance.id,\n            [this.strings.propertiesTabDefinitionId]: isNullOrWhitespace(workflowDefinition.definitionId) ? this.strings.propertiesNew : workflowDefinition.definitionId,\n            [this.strings.propertiesTabVersion]: workflowDefinition.version.toString(),\n          };\n\n          const statusDetails = {\n            [this.strings.propertiesTabStatus]: workflowInstance.status,\n            [this.strings.propertiesTabSubStatus]: workflowInstance.subStatus\n          };\n\n          const timestampDetails = {\n            [this.strings.propertiesTabCreated]: formatTimestamp(workflowInstance.createdAt),\n            [this.strings.propertiesTabLastExecution]: formatTimestamp(workflowInstance.updatedAt),\n            [this.strings.propertiesTabFinished]: formatTimestamp(workflowInstance.finishedAt),\n          };\n\n          return <div>\n            <InfoList title={this.strings.propertiesTab} dictionary={identityDetails}/>\n            <InfoList title={this.strings.propertiesTabStatus} dictionary={statusDetails}/>\n            <InfoList title={this.strings.propertiesTabTimeStamps} dictionary={timestampDetails} hideEmptyValues={true}/>\n          </div>;\n        },\n        order: 10\n      }]\n    };\n\n    propertiesTabModel.tab = {\n      displayText: this.strings.propertiesTab,\n      content: () => this.renderPropertiesTab(propertiesTabModel)\n    };\n\n    const variablesTabModel: TabModel = {\n      name: 'variables',\n      tab: {\n        displayText: this.strings.variablesTab,\n        content: () => this.renderVariablesTab()\n      }\n    }\n\n    model.tabModels = [propertiesTabModel, variablesTabModel];\n\n    const args: WorkflowInstancePropertiesDisplayingArgs = {model};\n\n    await this.eventBus.emit(WorkflowInstancePropertiesEventTypes.Displaying, this, args);\n\n    this.model = model;\n  }\n\n  private renderPropertiesTab = (tabModel: PropertiesTabModel) => {\n    const widgets = tabModel.Widgets.sort((a, b) => a.order < b.order ? -1 : a.order > b.order ? 1 : 0);\n\n    return <div>\n      {widgets.map(widget => widget.content())}\n    </div>\n  };\n\n  private renderVariablesTab = () => {\n    const variables: Array<Variable> = this.workflowDefinition?.variables ?? [];\n\n    return <div>\n      <elsa-variables-viewer variables={variables} workflowDefinition={this.workflowDefinition} workflowInstance={this.workflowInstance} />\n    </div>\n  };\n\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex;\n}\n","table.workflow-journal-table {\r\n  tbody tr td {\r\n    @apply tw-pl-3 tw-pr-0 tw-py-2;\r\n  }\r\n\r\n  tbody tr td:first-child {\r\n    @apply tw-pl-3 tw-pr-0 tw-py-2;\r\n  }\r\n}\r\n","import {Component, h, Prop, State, Watch, Event, EventEmitter, Method, Element} from \"@stencil/core\";\nimport {Activity, Workflow, WorkflowExecutionLogRecord, WorkflowInstance} from \"../../../models\";\nimport {Container} from \"typedi\";\nimport {ActivityIconRegistry, ActivityNode, flatten, walkActivities} from \"../../../services\";\nimport {durationToString, formatTime, getDuration, Hash, isNullOrWhitespace} from \"../../../utils\";\nimport {ActivityExecutionEventBlock, WorkflowJournalModel} from \"../models\";\nimport {ActivityIconSize} from \"../../../components/icons/activities\";\nimport {WorkflowInstancesApi} from \"../services/workflow-instances-api\";\nimport {JournalItemSelectedArgs} from \"../events\";\nimport { getLocaleComponentStrings } from \"../../../utils/locale\";\n\n// TODO: Implement dynamic loading of records.\nconst PAGE_SIZE: number = 10000;\n\n@Component({\n  tag: 'elsa-workflow-journal',\n  shadow: false,\n  styleUrl: 'journal.scss'\n})\nexport class Journal {\n  private readonly iconRegistry: ActivityIconRegistry;\n  private readonly workflowInstancesApi: WorkflowInstancesApi;\n\n  constructor() {\n    this.iconRegistry = Container.get(ActivityIconRegistry);\n    this.workflowInstancesApi = Container.get(WorkflowInstancesApi);\n  }\n\n  @Prop() model: WorkflowJournalModel;\n  @State() workflowExecutionLogRecords: Array<WorkflowExecutionLogRecord> = [];\n  @State() blocks: Array<ActivityExecutionEventBlock> = [];\n  @State() rootBlocks: Array<ActivityExecutionEventBlock> = [];\n  @State() expandedBlocks: Array<ActivityExecutionEventBlock> = [];\n  @State() journalActivityMap: Set<ActivityNode> = new Set<ActivityNode>();\n  @Event() journalItemSelected: EventEmitter<JournalItemSelectedArgs>;\n\n  @Watch('model')\n  async onWorkflowInstanceModelChanged(oldValue: WorkflowJournalModel, newValue: WorkflowJournalModel) {\n    if(oldValue.workflowInstance.id != newValue.workflowInstance.id)\n      await this.refresh();\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad(): Promise<void> {\n    this.strings = await getLocaleComponentStrings(this.element);\n    await this.refresh();\n  }\n\n  @Method()\n  async refresh() {\n    this.rootBlocks = [];\n    await this.loadJournalPage(0);\n    this.createActivityMapForJournal();\n  }\n\n  render() {\n    return (\n\n      <div class=\"tw-absolute tw-inset-0 tw-overflow-hidden\">\n        <div class=\"tw-h-full tw-flex tw-flex-col tw-bg-white tw-shadow-xl\">\n          <div class=\"tw-flex tw-flex-col tw-flex-1\">\n\n            <div class=\"tw-px-4 tw-py-6 tw-bg-gray-50 sm:tw-px-6\">\n              <div class=\"tw-flex tw-items-start tw-justify-between tw-space-x-3\">\n                <div class=\"tw-space-y-1\">\n                  <h2 class=\"tw-text-lg tw-font-medium tw-text-gray-900\">\n                    {this.strings.worfklowJournal}\n                  </h2>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"tw-flex-1 tw-relative\">\n              <div class=\"tw-absolute tw-inset-0 tw-overflow-y-scroll\">\n\n                <table class=\"workflow-journal-table\">\n                  <thead>\n                  <tr>\n                    <th class=\"tw-w-1\"/>\n                    <th>{this.strings.time}</th>\n                    <th class=\"tw-min-w-full\">{this.strings.activity}</th>\n                    <th>{this.strings.status}</th>\n                    <th>{this.strings.duration}</th>\n                  </tr>\n                  </thead>\n\n                  <tbody class=\"tw-bg-white tw-divide-y tw-divide-gray-100\">\n                  {this.renderBlocks(this.rootBlocks)}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private renderBlocks = (blocks: Array<ActivityExecutionEventBlock>) => {\n    const journalActivityMap = this.journalActivityMap;\n    const iconRegistry = this.iconRegistry;\n    const expandedBlocks = this.expandedBlocks;\n    const sortedBlocks = this.sortByTimestamp(blocks);\n\n    return sortedBlocks.map((block) => {\n      const activityNode = journalActivityMap[block.nodeId];\n\n      if (activityNode == null)\n        debugger\n\n      const activity = activityNode.activity;\n\n      if (activity.type == \"Elsa.Workflow\" || activity.type == \"Elsa.Flowchart\")\n        return this.renderBlocks(block.children);\n\n      const activityMetadata = activity.metadata;\n      const activityDisplayText = isNullOrWhitespace(activityMetadata.displayText) ? activity.id : activityMetadata.displayText;\n      const duration = durationToString(block.duration);\n      const status = block.completed ? 'Completed' : block.suspended ? 'Suspended' : block.faulted ? 'Faulted' : 'Started';\n      const icon = iconRegistry.getOrDefault(activity.type)({size: ActivityIconSize.Small});\n      const expanded = !!expandedBlocks.find(x => x == block);\n      const statusColor = block.completed ? \"tw-bg-blue-100\" : block.faulted ? \"tw-bg-red-100\" : \"tw-bg-green-100\";\n\n      const toggleIcon = expanded\n        ? (\n          <svg class=\"tw-h-6 tw-w-6 tw-text-gray-500\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>\n            <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\"/>\n            <line x1=\"9\" y1=\"12\" x2=\"15\" y2=\"12\"/>\n          </svg>\n        )\n        : (\n          <svg class=\"tw-h-6 tw-w-6 tw-text-gray-500\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>\n            <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\"/>\n            <line x1=\"9\" y1=\"12\" x2=\"15\" y2=\"12\"/>\n            <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"15\"/>\n          </svg>\n        );\n\n      return (\n        [<tr>\n          <td class=\"tw-w-1\">\n            {block.children.length > 0 ? (<a href=\"#\" onClick={e => this.onBlockClick(e, block)}>\n              {toggleIcon}\n            </a>) : undefined}\n          </td>\n          <td>\n            <a href=\"#\" onClick={e => this.onJournalItemClick(e, block, activity)}>{formatTime(block.timestamp)}</a>\n          </td>\n          <td class=\"tw-min-w-full\">\n            <div class=\"tw-flex tw-items-center tw-space-x-1\">\n              <div class=\"tw-flex-shrink\">\n                <div class=\"tw-bg-blue-500 tw-rounded tw-p-1\">\n                  <a href=\"#\" onClick={e => this.onJournalItemClick(e, block, activity)}>{icon}</a>\n                </div>\n              </div>\n              <div><a href=\"#\" onClick={e => this.onJournalItemClick(e, block, activity)}>{activityDisplayText}</a></div>\n            </div>\n          </td>\n          <td>\n            <a href=\"#\" onClick={e => this.onJournalItemClick(e, block, activity)} class={`tw-inline-flex tw-rounded-full ${statusColor} tw-px-2 tw-text-xs tw-font-semibold tw-leading-5 tw-text-green-800`}>{status}</a>\n          </td>\n          <td><a href=\"#\" onClick={e => this.onJournalItemClick(e, block, activity)}>{duration}</a></td>\n        </tr>, expanded ? this.renderBlocks(block.children) : undefined]\n      );\n    }).filter(x => !!x);\n  }\n\n  private loadJournalPage = async (page: number): Promise<void> => {\n    if (!this.model)\n      return;\n\n    const workflowInstance = this.model.workflowInstance;\n    const workflowInstanceId = workflowInstance.id;\n    const pageOfRecords = await this.workflowInstancesApi.getJournal({page, pageSize: PAGE_SIZE, workflowInstanceId: workflowInstanceId});\n    const blocks = this.createBlocks(pageOfRecords.items);\n    const rootBlocks = blocks.filter(x => !x.parentActivityInstanceId);\n    this.workflowExecutionLogRecords = [...this.workflowExecutionLogRecords, ...pageOfRecords.items];\n    this.rootBlocks = rootBlocks;\n    this.blocks = this.sortByTimestamp(blocks);\n  }\n\n  private createBlocks = (records: Array<WorkflowExecutionLogRecord>): Array<ActivityExecutionEventBlock> => {\n    const startedEvents = records.filter(x => x.eventName == 'Started');\n    const completedEvents = records.filter(x => x.eventName == 'Completed');\n    const faultedEvents = records.filter(x => x.eventName == 'Faulted');\n    const suspendedEvents = records.filter(x => x.eventName == 'Suspended');\n\n    const blocks = startedEvents.map(startedRecord => {\n      const completedRecord = completedEvents.find(x => x.activityInstanceId == startedRecord.activityInstanceId);\n      const faultedRecord = faultedEvents.find(x => x.activityInstanceId == startedRecord.activityInstanceId);\n      const suspendedRecord = suspendedEvents.find(x => x.activityInstanceId == startedRecord.activityInstanceId);\n      const duration = !!completedRecord ? getDuration(completedRecord.timestamp, startedRecord.timestamp) : null;\n\n      return {\n        nodeId: startedRecord.nodeId,\n        activityId: startedRecord.activityId,\n        activityInstanceId: startedRecord.activityInstanceId,\n        parentActivityInstanceId: startedRecord.parentActivityInstanceId,\n        completed: !!completedRecord,\n        faulted: !!faultedRecord,\n        suspended: !!suspendedRecord,\n        timestamp: startedRecord.timestamp,\n        duration: duration,\n        startedRecord: startedRecord,\n        completedRecord: completedRecord,\n        faultedRecord: faultedRecord,\n        suspendedRecord: suspendedRecord,\n        children: []\n      };\n    });\n\n    for (const block of blocks)\n      block.children = this.findChildBlocks(blocks, block.activityInstanceId);\n\n    return blocks;\n  };\n\n  private findChildBlocks = (blocks: Array<ActivityExecutionEventBlock>, parentActivityInstanceId?: string): Array<ActivityExecutionEventBlock> => {\n    if (blocks.length == 0)\n      return [];\n\n    return !!parentActivityInstanceId\n      ? blocks.filter(x => x.parentActivityInstanceId == parentActivityInstanceId)\n      : blocks.filter(x => !x.parentActivityInstanceId);\n  }\n\n  private onBlockClick = (e: MouseEvent, block: ActivityExecutionEventBlock) => {\n    e.preventDefault();\n\n    const existingBlock = this.expandedBlocks.find(x => x == block);\n    this.expandedBlocks = existingBlock ? this.expandedBlocks.filter(x => x != existingBlock) : [...this.expandedBlocks, block];\n  };\n\n  private onJournalItemClick = async (e: MouseEvent, block: ActivityExecutionEventBlock, activity: Activity) => {\n    e.preventDefault();\n    this.journalItemSelected.emit({activity: activity, executionEventBlock: block, activityNode: this.journalActivityMap[block.nodeId]});\n  };\n\n  private sortByTimestamp(blocks: ActivityExecutionEventBlock[]) {\n    return blocks.sort(function (x, y) {\n      if (x.timestamp > y.timestamp)\n        return 1;\n      return -1;\n    });\n  }\n\n  private createActivityMapForJournal() {\n    const workflowDefinition = this.model.workflowDefinition;\n\n    // Create dummy root workflow to match structure of workflow execution log entries in order to generate the right node IDs.\n    const workflow: Workflow = {\n      type: 'Elsa.Workflow',\n      version: workflowDefinition.version,\n      id: \"Workflow1\",\n      root: workflowDefinition.root,\n      variables: workflowDefinition.variables,\n      metadata: {},\n      customProperties: {}\n    }\n\n    const graph = walkActivities(workflow);\n    const nodes = flatten(graph);\n    const map = new Set<ActivityNode>();\n\n    for (const node of nodes)\n      map[node.nodeId] = node;\n\n    this.journalActivityMap = map;\n    this.blocks = this.blocks.filter(x => !!map[x.nodeId]);\n  }\n}\n"],"mappings":"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"}