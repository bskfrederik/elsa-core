{"version":3,"names":["ProviderTypePicker","this","onChange","e","inputElement","target","inputContext","inputChanged","value","SyntaxNames","Literal","onExpressionChanged","detail","expression","syntax","render","inputDescriptor","fieldName","name","fieldId","displayName","description","allProviders","descriptors","activatedProviders","_b","_a","workflowDefinition","customProperties","WorkflowContextProviderTypesKey","availableProviders","filter","x","includes","type","input","getInputPropertyValue","_d","_c","defaultSyntax","_e","currentValue","undefined","defaultValue","toString","h","label","hint","id","selected","map","descriptor","WorkflowDefinitionTunnel","injectProps"],"sources":["./src/modules/workflow-contexts/components/provider-type-picker.tsx"],"sourcesContent":["import {Component, Prop, h, State} from '@stencil/core';\r\nimport {LiteralExpression, SyntaxNames} from \"../../../models\";\r\nimport {ActivityInputContext} from \"../../../services/activity-input-driver\";\r\nimport {getInputPropertyValue} from \"../../../utils\";\r\nimport {ExpressionChangedArs} from \"../../../components/shared/input-control-switch/input-control-switch\";\r\nimport {WorkflowContextProviderDescriptor} from \"../services/api\";\r\nimport WorkflowDefinitionTunnel, {WorkflowDefinitionState} from \"../../workflow-definitions/state\";\r\nimport {WorkflowDefinition} from \"../../workflow-definitions/models/entities\";\r\nimport {WorkflowContextProviderTypesKey} from \"../constants\";\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-context-provider-type-picker-input',\r\n  shadow: false\r\n})\r\nexport class ProviderTypePicker {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n  @Prop() descriptors: Array<WorkflowContextProviderDescriptor> = [];\r\n  @Prop() workflowDefinition: WorkflowDefinition;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const description = inputDescriptor.description;\r\n    const allProviders: Array<WorkflowContextProviderDescriptor> = this.descriptors;\r\n    const activatedProviders: Array<string> = this.workflowDefinition?.customProperties[WorkflowContextProviderTypesKey] ?? [];\r\n    const availableProviders = allProviders.filter(x => activatedProviders.includes(x.type));\r\n    const input = getInputPropertyValue(inputContext);\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const value = (input?.expression as LiteralExpression)?.value;\r\n    let currentValue = value;\r\n\r\n    if (currentValue == undefined) {\r\n      const defaultValue = inputDescriptor.defaultValue;\r\n      currentValue = defaultValue ? defaultValue.toString() : undefined;\r\n    }\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={description} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n          <option value=\"\" selected={(!currentValue || currentValue == \"\")}></option>\r\n          {availableProviders.map(descriptor => <option value={descriptor.type} selected={descriptor.type == currentValue}>{descriptor.name}</option>)}\r\n        </select>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    this.inputContext.inputChanged(inputElement.value, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\nWorkflowDefinitionTunnel.injectProps(ProviderTypePicker, ['workflowDefinition']);\r\n"],"mappings":"4UAcaA,EAAkB,M,yBAmCrBC,KAAAC,SAAYC,IAClB,MAAMC,EAAeD,EAAEE,OACvBJ,KAAKK,aAAaC,aAAaH,EAAaI,MAAOC,EAAYC,QAAQ,EAGjET,KAAAU,oBAAuBR,IAC7BF,KAAKK,aAAaC,aAAaJ,EAAES,OAAOC,WAAYV,EAAES,OAAOE,OAAO,E,6CAvCN,G,kCAGzDC,S,cACL,MAAMT,EAAeL,KAAKK,aAC1B,MAAMU,EAAkBV,EAAaU,gBACrC,MAAMC,EAAYD,EAAgBE,KAClC,MAAMC,EAAUH,EAAgBE,KAChC,MAAME,EAAcJ,EAAgBI,YACpC,MAAMC,EAAcL,EAAgBK,YACpC,MAAMC,EAAyDrB,KAAKsB,YACpE,MAAMC,GAAoCC,GAAAC,EAAAzB,KAAK0B,sBAAkB,MAAAD,SAAA,SAAAA,EAAEE,iBAAiBC,MAAgC,MAAAJ,SAAA,EAAAA,EAAI,GACxH,MAAMK,EAAqBR,EAAaS,QAAOC,GAAKR,EAAmBS,SAASD,EAAEE,QAClF,MAAMC,EAAQC,EAAsB9B,GACpC,MAAMQ,GAASuB,GAAAC,EAAAH,IAAK,MAALA,SAAK,SAALA,EAAOtB,cAAU,MAAAyB,SAAA,SAAAA,EAAEJ,QAAI,MAAAG,SAAA,EAAAA,EAAIrB,EAAgBuB,cAC1D,MAAM/B,GAAQgC,EAACL,IAAK,MAALA,SAAK,SAALA,EAAOtB,cAAgC,MAAA2B,SAAA,SAAAA,EAAEhC,MACxD,IAAIiC,EAAejC,EAEnB,GAAIiC,GAAgBC,UAAW,CAC7B,MAAMC,EAAe3B,EAAgB2B,aACrCF,EAAeE,EAAeA,EAAaC,WAAaF,S,CAG1D,OACEG,EAAA,6BAA2BC,MAAO1B,EAAa2B,KAAM1B,EAAaP,OAAQA,EAAQD,WAAYL,EAAOG,oBAAqBV,KAAKU,qBAC7HkC,EAAA,UAAQG,GAAI7B,EAASD,KAAMD,EAAWf,SAAUC,GAAKF,KAAKC,SAASC,IACjE0C,EAAA,UAAQrC,MAAM,GAAGyC,UAAYR,GAAgBA,GAAgB,KAC5DX,EAAmBoB,KAAIC,GAAcN,EAAA,UAAQrC,MAAO2C,EAAWjB,KAAMe,SAAUE,EAAWjB,MAAQO,GAAeU,EAAWjC,S,GAevIkC,EAAyBC,YAAYrD,EAAoB,CAAC,8B"}