{"file":"elsa-variables-editor.entry.esm.js","mappings":"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","names":["descriptorsStore"],"sources":["./src/modules/workflow-definitions/components/workflow-properties/variables-editor.tsx"],"sourcesContent":["import {Component, Event, EventEmitter, h, Prop, State, Watch} from \"@stencil/core\";\r\nimport {StorageDriverDescriptor, Variable} from \"../../../../models\";\r\nimport descriptorsStore from \"../../../../data/descriptors-store\";\r\nimport {Container} from \"typedi\";\r\nimport {ModalActionClickArgs, ModalActionDefinition, ModalActionType, ModalDialogInstance, ModalDialogService} from \"../../../../components/shared/modal-dialog\";\r\nimport {DeleteIcon, EditIcon} from \"../../../../components/icons/tooling\";\r\n\r\n@Component({\r\n  tag: 'elsa-variables-editor',\r\n  shadow: false\r\n})\r\nexport class VariablesEditor {\r\n  private readonly modalDialogService: ModalDialogService;\r\n  private readonly saveAction: ModalActionDefinition;\r\n  private modalDialogInstance: ModalDialogInstance;\r\n\r\n  constructor() {\r\n    this.modalDialogService = Container.get(ModalDialogService);\r\n\r\n    this.saveAction = {\r\n      name: 'Save',\r\n      type: ModalActionType.Submit,\r\n      text: 'Save',\r\n      isPrimary: true,\r\n      onClick: this.onVariableChanged\r\n    };\r\n  }\r\n\r\n  @Prop() variables?: Array<Variable>;\r\n  @Event() variablesChanged: EventEmitter<Variable[]>;\r\n  @State() variablesState: Array<Variable> = [];\r\n\r\n  @Watch('variables')\r\n  onVariablesPropChanged(value: Array<Variable>) {\r\n    this.variablesState = !!this.variables ? [...this.variables] : [];\r\n  }\r\n\r\n  componentWillLoad() {\r\n    this.onVariablesPropChanged(this.variables);\r\n  }\r\n\r\n  render() {\r\n    const variables = this.variables;\r\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\r\n\r\n    return (\r\n      <div>\r\n        <div class=\"tw-flex tw-justify-end tw-m-4\">\r\n          <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddVariableClick()}>Add variable</button>\r\n        </div>\r\n        <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\r\n          <table class=\"default-table\">\r\n            <thead>\r\n            <tr>\r\n              <th scope=\"col\">Name</th>\r\n              <th scope=\"col\">Type</th>\r\n              <th scope=\"col\">Storage</th>\r\n              <th scope=\"col\"/>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {variables.map(variable => {\r\n                const storage = storageDrivers.find(x => x.typeName == variable.storageDriverTypeName);\r\n                const storageName = storage?.displayName ?? '-';\r\n                const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == variable.typeName);\r\n                const typeDisplayName = descriptor?.displayName ?? variable.typeName;\r\n\r\n                return (\r\n                  <tr>\r\n                    <td class=\"tw-whitespace-nowrap\">{variable.name}</td>\r\n                    <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\r\n                    <td>{storageName}</td>\r\n                    <td class=\"tw-pr-6\">\r\n                      <elsa-context-menu\r\n                        menuItems={[\r\n                          {text: 'Edit', handler: e => this.onEditClick(e, variable), icon: <EditIcon/>},\r\n                          {text: 'Delete', handler: e => this.onDeleteClick(e, variable), icon: <DeleteIcon/>},\r\n                        ]}\r\n                      />\r\n                    </td>\r\n                  </tr>);\r\n              }\r\n            )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getVariableNameExists = (name: string): boolean => !!this.variables.find(x => x.name == name);\r\n\r\n  private updateVariablesState = (value: Array<Variable>) => {\r\n    this.variablesState = value;\r\n    this.variablesChanged.emit(value);\r\n  };\r\n\r\n  private generateNewVariableName = () => {\r\n    const variables = this.variables;\r\n    let counter = variables.length;\r\n\r\n    while (true) {\r\n      const newVariableName = `Variable${++counter}`;\r\n\r\n      if (!this.getVariableNameExists(newVariableName))\r\n        return newVariableName;\r\n    }\r\n  };\r\n\r\n  private onAddVariableClick = async () => {\r\n    const newVariableName = this.generateNewVariableName();\r\n    const variable: Variable = {id: '', name: newVariableName, typeName: 'Object', value: null, isArray: false};\r\n\r\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]})\r\n  };\r\n\r\n  private onEditClick = async (e: Event, variable: Variable) => {\r\n    e.preventDefault();\r\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]});\r\n  };\r\n\r\n  private onDeleteClick = (e: Event, variable: Variable) => {\r\n    e.preventDefault();\r\n    const variables = this.variables.filter(x => x != variable);\r\n    this.updateVariablesState(variables);\r\n  };\r\n\r\n  private onVariableChanged = async (a: ModalActionClickArgs) => {\r\n    const updatedVariable = await (a.instance.modalDialogContentRef as HTMLElsaVariableEditorDialogContentElement).getVariable();\r\n    let variables = this.variables;\r\n    const variableExists = !!variables.find(x => x == updatedVariable);\r\n\r\n    if (variableExists)\r\n      variables = [...variables];\r\n    else\r\n      variables = [...variables, updatedVariable];\r\n\r\n    variables = variables.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\r\n\r\n    this.updateVariablesState(variables);\r\n  };\r\n}\r\n"],"version":3}