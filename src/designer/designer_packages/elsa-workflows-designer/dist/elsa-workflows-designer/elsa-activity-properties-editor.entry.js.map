{"file":"elsa-activity-properties-editor.entry.esm.js","mappings":"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","names":["descriptorsStore","camelCase","uuid"],"sources":["./src/modules/workflow-definitions/components/activity-properties/activity-properties-editor.tsx"],"sourcesContent":["import {Component, Event, EventEmitter, h, Method, Prop, State} from '@stencil/core';\r\nimport {camelCase} from 'lodash';\r\nimport {v4 as uuid} from 'uuid';\r\nimport {Activity, ActivityDescriptor, ActivityInput, ActivityKind, ActivityOutput, Expression, InputDescriptor, OutputDescriptor, PropertyDescriptor, TabChangedArgs, TabDefinition, Variable} from '../../../../models';\r\nimport {EventBus, InputDriverRegistry} from \"../../../../services\";\r\nimport {Container} from \"typedi\";\r\nimport {ActivityInputContext} from \"../../../../services/activity-input-driver\";\r\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\r\nimport {isNullOrWhitespace} from \"../../../../utils\";\r\nimport descriptorsStore from \"../../../../data/descriptors-store\";\r\nimport {ActivityPropertyPanelEvents, ActivityUpdatedArgs, DeleteActivityRequestedArgs} from \"../../models/ui\";\r\nimport InputControlSwitchContextState from \"../../../../components/shared/input-control-switch/state\";\r\nimport {OutputDefinition} from \"../../models/entities\";\r\nimport {RenderActivityInputContext, RenderActivityPropsContext} from \"../models\";\r\n\r\n@Component({\r\n  tag: 'elsa-activity-properties-editor',\r\n})\r\nexport class ActivityPropertiesEditor {\r\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\r\n  private renderContext: RenderActivityPropsContext;\r\n  private readonly inputDriverRegistry: InputDriverRegistry;\r\n  private readonly eventBus: EventBus;\r\n\r\n  constructor() {\r\n    this.inputDriverRegistry = Container.get(InputDriverRegistry);\r\n    this.eventBus = Container.get(EventBus);\r\n  }\r\n\r\n  @Prop() workflowDefinitionId: string;\r\n  @Prop() activity?: Activity;\r\n  @Prop() variables: Array<Variable> = [];\r\n  @Prop() outputs: Array<OutputDefinition> = [];\r\n  @Prop() isReadonly: boolean;\r\n  @Event() activityUpdated: EventEmitter<ActivityUpdatedArgs>;\r\n  @Event() deleteActivityRequested: EventEmitter<DeleteActivityRequestedArgs>;\r\n  @State() private selectedTabIndex: number = 0;\r\n\r\n  @Method()\r\n  async show(): Promise<void> {\r\n    await this.slideOverPanel.show();\r\n  }\r\n\r\n  @Method()\r\n  async hide(): Promise<void> {\r\n    await this.slideOverPanel.hide();\r\n  }\r\n\r\n  async componentWillRender() {\r\n    const activity = this.activity;\r\n    const activityDescriptor = this.findActivityDescriptor();\r\n    const title = activityDescriptor?.displayName ?? activityDescriptor?.typeName ?? 'Unknown Activity';\r\n    const inputs = this.createInputs();\r\n    const tabs = this.createTabs();\r\n\r\n    const onActivityChanged = () => this.activityUpdated.emit({\r\n      activity,\r\n      activityDescriptor\r\n    });\r\n\r\n    this.renderContext = {\r\n      activity,\r\n      activityDescriptor,\r\n      title,\r\n      inputs,\r\n      tabs,\r\n      notifyActivityChanged: () => onActivityChanged()\r\n    }\r\n\r\n    await this.eventBus.emit(ActivityPropertyPanelEvents.Displaying, this, this.renderContext);\r\n  }\r\n\r\n  render() {\r\n    const {activity, activityDescriptor, tabs} = this.renderContext;\r\n    const actions = [];\r\n    const mainTitle = activity.id;\r\n    const subTitle = activityDescriptor.displayName;\r\n    const selectedTabIndex = this.getSelectedTabIndex(tabs);\r\n\r\n    return (\r\n      <elsa-form-panel\r\n        isReadonly={this.isReadonly}\r\n        mainTitle={mainTitle}\r\n        subTitle={subTitle}\r\n        orientation=\"Landscape\"\r\n        tabs={tabs}\r\n        selectedTabIndex={selectedTabIndex}\r\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}\r\n        actions={actions}/>\r\n    );\r\n  }\r\n\r\n  private getSelectedTabIndex = (tabs: Array<TabDefinition>): number => {\r\n    let selectedTabIndex = this.selectedTabIndex;\r\n\r\n    if (selectedTabIndex >= tabs.length)\r\n      selectedTabIndex = tabs.length - 1;\r\n\r\n    if (selectedTabIndex < 0)\r\n      selectedTabIndex = 0;\r\n\r\n    return selectedTabIndex;\r\n  };\r\n\r\n  private createTabs = (): Array<TabDefinition> => {\r\n    const activityDescriptor = this.findActivityDescriptor();\r\n    const isTask = activityDescriptor.kind == ActivityKind.Task;\r\n\r\n    const commonTab: TabDefinition = {\r\n      displayText: 'General',\r\n      order: 0,\r\n      content: () => this.renderCommonTab()\r\n    };\r\n\r\n    const inputTab: TabDefinition = {\r\n      displayText: 'Settings',\r\n      order: 10,\r\n      content: () => this.renderInputTab()\r\n    };\r\n\r\n    const tabs = !!activityDescriptor ? [inputTab, commonTab] : [];\r\n\r\n    if (activityDescriptor.outputs.length > 0) {\r\n      const outputTab: TabDefinition = {\r\n        displayText: 'Output',\r\n        order: 11,\r\n        content: () => this.renderOutputTab()\r\n      };\r\n\r\n      tabs.push(outputTab);\r\n    }\r\n\r\n    if (isTask) {\r\n      const taskTab: TabDefinition = {\r\n        displayText: 'Task',\r\n        order: 12,\r\n        content: () => this.renderTaskTab()\r\n      };\r\n\r\n      tabs.push(taskTab);\r\n    }\r\n\r\n    return tabs;\r\n  };\r\n\r\n  private createInputs = (): Array<RenderActivityInputContext> => {\r\n    const activity = this.activity;\r\n    const activityId = activity.id;\r\n    const activityDescriptor = this.findActivityDescriptor();\r\n    const driverRegistry = this.inputDriverRegistry;\r\n\r\n    const onInputChanged = (inputDescriptor: InputDescriptor) => this.activityUpdated.emit({\r\n      newId: activityId,\r\n      originalId: activityId,\r\n      activity,\r\n      activityDescriptor\r\n    });\r\n\r\n    const filteredInputs = activityDescriptor.inputs.filter(x => x.isBrowsable);\r\n\r\n    return filteredInputs.map(inputDescriptor => {\r\n      const renderInputContext: ActivityInputContext = {\r\n        activity: activity,\r\n        activityDescriptor: activityDescriptor,\r\n        inputDescriptor,\r\n        notifyInputChanged: () => onInputChanged(inputDescriptor),\r\n        inputChanged: (v, s) => this.onInputPropertyEditorChanged(inputDescriptor, v, s)\r\n      };\r\n\r\n      const driver = driverRegistry.get(renderInputContext);\r\n      const workflowDefinitionId = this.workflowDefinitionId;\r\n      const activityType = activityDescriptor.typeName;\r\n      const propertyName = inputDescriptor.name;\r\n\r\n      const control =\r\n        <InputControlSwitchContextState.Provider state={{workflowDefinitionId, activityType, propertyName}}>\r\n          {driver?.renderInput(renderInputContext)}\r\n        </InputControlSwitchContextState.Provider>;\r\n\r\n      return {\r\n        inputContext: renderInputContext,\r\n        inputControl: control,\r\n      }\r\n    });\r\n  };\r\n\r\n  private findActivityDescriptor = (): ActivityDescriptor => !!this.activity ? descriptorsStore.activityDescriptors.find(x => x.typeName == this.activity.type && x.version == this.activity.version) : null;\r\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex\r\n\r\n  private onActivityIdChanged = (e: any) => {\r\n    const activity = this.activity;\r\n    const originalId = activity.id;\r\n    const inputElement = e.target as HTMLInputElement;\r\n    const newId = inputElement.value;\r\n    const activityDescriptor = this.findActivityDescriptor();\r\n\r\n    activity.id = newId;\r\n\r\n    this.activityUpdated.emit({\r\n      newId: newId,\r\n      originalId: originalId,\r\n      activity,\r\n      activityDescriptor\r\n    });\r\n  }\r\n\r\n  private onActivityDisplayTextChanged(e: any) {\r\n    const activity: Activity = this.activity;\r\n    const inputElement = e.target as HTMLInputElement;\r\n\r\n    activity.metadata = {\r\n      ...activity.metadata,\r\n      displayText: inputElement.value\r\n    };\r\n\r\n    this.updateActivity();\r\n  }\r\n\r\n  private onCanStartWorkflowChanged(e: any) {\r\n    const activity: Activity = this.activity;\r\n    const inputElement = e.target as HTMLInputElement;\r\n\r\n    activity.customProperties.canStartWorkflow = inputElement.checked;\r\n\r\n    this.updateActivity();\r\n  }\r\n\r\n  private onRunAsynchronouslyChanged(e: any) {\r\n    const activity: Activity = this.activity;\r\n    const inputElement = e.target as HTMLInputElement;\r\n\r\n    activity.customProperties.RunAsynchronously = inputElement.checked;\r\n\r\n    this.updateActivity();\r\n  }\r\n\r\n  private onInputPropertyEditorChanged = (inputDescriptor: InputDescriptor, propertyValue: any, syntax: string) => {\r\n    const activity = this.activity;\r\n    const propertyName = inputDescriptor.name;\r\n    const isWrapped = inputDescriptor.isWrapped;\r\n    const camelCasePropertyName = camelCase(propertyName);\r\n\r\n    if (isWrapped) {\r\n      let input: ActivityInput = activity[camelCasePropertyName];\r\n\r\n      const expression: Expression = {\r\n        type: syntax,\r\n        value: propertyValue // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\r\n      };\r\n\r\n      if (!input) {\r\n        input = {\r\n          typeName: inputDescriptor.typeName,\r\n          memoryReference: {id: uuid()},\r\n          expression: expression\r\n        }\r\n      }\r\n\r\n      input.expression = expression;\r\n      activity[camelCasePropertyName] = input;\r\n\r\n    } else {\r\n      activity[camelCasePropertyName] = propertyValue;\r\n    }\r\n    this.updateActivity(propertyName);\r\n  }\r\n\r\n  private onOutputPropertyEditorChanged = (outputDescriptor: OutputDescriptor, outputTargetValue: string) => {\r\n    const activity = this.activity;\r\n    const propertyName = outputDescriptor.name;\r\n    const camelCasePropertyName = camelCase(propertyName);\r\n    const outputTargetValuePair = outputTargetValue.split('::');\r\n    const outputTargetId = outputTargetValuePair[1];\r\n\r\n    const property: ActivityOutput = {\r\n      typeName: outputDescriptor.typeName,\r\n      memoryReference: {\r\n        id: outputTargetId\r\n      }\r\n    }\r\n\r\n    activity[camelCasePropertyName] = property;\r\n\r\n    this.updateActivity(propertyName);\r\n  }\r\n\r\n  private updateActivity = (propertyName?: string, propertyDescriptor?: PropertyDescriptor) => {\r\n    const activityDescriptor = this.findActivityDescriptor();\r\n    const activity = this.activity;\r\n    const activityId = activity.id;\r\n\r\n    this.activityUpdated.emit({\r\n      newId: activityId,\r\n      originalId: activityId,\r\n      activity,\r\n      activityDescriptor\r\n    });\r\n  }\r\n\r\n  private renderCommonTab = () => {\r\n    const {activity} = this.renderContext;\r\n    const activityId = activity.id;\r\n    const displayText: string = activity.metadata?.displayText ?? '';\r\n    const canStartWorkflow: boolean = activity.customProperties?.canStartWorkflow ?? activity?.customProperties?.CanStartWorkflow ?? activity.canStartWorkflow ?? false;\r\n    const key = `${activityId}`;\r\n\r\n    return <div key={key}>\r\n      <FormEntry fieldId=\"ActivityId\" label=\"ID\" hint=\"The ID of the activity.\">\r\n        <input type=\"text\" name=\"ActivityId\" id=\"ActivityId\" value={activityId} onChange={e => this.onActivityIdChanged(e)}/>\r\n      </FormEntry>\r\n\r\n      <FormEntry fieldId=\"ActivityDisplayText\" label=\"Display Text\" hint=\"The text to display on the activity in the designer.\">\r\n        <input type=\"text\" name=\"ActivityDisplayText\" id=\"ActivityDisplayText\" value={displayText} onChange={e => this.onActivityDisplayTextChanged(e)}/>\r\n      </FormEntry>\r\n\r\n      <CheckboxFormEntry fieldId=\"CanStartWorkflow\" label=\"Can start workflow\" hint=\"When enabled, this activity can be used as a trigger to automatically start the workflow.\">\r\n        <input type=\"checkbox\" name=\"CanStartWorkflow\" id=\"CanStartWorkflow\" value={\"true\"} checked={canStartWorkflow} onChange={e => this.onCanStartWorkflowChanged(e)}/>\r\n      </CheckboxFormEntry>\r\n\r\n    </div>\r\n  };\r\n\r\n  private renderInputTab = () => {\r\n    const {activity, inputs} = this.renderContext;\r\n    const activityId = activity.id;\r\n    const key = `${activityId}`;\r\n\r\n    return <div key={key}>\r\n      {inputs.filter(x => !!x.inputControl).map(propertyContext => {\r\n        const key = `${activity.id}-${propertyContext.inputContext.inputDescriptor.name}`;\r\n        return <div key={key}>\r\n          {propertyContext.inputControl}\r\n        </div>;\r\n      })}\r\n    </div>\r\n  };\r\n\r\n  private renderOutputTab = () => {\r\n    const {activity, activityDescriptor} = this.renderContext;\r\n    const outputs = activityDescriptor.outputs;\r\n    const outputDefinitions = this.outputs || [];\r\n    const variables = this.variables || [];\r\n    const activityId = activity.id;\r\n    const key = `${activityId}`;\r\n    const outputTargetOptions: Array<any> = [null];\r\n\r\n    if (variables.length > 0) {\r\n      outputTargetOptions.push({label: 'Variables', items: [...variables.map(x => ({value: x.id, name: x.name}))], kind: 'variable'});\r\n    }\r\n\r\n    // Disable this for now until we rework the input output handling at the engine level.\r\n    // if (outputDefinitions.length > 0)\r\n    //   outputTargetOptions.push({label: 'Outputs', items: [...outputDefinitions.map(x => ({value: x.name, name: x.name}))], kind: 'output'});\r\n\r\n    return <div key={key}>\r\n      {outputs.map(propertyDescriptor => {\r\n        const key = `${activity.id}-${propertyDescriptor.name}`;\r\n        const displayName = isNullOrWhitespace(propertyDescriptor.displayName) ? propertyDescriptor.name : propertyDescriptor.displayName;\r\n        const propertyName = camelCase(propertyDescriptor.name);\r\n        const propertyValue = activity[propertyName] as ActivityOutput;\r\n        const propertyType = propertyDescriptor.typeName;\r\n        const typeDescriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == propertyType);\r\n        const propertyTypeName = typeDescriptor?.displayName ?? propertyType;\r\n\r\n        return <div key={key}>\r\n          <FormEntry fieldId={key} label={displayName} hint={propertyDescriptor.description}>\r\n\r\n            <div class=\"tw-relative\">\r\n              <select onChange={e => this.onOutputPropertyEditorChanged(propertyDescriptor, (e.currentTarget as HTMLSelectElement).value)}>\r\n                {outputTargetOptions.map(outputTarget => {\r\n                  if (!outputTarget) {\r\n                    return <option value=\"\" selected={!propertyValue?.memoryReference?.id}>-</option>\r\n                  }\r\n\r\n                  const items = outputTarget.items;\r\n\r\n                  return (\r\n                    <optgroup label={outputTarget.label}>\r\n                      {items.map(item => {\r\n                        const isSelected = propertyValue?.memoryReference?.id == item.value;\r\n                        return <option value={`${outputTarget.kind}::${item.value}`} selected={isSelected}>{item.name}</option>;\r\n                      })}\r\n                    </optgroup>);\r\n                })}\r\n              </select>\r\n              <div class=\"tw-pointer-events-none tw-absolute tw-inset-y-0 tw-right-0 tw-flex tw-items-center pr-10\">\r\n                <span class=\"tw-text-gray-500 sm:tw-text-sm\">{propertyTypeName}</span>\r\n              </div>\r\n            </div>\r\n          </FormEntry>\r\n        </div>;\r\n      })}\r\n    </div>\r\n  };\r\n\r\n  private renderTaskTab = () => {\r\n    const {activity} = this.renderContext;\r\n    const activityId = activity.id;\r\n    const runAsynchronously: boolean = activity.customProperties?.RunAsynchronously ?? activity.runAsynchronously ?? false;\r\n    const key = `${activityId}:task`;\r\n\r\n    return <div key={key}>\r\n      <CheckboxFormEntry fieldId=\"RunAsynchronously\" label=\"Execute asynchronously\" hint=\"When enabled, this activity will execute asynchronously and suspend workflow execution until the activity is finished.\">\r\n        <input type=\"checkbox\" name=\"RunAsynchronously\" id=\"RunAsynchronously\" value={\"true\"} checked={runAsynchronously} onChange={e => this.onRunAsynchronouslyChanged(e)}/>\r\n      </CheckboxFormEntry>\r\n    </div>\r\n  };\r\n}\r\n"],"version":3}