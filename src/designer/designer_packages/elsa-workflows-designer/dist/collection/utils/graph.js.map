{"version":3,"file":"graph.js","sourceRoot":"","sources":["../../src/utils/graph.ts"],"names":[],"mappings":"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","sourcesContent":["import {Edge, Graph, Node} from \"@antv/x6\";\r\nimport {PortManager} from \"@antv/x6/lib/model/port\";\r\nimport {Connection} from \"../modules/flowchart/models\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport {Activity} from \"../models\";\r\nimport optionsStore from '../data/designer-options-store';\r\n\r\nexport function rebuildGraph(graph: Graph) {\r\n  graph.getNodes().forEach((node: Node<Node.Properties>) => {\r\n    autoOrientConnections(graph, node);\r\n    adjustPortMarkupByNode(node);\r\n  });\r\n}\r\n\r\nexport function autoOrientConnections(graph: Graph, selectedNode: Node) {\r\n  const neighbors = graph.getNeighbors(selectedNode);\r\n  const selectedCenter = selectedNode.getBBox().center;\r\n  const nodeCouplesWithPositions = neighbors.map((neighbourNode) => {\r\n    return {\r\n      ...calculatePortPositionsOfNodeCouple(selectedCenter.x, selectedCenter.y, neighbourNode.getBBox().center.x, neighbourNode.getBBox().center.y),\r\n      selectedNode: selectedNode,\r\n      neighbourNode: neighbourNode\r\n    }\r\n  });\r\n  nodeCouplesWithPositions.forEach(couple => updatePortsWithNewPositions(graph, couple.selectedNode, couple.portPositionOfSelectedNode, couple.neighbourNode as Node, couple.portPositionOfNeighbourNode));\r\n}\r\n\r\nfunction updatePortsWithNewPositions(\r\n  graph: Graph,\r\n  selectedNode: Node,\r\n  portPositionOfSelectedNode: \"left\" | \"right\" | \"top\" | \"bottom\",\r\n  neighbourNode: Node,\r\n  portPositionOfNeighbourNode: \"left\" | \"right\" | \"top\" | \"bottom\"\r\n) {\r\n  updatePortsAndEdgeOfNodeCouple(graph, selectedNode, neighbourNode, portPositionOfSelectedNode, portPositionOfNeighbourNode);\r\n  updatePortsAndEdgeOfNodeCouple(graph, neighbourNode, selectedNode, portPositionOfNeighbourNode, portPositionOfSelectedNode);\r\n\r\n  adjustPortMarkupByNode(selectedNode);\r\n  adjustPortMarkupByNode(neighbourNode);\r\n}\r\n\r\nfunction calculatePositionsForInflexibleNode(sourceNode: Node<Node.Properties>, targetNodes: Node<Node.Properties>[]):\r\n  { sourceNode: Node<Node.Properties>, sourceNodePosition: \"left\" | \"right\" | \"top\" | \"bottom\"; targetNode: Node<Node.Properties>, targetNodePosition: \"left\" | \"right\" | \"top\" | \"bottom\"; }[] {\r\n  const sourceNodeCenter = sourceNode.getBBox().center;\r\n  const dxAverageForTargetNodes = targetNodes.map(node => node.getBBox().center.x).reduce((a, b) => a + b, 0) / targetNodes.length;\r\n  const dyAverageForTargetNodes = targetNodes.map(node => node.getBBox().center.y).reduce((a, b) => a + b, 0) / targetNodes.length;\r\n\r\n  const sourcePortWithNewPosition = {node: sourceNode, position: calculatePortPositionsOfNodeCouple(sourceNodeCenter.x, sourceNodeCenter.y, dxAverageForTargetNodes, dyAverageForTargetNodes).portPositionOfSelectedNode};\r\n  return targetNodes.map((targetNode) => {\r\n    return {\r\n      sourceNode: sourcePortWithNewPosition.node,\r\n      sourceNodePosition: sourcePortWithNewPosition.position,\r\n      targetNode: targetNode,\r\n      targetNodePosition: calculatePortPositionsOfNodeCouple(sourceNode.getBBox().center.x, sourceNode.getBBox().center.y, targetNode.getBBox().center.x, targetNode.getBBox().center.y).portPositionOfNeighbourNode\r\n    }\r\n  });\r\n}\r\n\r\nfunction calculatePortPositionsOfNodeCouple(selectedNodeX: number, selectedNodeY: number, neighbourNodeX: number, neighbourNodeY: number): { portPositionOfSelectedNode: \"left\" | \"right\" | \"top\" | \"bottom\"; portPositionOfNeighbourNode: \"left\" | \"right\" | \"top\" | \"bottom\"; } {\r\n  const dx = selectedNodeX - neighbourNodeX;\r\n  const dy = selectedNodeY - neighbourNodeY;\r\n  if (dx >= 0 && dy >= 0) {\r\n    if (dx > dy) {\r\n      return {portPositionOfSelectedNode: \"left\", portPositionOfNeighbourNode: \"right\"};\r\n    } else {\r\n      return {portPositionOfSelectedNode: \"top\", portPositionOfNeighbourNode: \"bottom\"};\r\n    }\r\n  } else if (dx >= 0 && dy <= 0) {\r\n    if (dx > -dy) {\r\n      return {portPositionOfSelectedNode: \"left\", portPositionOfNeighbourNode: \"right\"};\r\n    } else {\r\n      return {portPositionOfSelectedNode: \"bottom\", portPositionOfNeighbourNode: \"top\"};\r\n    }\r\n  } else if (dx <= 0 && dy >= 0) {\r\n    if (-dx > dy) {\r\n      return {portPositionOfSelectedNode: \"right\", portPositionOfNeighbourNode: \"left\"};\r\n    } else {\r\n      return {portPositionOfSelectedNode: \"top\", portPositionOfNeighbourNode: \"bottom\"};\r\n    }\r\n  } else if (dx <= 0 && dy <= 0) {\r\n    if (dx > dy) {\r\n      return {portPositionOfSelectedNode: \"right\", portPositionOfNeighbourNode: \"left\"};\r\n    } else {\r\n      return {portPositionOfSelectedNode: \"bottom\", portPositionOfNeighbourNode: \"left\"};\r\n    }\r\n  }\r\n}\r\n\r\nfunction updatePortsAndEdgeOfNodeCouple(graph: Graph, sourceNode: Node<Node.Properties>, targetNode: Node<Node.Properties>, portPositionOfSourceNode: string, portPositionOfTargetNode: string) {\r\n\r\n  const edge = graph.model.getEdges().find(({data}) => {\r\n    const connection: Connection = data;\r\n    const source = connection.source;\r\n    const target = connection.target;\r\n    const sourceActivityId = source.activity;\r\n    const targetActivityId = target.activity;\r\n    return sourceActivityId == sourceNode.id && targetActivityId == targetNode.id;\r\n  });\r\n\r\n  if (edge != null) {\r\n    const connection: Connection = edge.data;\r\n    const sourcePortOfConnection = connection.source.port;\r\n    if (!optionsStore.enableFlexiblePorts && isNewCalculationNeededForInflexiblePort(graph, sourceNode, sourcePortOfConnection)) {\r\n      const outgoingEdges = findOutgoingEdges(graph, sourceNode, sourcePortOfConnection);\r\n      const targetNodes = graph.getNodes().filter(node => outgoingEdges.map(edge => connection.target.activity).includes(node.id));\r\n      const nodeCouplesWithPositions = calculatePositionsForInflexibleNode(sourceNode, targetNodes);\r\n\r\n      nodeCouplesWithPositions.forEach(couple => {\r\n        updatePortsAndEdge(graph, couple.sourceNode, couple.targetNode, couple.sourceNodePosition, couple.targetNodePosition);\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    updatePortsAndEdge(graph, sourceNode, targetNode, portPositionOfSourceNode, portPositionOfTargetNode);\r\n  }\r\n}\r\n\r\nfunction isNewCalculationNeededForInflexiblePort(graph: Graph, sourceNode: Node<Node.Properties>, inflexiblePort: any) {\r\n  const portName = getPortNameByPortId(inflexiblePort);\r\n  if (portName != null && portName != \"Done\") {\r\n    const outgoingEdges = findOutgoingEdges(graph, sourceNode, inflexiblePort);\r\n    if (outgoingEdges.length > 1) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction updatePortsAndEdge(graph: Graph, sourceNode: Node<Node.Properties>, targetNode: Node<Node.Properties>, newSourceNodePosition: string, newTargetNodePosition: string) {\r\n  const edge = graph.model.getEdges().find(({data}) => {\r\n    const conn: Connection = data;\r\n    return conn.source.activity == sourceNode.id && conn.target.activity == targetNode.id;\r\n  });\r\n  const connection: Connection = edge.data;\r\n  const source = connection.source;\r\n  const sourcePort = source.port;\r\n  const target = connection.target;\r\n  const targetPort = target.port;\r\n  const sourceNodePort = sourceNode.getPort(sourcePort) ?? sourceNode.getPorts().find(p => p.type == \"out\" && getPortNameByPortId(p.id) == getPortNameByPortId(sourcePort));\r\n  const targetNodePort = targetNode.getPort(targetPort) ?? targetNode.getPorts().find(p => p.type == \"in\" && getPortNameByPortId(p.id) == getPortNameByPortId(targetPort));\r\n\r\n  if (sourceNode.getPort(sourcePort) == null || targetNode.getPort(targetPort) == null || sourceNodePort?.position != newSourceNodePosition || targetNodePort?.position != newTargetNodePosition) {\r\n    graph.removeEdge(edge);\r\n\r\n    const newSourceNodePortId = updatePort(graph, sourceNode, sourceNodePort, newSourceNodePosition);\r\n    const newTargetNodePortId = updatePort(graph, targetNode, targetNodePort, newTargetNodePosition);\r\n\r\n    graph.addEdge(createEdge({\r\n      source: {\r\n        activity: sourceNode.id,\r\n        port: newSourceNodePortId ?? sourceNodePort.id\r\n      },\r\n      target: {\r\n        activity: targetNode.id,\r\n        port: newTargetNodePortId ?? targetNodePort.id\r\n      }\r\n    }));\r\n  }\r\n}\r\n\r\nfunction hasPortAnEdge(graph: Graph, port: PortManager.PortMetadata) {\r\n  return graph.getEdges().some(({data}) => {\r\n    const connection: Connection = data;\r\n    const source = connection.source;\r\n    const sourcePort = source.port;\r\n    const target = connection.target;\r\n    const targetPort = target.port;\r\n    return sourcePort == port.id || targetPort == port.id;\r\n  });\r\n}\r\n\r\nfunction findMatchingPortForEdge(node: Node<Node.Properties>, position: string, portType: string, portName: string) {\r\n  return node.getPorts().find(p => p.position == position && p.type == portType && getPortNameByPortId(p.id) == portName);\r\n}\r\n\r\nexport function getPortNameByPortId(portId: string) {\r\n  return portId.includes('_') ? (portId.split('_')[1] == 'null' ? null : portId.split('_')[1]) : portId;\r\n}\r\n\r\nfunction findOutgoingEdges(graph: Graph, node: Node<Node.Properties>, portId: string): Edge<Edge.Properties>[] {\r\n  return graph.model.getEdges().filter(({data}) => {\r\n    const connection: Connection = data;\r\n    const source = connection.source;\r\n    const sourceActivityId = source.activity;\r\n    const sourcePort = source.port;\r\n    return sourceActivityId == node.id && getPortNameByPortId(sourcePort) == getPortNameByPortId(portId);\r\n  });\r\n}\r\n\r\nfunction updatePort(graph: Graph, node: Node<Node.Properties>, nodePort: PortManager.PortMetadata, newPortPosition: string) {\r\n  let newNodePortId = null;\r\n  if (nodePort?.position != newPortPosition) {\r\n\r\n    if (!hasPortAnEdge(graph, nodePort)) {\r\n      node.removePort(nodePort);\r\n    }\r\n\r\n    const matchingPort = findMatchingPortForEdge(node, newPortPosition, nodePort.type, getPortNameByPortId(nodePort.id));\r\n\r\n    if (matchingPort == null) {\r\n      newNodePortId = createNewPort(nodePort, node, newPortPosition);\r\n    } else {\r\n      newNodePortId = matchingPort.id;\r\n    }\r\n  }\r\n  return newNodePortId;\r\n}\r\n\r\nexport function deriveNewPortId(portId: string) {\r\n  return uuid() + '_' + getPortNameByPortId(portId);\r\n}\r\n\r\nfunction createNewPort(nodePort: PortManager.PortMetadata, node: Node<Node.Properties>, newPortPosition: string) {\r\n  const newNodePortId = deriveNewPortId(nodePort.id);\r\n\r\n  node.addPort({\r\n    ...nodePort,\r\n    group: newPortPosition,\r\n    id: newNodePortId,\r\n    position: newPortPosition,\r\n    type: nodePort.type\r\n  });\r\n  return newNodePortId;\r\n}\r\n\r\nexport function adjustPortMarkupByNode(node: Node) {\r\n  node.getPorts().forEach(port => {\r\n    if (port.type == 'out') {\r\n      node.setPortProp(port.id, \"attrs\", {\r\n        circle: {\r\n          r: 5,\r\n          magnet: true,\r\n          stroke: '#fff',\r\n          strokeWidth: 2,\r\n          fill: '#3c82f6',\r\n        },\r\n        text: {\r\n          fontSize: 12,\r\n          fill: '#888',\r\n        },\r\n      });\r\n    } else {\r\n      node.setPortProp(port.id, \"attrs\", {\r\n        circle: {\r\n          r: 5,\r\n          magnet: true,\r\n          stroke: '#3c82f6',\r\n          strokeWidth: 2,\r\n          fill: '#fff',\r\n        },\r\n        text: {\r\n          fontSize: 12,\r\n          fill: '#888',\r\n        },\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport function createEdge(connection: Connection): Edge.Metadata {\r\n  return {\r\n    shape: 'elsa-edge',\r\n    zIndex: -1,\r\n    data: connection,\r\n    source: connection.source.activity,\r\n    target: connection.target.activity,\r\n    sourcePort: connection.source.port,\r\n    targetPort: connection.target.port\r\n  };\r\n}\r\n\r\nexport function removeGuidsFromPortNames(root: Activity) {\r\n  if (root.connections?.length > 0) {\r\n    root.connections.forEach((connection: Connection) => {\r\n      connection.source.port = getPortNameByPortId(connection.source.port);\r\n      connection.target.port = getPortNameByPortId(connection.target.port);\r\n    });\r\n  }\r\n  let activitiesWithConnections = root.activities?.filter(act => act.body?.connections?.length > 0);\r\n  activitiesWithConnections.forEach(activity => {\r\n    removeGuidsFromPortNames(activity.body);\r\n  });\r\n}\r\n\r\nexport function addGuidsToPortNames(root: Activity) {\r\n  if (root.connections.length > 0) {\r\n    root.connections.forEach((connection: Connection) => {\r\n      connection.source.port = uuid() + '_' + connection.source.port;\r\n      connection.target.port = uuid() + '_' + connection.target.port;\r\n    });\r\n  }\r\n  let activitiesWithConnections = root.activities?.filter(act => act.body?.connections?.length > 0);\r\n  activitiesWithConnections.forEach(activity => {\r\n    addGuidsToPortNames(activity.body);\r\n  });\r\n}\r\n"]}