{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/components/shared/monaco-editor/utils.ts"],"names":[],"mappings":"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","sourcesContent":["ï»¿import {Mutex} from \"async-mutex\";\r\nimport {isNullOrWhitespace} from \"../../../utils\";\r\n\r\nconst win = window as any;\r\nconst require = win.require;\r\n\r\nexport interface Monaco {\r\n  editor: any;\r\n  languages: any;\r\n  KeyCode: any;\r\n  Uri: any;\r\n}\r\n\r\nexport interface EditorVariable {\r\n  variableName: string;\r\n  type: string;\r\n}\r\n\r\nexport var EditorVariables: Array<EditorVariable> = [];\r\n\r\nlet isInitialized: boolean;\r\nconst mutex = new Mutex();\r\n\r\nexport async function initializeMonacoWorker(libPath?: string): Promise<Monaco> {\r\n\r\n  return await mutex.runExclusive(async () => {\r\n\r\n    if (isInitialized) {\r\n      return win.monaco;\r\n    }\r\n\r\n    if (isNullOrWhitespace(libPath)) {\r\n      // The lib path is not set, which means external code will be responsible for loading the Monaco editor.\r\n      // In this case, spin while we wait for the editor to be loaded.\r\n\r\n      // Create a promise that will resolve after the win.monaco variable exists. Do this in a tight loop, checking for win.monaco to exist on each iteration. Within the same iteration, request the next animation frame as to not tw-block the UI.\r\n      // If we don't get win.monaco after 3 seconds, reject the promise.\r\n\r\n      return new Promise<Monaco>((resolve, reject) => {\r\n        const startTime = Date.now();\r\n        const timeout = 3000;\r\n\r\n        const checkForMonaco = () => {\r\n          if (win.monaco) {\r\n            resolve(win.monaco);\r\n            return;\r\n          }\r\n\r\n          if (Date.now() - startTime > timeout) {\r\n            reject('Monaco editor not loaded.');\r\n            return;\r\n          }\r\n\r\n          requestAnimationFrame(checkForMonaco);\r\n        };\r\n\r\n        checkForMonaco();\r\n      });\r\n\r\n    }\r\n\r\n    const origin = document.location.origin;\r\n    const baseUrl = libPath.startsWith('http') ? libPath : `${origin}/${libPath}`;\r\n\r\n    require.config({paths: {'vs': `${baseUrl}/vs`}});\r\n    win.MonacoEnvironment = {getWorkerUrl: () => proxy};\r\n\r\n    let proxy = URL.createObjectURL(new Blob([`\r\n\tself.MonacoEnvironment = {\r\n\t\tbaseUrl: '${baseUrl}'\r\n\t};\r\n\timportScripts('${baseUrl}/vs/base/worker/workerMain.js');\r\n`], {type: 'text/javascript'}));\r\n\r\n    return new Promise(resolve => {\r\n      require([\"vs/editor/editor.main\"], () => {\r\n        isInitialized = true;\r\n        registerLiquid(win.monaco);\r\n        registerSql(win.monaco);\r\n        resolve(win.monaco);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nfunction registerLiquid(monaco: any) {\r\n  monaco.languages.register({id: 'liquid'});\r\n\r\n  monaco.languages.registerCompletionItemProvider('liquid', {\r\n    provideCompletionItems: () => {\r\n      const autocompleteProviderItems = [];\r\n      const keywords = ['assign', 'capture', 'endcapture', 'increment', 'decrement',\r\n        'if', 'else', 'elsif', 'endif', 'for', 'endfor', 'break',\r\n        'continue', 'limit', 'offset', 'range', 'reversed', 'cols',\r\n        'case', 'endcase', 'when', 'tw-block', 'endblock', 'true', 'false',\r\n        'in', 'unless', 'endunless', 'cycle', 'tablerow', 'endtablerow',\r\n        'contains', 'startswith', 'endswith', 'comment', 'endcomment',\r\n        'raw', 'endraw', 'editable', 'endentitylist', 'endentityview', 'endinclude',\r\n        'endmarker', 'entitylist', 'entityview', 'forloop', 'image', 'include',\r\n        'marker', 'outputcache', 'plugin', 'style', 'text', 'widget',\r\n        'abs', 'append', 'at_least', 'at_most', 'capitalize', 'ceil', 'compact',\r\n        'concat', 'date', 'default', 'divided_by', 'downcase', 'escape',\r\n        'escape_once', 'first', 'floor', 'join', 'last', 'lstrip', 'map',\r\n        'minus', 'modulo', 'newline_to_br', 'plus', 'prepend', 'remove',\r\n        'remove_first', 'replace', 'replace_first', 'reverse', 'round',\r\n        'rstrip', 'size', 'slice', 'sort', 'sort_natural', 'split', 'strip',\r\n        'strip_html', 'strip_newlines', 'times', 'truncate', 'truncatewords',\r\n        'uniq', 'upcase', 'url_decode', 'url_encode'];\r\n\r\n      for (let i = 0; i < keywords.length; i++) {\r\n        autocompleteProviderItems.push({'label': keywords[i], kind: monaco.languages.CompletionItemKind.Keyword});\r\n      }\r\n\r\n      return {suggestions: autocompleteProviderItems};\r\n    }\r\n  });\r\n}\r\n\r\nfunction registerSql(monaco: any) {\r\n\r\n  monaco.languages.registerCompletionItemProvider('sql', {\r\n    triggerCharacters: [\"@\"],\r\n    provideCompletionItems: (model, position) => {\r\n\r\n      const word = model.getWordUntilPosition(position)\r\n\r\n      const autocompleteProviderItems = [];\r\n      for (const variable of EditorVariables) {\r\n        autocompleteProviderItems.push({\r\n          label: `${variable.variableName}: ${variable.type}`,\r\n          kind: monaco.languages.CompletionItemKind.Variable,\r\n          insertText: variable.variableName\r\n        });\r\n      }\r\n\r\n      return {suggestions: autocompleteProviderItems};\r\n    }\r\n  });\r\n\r\n}\r\n\r\n"]}