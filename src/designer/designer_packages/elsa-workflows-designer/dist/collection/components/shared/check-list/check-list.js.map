{"version":3,"file":"check-list.js","sourceRoot":"","sources":["../../../../src/components/shared/check-list/check-list.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAe,MAAM,eAAe,CAAC;AACtE,OAAO,EAAC,IAAI,EAAC,MAAM,QAAQ,CAAA;AAO3B,MAAM,OAAO,SAAS;;IAuCZ,sBAAiB,GAAG,CAAC,UAAsB,EAA0B,EAAE;MAC7E,OAAO,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,EAAE,CAAC;IACjF,CAAC,CAAC;IAEM,mBAAc,GAAG,CAAC,CAAQ,EAAE,EAAE;MACpC,MAAM,QAAQ,GAAI,CAAC,CAAC,MAA2B,CAAC;MAChD,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;MACjC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;MAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;MAE5C,IAAI,OAAO,EAAE;QACX,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC;QAElC,IAAI,OAAO;UACT,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;;UAEtC,QAAQ,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEzC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OAC3C;WAAM;QACL,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;QAEnC,IAAI,OAAO;UACT,QAAQ,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;;UAEtC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;QAE/C,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;QAC/B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OAC3C;IACH,CAAC,CAAA;sBArEgC,EAAC,KAAK,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAC;0BACR,EAAE;;;;EAKnD,MAAM;IACX,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IAEjC,OAAO,CACL,WAAK,KAAK,EAAC,kCAAkC,IAC1C,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;MACpC,MAAM,OAAO,GAAG,GAAG,SAAS,eAAe,KAAK,EAAE,CAAC;MACnD,MAAM,cAAc,GAAG,OAAQ,IAAY,IAAI,QAAQ,CAAC;MACxD,MAAM,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;MACjD,MAAM,IAAI,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;MAC/C,MAAM,UAAU,GAAG,UAAU,CAAC,WAAW;QACvC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,QAAQ,CAAC,KAAe,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAe,CAAC;QACjF,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;MAExD,OAAO,CACL,WAAK,KAAK,EAAC,oCAAoC;QAC7C,WAAK,KAAK,EAAC,gCAAgC;UACzC,aAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAC,UAAU,EAAC,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAC/E,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EACrC,KAAK,EAAC,qFAAqF,GAAE,CAChG;QACN,WAAK,KAAK,EAAC,oBAAoB;UAC7B,aAAO,OAAO,EAAE,OAAO,EAAE,KAAK,EAAC,iCAAiC,IAAE,IAAI,CAAS,CAC3E,CACF,CACP,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCF","sourcesContent":["import {Component, h, Prop, Event, EventEmitter} from '@stencil/core';\r\nimport {uniq} from 'lodash'\r\nimport {SelectList} from \"../../../models\";\r\n\r\n@Component({\r\n  tag: 'elsa-check-list',\r\n  shadow: false\r\n})\r\nexport class CheckList {\r\n  @Prop() selectList: SelectList = {items: [], isFlagsEnum: false};\r\n  @Prop({mutable: true}) selectedValues?: Array<string> = [];\r\n  @Prop({mutable: true}) selectedValue?: number;\r\n  @Prop() fieldName: string;\r\n  @Event() selectedValuesChanged: EventEmitter<Array<string> | number>;\r\n\r\n  public render() {\r\n    const selectList = this.selectList;\r\n    const fieldName = this.fieldName;\r\n\r\n    return (\r\n      <div class=\"tw-max-w-lg tw-space-y-4 tw-my-4\">\r\n        {selectList.items.map((item, index) => {\r\n          const inputId = `${fieldName}_check-list_${index}`;\r\n          const optionIsString = typeof (item as any) == 'string';\r\n          const value = optionIsString ? item : item.value;\r\n          const text = optionIsString ? item : item.text;\r\n          const isSelected = selectList.isFlagsEnum\r\n            ? (this.selectedValue & (parseInt(value as string))) == parseInt(value as string)\r\n            : this.selectedValues.findIndex(x => x == value) >= 0;\r\n\r\n          return (\r\n            <div class=\"tw-relative tw-flex tw-items-start\">\r\n              <div class=\"tw-flex tw-items-center tw-h-5\">\r\n                <input id={inputId} type=\"checkbox\" name={fieldName} checked={isSelected} value={value}\r\n                       onChange={e => this.onCheckChanged(e)}\r\n                       class=\"focus:tw-ring-blue-500 tw-h-4 tw-w-4 tw-text-blue-600 tw-border-gray-300 tw-rounded\"/>\r\n              </div>\r\n              <div class=\"tw-ml-3 tw-text-sm\">\r\n                <label htmlFor={inputId} class=\"tw-font-medium tw-text-gray-700\">{text}</label>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getSelectedValues = (selectList: SelectList): number | Array<string> => {\r\n    return selectList.isFlagsEnum ? this.selectedValue : this.selectedValues || [];\r\n  };\r\n\r\n  private onCheckChanged = (e: Event) => {\r\n    const checkbox = (e.target as HTMLInputElement);\r\n    const checked = checkbox.checked;\r\n    const value = checkbox.value;\r\n    const isFlags = this.selectList.isFlagsEnum;\r\n\r\n    if (isFlags) {\r\n      let newValue = this.selectedValue;\r\n\r\n      if (checked)\r\n        newValue = newValue | parseInt(value);\r\n      else\r\n        newValue = newValue & ~parseInt(value);\r\n\r\n      this.selectedValue = newValue;\r\n      this.selectedValuesChanged.emit(newValue);\r\n    } else {\r\n      let newValue = this.selectedValues;\r\n\r\n      if (checked)\r\n        newValue = uniq([...newValue, value]);\r\n      else\r\n        newValue = newValue.filter(x => x !== value);\r\n\r\n      this.selectedValues = newValue;\r\n      this.selectedValuesChanged.emit(newValue);\r\n    }\r\n  }\r\n}\r\n"]}