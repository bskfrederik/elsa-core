{"version":3,"file":"panel.js","sourceRoot":"","sources":["../../../src/components/panel/panel.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Host, Prop, State } from '@stencil/core';\nimport { PanelPosition, PanelStateChangedArgs } from './models';\nimport { applyResize } from './resize';\n\n@Component({\n  tag: 'elsa-panel',\n  styleUrl: 'panel.scss',\n})\nexport class Panel {\n  @Prop() position: PanelPosition = PanelPosition.Left;\n  @Event() expandedStateChanged: EventEmitter<PanelStateChangedArgs>;\n  @State() isExpanded: boolean = true;\n\n  @Element() element: HTMLElement;\n\n  dragging = false;\n\n  private onToggleClick = () => {\n    if (this.isExpanded) {\n      applyResize({ position: this.position, isHide: true });\n    } else {\n      applyResize({ position: this.position, isDefault: true });\n    }\n    this.isExpanded = !this.isExpanded;\n    this.expandedStateChanged.emit({ expanded: this.isExpanded });\n  };\n\n  onBodyMouseUp = () => {\n    if (this.dragging) {\n      this.clearJSEvents();\n    }\n  };\n\n  componentWillLoad() {\n    document.addEventListener('mouseup', this.onBodyMouseUp);\n    applyResize({ position: this.position, isDefault: true });\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('mouseup', this.onBodyMouseUp);\n  }\n\n  clearJSEvents() {\n    const body = document.body;\n    this.dragging = false;\n    body.removeEventListener('mousemove', this.resize);\n  }\n\n  resize = (e: MouseEvent) => {\n    if (this.position === PanelPosition.Right) {\n      applyResize({ position: PanelPosition.Right, size: document.body.clientWidth - e.pageX });\n    }\n    if (this.position === PanelPosition.Left) {\n      applyResize({ position: PanelPosition.Left, size: e.pageX });\n    }\n    if (this.position === PanelPosition.Bottom) {\n      applyResize({ position: PanelPosition.Bottom, size: document.body.offsetHeight - e.pageY });\n    }\n  };\n\n  onDragBarMouseDown = (e: MouseEvent) => {\n    e.preventDefault();\n    const body = document.body;\n    this.dragging = true;\n    body.addEventListener('mousemove', this.resize);\n  };\n\n  render() {\n    const isExpanded = this.isExpanded;\n    const position = this.position;\n    const stateClass = isExpanded ? 'panel-state-expanded' : 'panel-state-collapsed';\n\n    const containerClassMap = [];\n    containerClassMap[PanelPosition.Left] = 'panel-position-left tw-left-0 tw-top-0 tw-bottom-0 tw-border-r';\n    containerClassMap[PanelPosition.Top] = 'panel-position-top tw-left-0 tw-top-0 tw-right-0 tw-border-b';\n    containerClassMap[PanelPosition.Bottom] = 'panel-position-bottom h-0 tw-bottom-0 tw-border-t';\n    containerClassMap[PanelPosition.Right] = 'panel-position-right tw-right-0 tw-top-0 tw-bottom-0 tw-border-l';\n    const containerCssClass = containerClassMap[position];\n\n    const toggleClassMap = {};\n    toggleClassMap[PanelPosition.Left] = 'elsa-panel-toggle-left';\n    toggleClassMap[PanelPosition.Top] = 'elsa-panel-toggle-top';\n    toggleClassMap[PanelPosition.Right] = 'elsa-panel-toggle-right';\n    toggleClassMap[PanelPosition.Bottom] = 'elsa-panel-toggle-bottom';\n\n    const toggleCssClass = toggleClassMap[position];\n    const iconOrientationCssClass = isExpanded ? 'tw-rotate-180': '';\n\n    const dragBarClassMap = {\n      [PanelPosition.Left]: 'tw-right-0 tw-h-full tw-cursor-col-resize tw-w-1',\n      [PanelPosition.Right]: 'tw-left-0 tw-h-full tw-cursor-col-resize tw-w-1',\n      [PanelPosition.Bottom]: 'tw-top-0 tw-w-full tw-cursor-row-resize tw-h-1',\n    };\n\n    const dragBarClass = dragBarClassMap[this.position];\n\n    return (\n      <Host class={`panel tw-absolute tw-bg-white tw-z-20 ${containerCssClass} ${stateClass}`}>\n        <div class={`tw-absolute tw-opacity-0 tw-bg-blue-400 tw-transition tw-ease-in-out tw-duration-300 hover:tw-opacity-100 tw-z-10 ${dragBarClass}`} onMouseDown={this.onDragBarMouseDown} />\n        <div class=\"panel-content-container\">\n          <slot />\n        </div>\n\n        <div class={`tw-text-white ${toggleCssClass}`} onClick={() => this.onToggleClick()}>\n          <svg\n            class={`tw-h-6 tw-w-6 tw-text-gray-700 ${iconOrientationCssClass}`}\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          >\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n            <polyline points=\"9 6 15 12 9 18\" />\n          </svg>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}