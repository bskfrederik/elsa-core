{"version":3,"file":"multi-line.js","sourceRoot":"","sources":["../../../src/components/inputs/multi-line.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAoB,WAAW,EAAC,MAAM,cAAc,CAAC;AAE5D,OAAO,EAAC,qBAAqB,EAAC,MAAM,aAAa,CAAC;AAOlD,MAAM,OAAO,cAAc;;IAuBjB,oBAAe,GAAG,CAAC,OAAY,EAAE,EAAE;MACzC,MAAM,gBAAgB,GAAG,OAAO,CAAC,YAAY,IAAI,SAAS,CAAC;MAE3D,QAAQ,gBAAgB,EAAE;QACxB,KAAK,OAAO;UACV,OAAO,EAAC,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAA;QAC/C;UACE,OAAO,EAAC,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAC,CAAA;OAC/C;IACH,CAAC,CAAC;IAMM,4BAAuB,GAAG,CAAC,CAAQ,EAAE,EAAE;MAC7C,MAAM,YAAY,GAAG,CAAC,CAAC,MAA6B,CAAC;MACrD,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IAC1E,CAAC,CAAC;IAEM,wBAAmB,GAAG,CAAC,CAAoC,EAAE,EAAE;MACrE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvE,CAAC,CAAA;;;EA1CM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC;IACvC,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC;IACzC,MAAM,KAAK,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAClD,MAAM,OAAO,GAAG,eAAe,CAAC,OAAO,IAAI,EAAE,CAAC;IAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACnD,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;IAClD,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAgC,0CAAE,KAAK,EAAE,YAAY,CAAC,CAAC;IACpG,MAAM,MAAM,GAAG,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,IAAI,mCAAI,eAAe,CAAC,aAAa,CAAC;IACxE,OAAO,CACL,iCAA2B,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;MACzI,gBAAU,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,uBAAuB,GAAG,CAClG,CAC7B,CAAA;EACH,CAAC;EAaO,iBAAiB,CAAC,KAAyB,EAAE,YAAgC;;IACnF,OAAO,MAAA,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,YAAY,mCAAI,EAAE,CAAC;EACrC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;CAUF","sourcesContent":["import {Component, Prop, h} from '@stencil/core';\r\nimport {LiteralExpression, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue} from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-multi-line-input',\r\n  shadow: false\r\n})\r\nexport class MultiLineInput {\r\n  @Prop() inputContext: ActivityInputContext;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const options = inputDescriptor.options || {};\r\n    const editorHeight = this.getEditorHeight(options);\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const value = this.getValueOrDefault((input?.expression as LiteralExpression)?.value, defaultValue);\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <textarea name={fieldName} id={fieldId} value={value} rows={editorHeight.textArea} onChange={this.onPropertyEditorChanged}/>\r\n      </elsa-input-control-switch>\r\n    )\r\n  }\r\n\r\n  private getEditorHeight = (options: any) => {\r\n    const editorHeightName = options.editorHeight || 'Default';\r\n\r\n    switch (editorHeightName) {\r\n      case 'Large':\r\n        return {propertyEditor: '20em', textArea: 10}\r\n      default:\r\n        return {propertyEditor: '15em', textArea: 6}\r\n    }\r\n  };\r\n\r\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\r\n    return value ?? defaultValue ?? '';\r\n  }\r\n\r\n  private onPropertyEditorChanged = (e: Event) => {\r\n    const inputElement = e.target as HTMLTextAreaElement;\r\n    this.inputContext.inputChanged(inputElement.value, SyntaxNames.Literal);\r\n  };\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"]}