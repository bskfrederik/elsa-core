{"version":3,"file":"variable-picker.js","sourceRoot":"","sources":["../../../src/components/inputs/variable-picker.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAC,WAAW,EAAW,MAAM,cAAc,CAAC;AAEnD,OAAO,EAAC,gBAAgB,EAAC,MAAM,aAAa,CAAC;AAC7C,OAAO,EAAC,SAAS,EAAC,MAAM,4BAA4B,CAAC;AACrD,OAAO,wBAAwB,MAAM,0CAA0C,CAAC;AAOhF,MAAM,OAAO,mBAAmB;;IAsCtB,aAAQ,GAAG,CAAC,CAAQ,EAAE,EAAE;MAC9B,MAAM,YAAY,GAAG,CAAC,CAAC,MAA2B,CAAC;MACnD,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC;MACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,UAAU,CAAC,CAAC;MAEjF,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IAChE,CAAC,CAAA;;;;EAxCM,MAAM;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC;IACvC,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,IAAI,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAa,CAAC;IAE9D,IAAI,YAAY,IAAI,SAAS,EAAE;MAC7B,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;MAClD,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;KACnE;IAED,OAAO,CACL,EAAC,wBAAwB,CAAC,QAAQ,QAC/B,CAAC,EAAC,kBAAkB,EAAC,EAAE,EAAE;;MACxB,IAAI,SAAS,GAAe,MAAA,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,SAAS,mCAAI,EAAE,CAAC;MAChE,SAAS,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC;MACjC,OAAO,EAAC,SAAS,IAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,WAAW;QACvE,cAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAClE,SAAS,CAAC,GAAG,CAAC,CAAC,QAAkB,EAAE,EAAE;UACpC,MAAM,YAAY,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,CAAC;UACpC,MAAM,UAAU,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,EAAE,CAAC;UAChC,MAAM,UAAU,GAAG,UAAU,KAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,EAAE,CAAA,CAAC;UAClD,OAAO,cAAQ,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,IAAG,YAAY,CAAU,CAAC;QAClF,CAAC,CAAC,CACK,CACC,CAAA;IACd,CAAC,CACiC,CACrC,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CASF;AACD,wBAAwB,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC","sourcesContent":["import {Component, h, Prop} from '@stencil/core';\r\nimport {SyntaxNames, Variable} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getPropertyValue} from \"../../utils\";\r\nimport {FormEntry} from \"../shared/forms/form-entry\";\r\nimport WorkflowDefinitionTunnel from \"../../modules/workflow-definitions/state\";\r\nimport {WorkflowDefinition} from \"../../modules/workflow-definitions/models/entities\";\r\n\r\n@Component({\r\n  tag: 'elsa-variable-picker-input',\r\n  shadow: false\r\n})\r\nexport class VariablePickerInput {\r\n  @Prop() inputContext: ActivityInputContext;\r\n  @Prop() workflowDefinition: WorkflowDefinition; // Injected by WorkflowDefinitionTunnel\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const description = inputDescriptor.description;\r\n    let currentValue = getPropertyValue(inputContext) as Variable;\r\n\r\n    if (currentValue == undefined) {\r\n      const defaultValue = inputDescriptor.defaultValue;\r\n      currentValue = defaultValue ? defaultValue.toString() : undefined;\r\n    }\r\n\r\n    return (\r\n      <WorkflowDefinitionTunnel.Consumer>\r\n        {({workflowDefinition}) => {\r\n          let variables: Variable[] = workflowDefinition?.variables ?? [];\r\n          variables = [null, ...variables];\r\n          return <FormEntry fieldId={fieldId} label={displayName} hint={description}>\r\n            <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n              {variables.map((variable: Variable) => {\r\n                const variableName = variable?.name;\r\n                const variableId = variable?.id;\r\n                const isSelected = variableId == currentValue?.id;\r\n                return <option value={variableId} selected={isSelected}>{variableName}</option>;\r\n              })}\r\n            </select>\r\n          </FormEntry>\r\n        }}\r\n      </WorkflowDefinitionTunnel.Consumer>\r\n    );\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    const variableId = inputElement.value;\r\n    const variable = this.workflowDefinition.variables.find(x => x.id == variableId);\r\n\r\n    this.inputContext.inputChanged(variable, SyntaxNames.Literal);\r\n  }\r\n}\r\nWorkflowDefinitionTunnel.injectProps(VariablePickerInput, ['workflowDefinition']);\r\n"]}