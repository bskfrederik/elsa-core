{"version":3,"file":"single-line.js","sourceRoot":"","sources":["../../../src/components/inputs/single-line.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAoB,WAAW,EAAC,MAAM,cAAc,CAAC;AAE5D,OAAO,EAAC,qBAAqB,EAAC,MAAM,aAAa,CAAC;AAQlD,MAAM,OAAO,eAAe;;IAsBlB,4BAAuB,GAAG,CAAC,CAAQ,EAAE,EAAE;MAC7C,MAAM,YAAY,GAAG,CAAC,CAAC,MAA0B,CAAC;MAClD,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IAC1E,CAAC,CAAA;IAEO,wBAAmB,GAAG,CAAC,CAAoC,EAAE,EAAE;MACrE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvE,CAAC,CAAA;;;EA1BM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC;IACvC,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC;IACzC,MAAM,KAAK,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAClD,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;IAClD,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAgC,0CAAE,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC,sJAAsJ;IAC3P,MAAM,MAAM,GAAG,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,IAAI,mCAAI,eAAe,CAAC,aAAa,CAAC;IAExE,OAAO,CACL,iCAA2B,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;MACvI,aAAO,IAAI,EAAC,MAAM,EAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,uBAAuB,GAAG,CAChF,CAC7B,CAAC;EACJ,CAAC;EAWO,iBAAiB,CAAC,KAAyB,EAAE,YAAgC;;IACnF,OAAO,MAAA,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,YAAY,mCAAI,EAAE,CAAC;EACrC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {Component, h, Prop} from '@stencil/core';\r\nimport {LiteralExpression, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue} from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\nimport descriptorsStore from \"../../data/descriptors-store\";\r\n\r\n@Component({\r\n  tag: 'elsa-single-line-input',\r\n  shadow: false\r\n})\r\nexport class SingleLineInput {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const value = this.getValueOrDefault((input?.expression as LiteralExpression)?.value, defaultValue); // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n          <input type=\"text\" name={fieldName} id={fieldId} value={value} onChange={this.onPropertyEditorChanged}/>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private onPropertyEditorChanged = (e: Event) => {\r\n    const inputElement = e.target as HTMLInputElement;\r\n    this.inputContext.inputChanged(inputElement.value, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n\r\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\r\n    return value ?? defaultValue ?? '';\r\n  }\r\n}\r\n"]}