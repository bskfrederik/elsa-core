{"version":3,"file":"type-picker.js","sourceRoot":"","sources":["../../../src/components/inputs/type-picker.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, Prop, h} from '@stencil/core';\r\nimport {groupBy} from 'lodash';\r\nimport {LiteralExpression, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue} from \"../../utils\";\r\nimport descriptorsStore from '../../data/descriptors-store';\r\nimport {VariableDescriptor} from \"../../services/api-client/variable-descriptors-api\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-type-picker-input',\r\n  shadow: false\r\n})\r\nexport class TypePickerInput {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const description = inputDescriptor.description;\r\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\r\n    const groupedVariableTypes = groupBy(availableTypes, x => x.category);\r\n    const input = getInputPropertyValue(inputContext);\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const value = (input?.expression as LiteralExpression)?.value;\r\n    let currentValue = value;\r\n\r\n    if (currentValue == undefined) {\r\n      const defaultValue = inputDescriptor.defaultValue;\r\n      currentValue = defaultValue ? defaultValue.toString() : undefined;\r\n    }\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={description} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n          <option value=\"\" selected={(!currentValue || currentValue == \"\")}></option>\r\n          {Object.keys(groupedVariableTypes).map(category => {\r\n            const variableTypes = groupedVariableTypes[category] as Array<VariableDescriptor>;\r\n            return (<optgroup label={category}>\r\n              {variableTypes.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == currentValue}>{descriptor.displayName}</option>)}\r\n            </optgroup>);\r\n          })}\r\n        </select>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    this.inputContext.inputChanged(inputElement.value, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"]}