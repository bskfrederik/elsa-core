{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../src/components/inputs/checkbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, Prop, h, State} from '@stencil/core';\r\nimport {LiteralExpression, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getInputPropertyValue } from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-checkbox-input',\r\n  shadow: false\r\n})\r\nexport class Checkbox {\r\n  @Prop() public inputContext: ActivityInputContext;\r\n  @State() private isChecked?: boolean;\r\n\r\n  public async componentWillLoad() {\r\n    this.isChecked = this.getSelectedValue();\r\n  }\r\n\r\n  private getSelectedValue = (): boolean => {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const value = ((input?.expression as LiteralExpression)?.value) ?? defaultValue;\r\n    return typeof value == \"boolean\" ? value : typeof value == \"string\" ? value?.toLowerCase() === 'true' : false;\r\n  };\r\n\r\n  render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const value = ((input?.expression as LiteralExpression)?.value) ?? defaultValue;\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const isChecked = this.isChecked;\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hideLabel={true} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <div class=\"tw-flex tw-space-x-1\">\r\n          <input type=\"checkbox\" name={fieldName} id={fieldId} checked={isChecked} onChange={this.onPropertyEditorChanged}/>\r\n          <label htmlFor={fieldId}>{displayName}</label>\r\n        </div>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private onPropertyEditorChanged = (e: Event) => {\r\n    const inputElement = e.target as HTMLInputElement;\r\n    this.isChecked = inputElement.checked;\r\n    this.inputContext.inputChanged(inputElement.checked, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"]}