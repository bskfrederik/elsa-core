{"version":3,"file":"radio-list.js","sourceRoot":"","sources":["../../../src/components/inputs/radio-list.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, h, Prop, State} from '@stencil/core';\r\nimport {LiteralExpression, SelectList, SyntaxNames} from \"../../models\";\r\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\r\nimport {getSelectListItems, getInputPropertyValue} from \"../../utils\";\r\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\r\n\r\n@Component({\r\n  tag: 'elsa-radio-list-input',\r\n  shadow: false\r\n})\r\nexport class RadioList {\r\n  private selectList: SelectList = {items: [], isFlagsEnum: false};\r\n\r\n  @Prop() public inputContext: ActivityInputContext;\r\n  @State() private selectedValue?: string;\r\n\r\n  public async componentWillLoad() {\r\n    this.selectList = await getSelectListItems(this.inputContext.inputDescriptor);\r\n    this.selectedValue = this.getSelectedValue();\r\n  }\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const hint = inputDescriptor.description;\r\n    const input = getInputPropertyValue(inputContext);\r\n    const value = this.getSelectedValue();\r\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\r\n    const selectList = this.selectList;\r\n\r\n    return (\r\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\r\n        <div class=\"tw-max-w-lg tw-space-y-4 tw-my-4\">\r\n          {selectList.items.map((item, index) => {\r\n            const inputId = `${fieldId}_${index}`;\r\n            const optionIsString = typeof (item as any) == 'string';\r\n            const value = optionIsString ? item : item.value;\r\n            const text = optionIsString ? item : item.text;\r\n            const isSelected = this.selectedValue === value as string;\r\n\r\n            return (\r\n              <div class=\"tw-relative tw-flex tw-items-start\">\r\n                <div class=\"tw-flex tw-items-center tw-h-5\">\r\n                  <input id={inputId} type=\"radio\" name={fieldName} checked={isSelected} value={value}\r\n                         onChange={e => this.onCheckChanged(e)}\r\n                         class=\"focus:tw-ring-blue-500 tw-h-4 tw-w-4 tw-text-blue-600 tw-border-gray-300\"/>\r\n                </div>\r\n                <div class=\"tw-ml-3 tw-text-sm\">\r\n                  <label htmlFor={inputId} class=\"tw-font-medium tw-text-gray-700\">{text}</label>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </elsa-input-control-switch>\r\n    );\r\n  }\r\n\r\n  private getSelectedValue = (): string => {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const defaultValue = inputDescriptor.defaultValue;\r\n    const input = getInputPropertyValue(inputContext);\r\n    return ((input?.expression as LiteralExpression)?.value) ?? defaultValue;\r\n  };\r\n\r\n  private onCheckChanged = (e: Event) => {\r\n    const checkbox = (e.target as HTMLInputElement);\r\n    const value = checkbox.value;\r\n\r\n    this.inputContext.inputChanged(value, SyntaxNames.Literal);\r\n  }\r\n\r\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\r\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\r\n  }\r\n}\r\n"]}