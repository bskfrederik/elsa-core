{"version":3,"file":"notification-service.js","sourceRoot":"","sources":["../../../src/modules/notifications/notification-service.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,iBAAiB,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAC,uBAAuB,EAAmB,MAAM,UAAU,CAAA;AAElE,MAAM,CAAC,OAAO,OAAO,mBAAmB;EACtC;EACA,CAAC;;AAEM,sCAAkB,GAAG,GAAG,EAAE;EAC/B,iBAAiB,CAAC,gBAAgB,GAAG,CAAC,iBAAiB,CAAC,gBAAgB,CAAA;AAC1E,CAAC,CAAA;AAEM,sCAAkB,GAAG,CAAC,YAA8B,EAAoB,EAAE;EAC/E,YAAY,CAAC,SAAS,GAAG,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;EAC1C,iBAAiB,CAAC,aAAa,GAAG,CAAC,YAAY,EAAE,GAAG,iBAAiB,CAAC,aAAa,CAAC,CAAA;EACpF,OAAO,YAAY,CAAC;AACtB,CAAC,CAAA;AAEM,sCAAkB,GAAG,CAAC,YAA8B,EAAE,cAAgC,EAAE,EAAE;EAC/F,MAAM,UAAU,GAAG,iBAAiB,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,YAAY,CAAC,EAAE,CAAC,CAAA;EAEjG,MAAM,mBAAmB,qBAAO,iBAAiB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;EAC7E,mBAAmB,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC;EACjD,mBAAmB,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;EAC/C,mBAAmB,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,IAAI,uBAAuB,CAAC,OAAO,CAAC;EAClF,mBAAmB,CAAC,SAAS,GAAG,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;EAEjD,MAAM,QAAQ,GAAG,iBAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,YAAY,CAAC,EAAE,CAAC,CAAA;EAC5F,iBAAiB,CAAC,aAAa,GAAG,CAAC,mBAAmB,EAAE,GAAG,QAAQ,CAAC,CAAA;AACtE,CAAC,CAAA;AAEM,6BAAS,GAAG,CAAC,YAA8B,EAAE,EAAE;EACpD,MAAM,KAAK,GAAG,iBAAiB,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,YAAY,CAAC,EAAE,CAAC,CAAC;EAC7F,IAAI,iBAAiB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,SAAS,KAAK,KAAK,EAAE;IAC9D,MAAM,aAAa,GAAG,CAAC,GAAG,iBAAiB,CAAC,aAAa,CAAC,CAAA;IAC1D,aAAa,CAAC,KAAK,CAAC,mCAAO,aAAa,CAAC,KAAK,CAAC,KAAE,SAAS,EAAE,KAAK,GAAC,CAAC;IACnE,iBAAiB,CAAC,aAAa,GAAG,aAAa,CAAC;GACjD;AACH,CAAC,CAAA;AAEM,wCAAoB,GAAG,GAAG,EAAE;EACjC,iBAAiB,CAAC,gBAAgB,GAAG,KAAK,CAAC;EAC3C,iBAAiB,CAAC,aAAa,GAAG,iBAAiB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;IACrF,IAAI,YAAY,CAAC,SAAS,KAAK,KAAK,EAAE;MACpC,uCACK,YAAY,KACf,SAAS,EAAE,KAAK,IACjB;KACF;IAED,OAAO,YAAY,CAAC;EACtB,CAAC,CAAC,CAAC;AACL,CAAC,CAAA","sourcesContent":["import moment from 'moment';\r\nimport notificationStore from \"./notification-store\";\r\nimport {NotificationDisplayType, NotificationType} from \"./models\"\r\n\r\nexport default class NotificationService {\r\n  constructor() {\r\n  }\r\n\r\n  static toggleNotification = () => {\r\n    notificationStore.infoPanelBoolean = !notificationStore.infoPanelBoolean\r\n  }\r\n\r\n  static createNotification = (notification: NotificationType): NotificationType => {\r\n    notification.timestamp = moment().clone();\r\n    notificationStore.notifications = [notification, ...notificationStore.notifications]\r\n    return notification;\r\n  }\r\n\r\n  static updateNotification = (notification: NotificationType, newNotifFields: NotificationType) => {\r\n    const notifIndex = notificationStore.notifications.findIndex(item => item.id === notification.id)\r\n\r\n    const updatedNotification = {...notificationStore.notifications[notifIndex]};\r\n    updatedNotification.title = newNotifFields.title;\r\n    updatedNotification.text = newNotifFields.text;\r\n    updatedNotification.type = newNotifFields.type || NotificationDisplayType.Success;\r\n    updatedNotification.timestamp = moment().clone();\r\n\r\n    const filtered = notificationStore.notifications.filter(item => item.id !== notification.id)\r\n    notificationStore.notifications = [updatedNotification, ...filtered]\r\n  }\r\n\r\n  static hideToast = (notification: NotificationType) => {\r\n    const index = notificationStore.notifications.findIndex(item => item.id === notification.id);\r\n    if (notificationStore.notifications[index].showToast !== false) {\r\n      const notifications = [...notificationStore.notifications]\r\n      notifications[index] = {...notifications[index], showToast: false};\r\n      notificationStore.notifications = notifications;\r\n    }\r\n  }\r\n\r\n  static hideAllNotifications = () => {\r\n    notificationStore.infoPanelBoolean = false;\r\n    notificationStore.notifications = notificationStore.notifications.map((notification) => {\r\n      if (notification.showToast !== false) {\r\n        return {\r\n          ...notification,\r\n          showToast: false\r\n        }\r\n      }\r\n\r\n      return notification;\r\n    });\r\n  }\r\n}\r\n"]}