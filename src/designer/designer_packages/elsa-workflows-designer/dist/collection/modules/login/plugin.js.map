{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../../src/modules/login/plugin.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,CAAC,EAAC,MAAM,eAAe,CAAC;AAChC,OAAO,EAAC,UAAU,EAAS,MAAM,cAAc,CAAC;AAChD,OAAO,EAAC,SAAS,EAAE,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAG7B,IAAM,WAAW,GAAjB,MAAM,WAAW;EAItB;IAeQ,wBAAmB,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;MACxC,MAAM,KAAK,GAAG,CAAC,CAAC,UAAU,CAAC;MAC3B,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;MAEzC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE;QAC5C,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QAE3C,IAAI,CAAC,CAAC,KAAK;UACT,MAAM,CAAC,OAAO,mCAAO,MAAM,CAAC,OAAO,KAAE,aAAa,EAAE,UAAU,KAAK,EAAE,GAAC,CAAC;QAEzE,OAAO,MAAM,CAAC;MAChB,CAAC,CAAC,CAAC;MAEH,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE;QAC/C,OAAO,QAAQ,CAAC;MAClB,CAAC,EAAE,KAAK,EAAC,KAAK,EAAC,EAAE;QAEf,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB;UAC1E,OAAO;QAET,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/C,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,kBAAkB,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,CAAC;QAEvF,IAAI,aAAa,CAAC,eAAe,EAAE;UACjC,MAAM,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,EAAE,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;UAE5F,OAAO,MAAM,KAAK,CAAC,OAAO,iCACrB,KAAK,CAAC,MAAM,KACf,iBAAiB,EAAE,IAAI,EACvB,OAAO,kCACF,KAAK,CAAC,MAAM,CAAC,OAAO,KACvB,aAAa,EAAE,UAAU,aAAa,CAAC,WAAW,EAAE,OAEtD,CAAC;SACJ;aAAM;UACL,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;SAC7B;MACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IArDA,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACxC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAClD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;EAClF,CAAC;EAED,KAAK,CAAC,UAAU;IACd,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAE/C,IAAI,WAAW,CAAC,aAAa,EAAE;MAC7B,OAAO;IAET,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,0BAAkB,CAAC,CAAC;EACpD,CAAC;CA2CF,CAAA;AA5DY,WAAW;EADvB,OAAO,EAAE;;GACG,WAAW,CA4DvB;SA5DY,WAAW","sourcesContent":["import 'reflect-metadata';\r\nimport {h} from \"@stencil/core\";\r\nimport {EventTypes, Plugin} from \"../../models\";\r\nimport {Container, Service} from \"typedi\";\r\nimport {StudioService, AuthContext, EventBus} from \"../../services\";\r\nimport {LoginApi} from \"./services\";\r\n\r\n@Service()\r\nexport class LoginPlugin implements Plugin {\r\n  private readonly eventBus: EventBus;\r\n  private readonly studioService: StudioService;\r\n\r\n  constructor() {\r\n    this.eventBus = Container.get(EventBus);\r\n    this.studioService = Container.get(StudioService);\r\n    this.eventBus.on(EventTypes.HttpClient.ClientCreated, this.onHttpClientCreated);\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    const authContext = Container.get(AuthContext);\r\n\r\n    if (authContext.getIsSignedIn())\r\n      return;\r\n\r\n    this.studioService.show(() => <elsa-login-page/>);\r\n  }\r\n\r\n  private onHttpClientCreated = async (e) => {\r\n    const axios = e.httpClient;\r\n    const loginApi = Container.get(LoginApi);\r\n\r\n    axios.interceptors.request.use(async config => {\r\n      const authContext = Container.get(AuthContext);\r\n      const token = authContext.getAccessToken();\r\n\r\n      if (!!token)\r\n        config.headers = {...config.headers, Authorization: `Bearer ${token}`};\r\n\r\n      return config;\r\n    });\r\n\r\n    axios.interceptors.response.use(async response => {\r\n      return response;\r\n    }, async error => {\r\n\r\n      if (error.response.status !== 401 || error.response.config.hasRetriedRequest)\r\n        return;\r\n\r\n      const authContext = Container.get(AuthContext);\r\n      const loginResponse = await loginApi.refreshAccessToken(authContext.getRefreshToken());\r\n\r\n      if (loginResponse.isAuthenticated) {\r\n        await authContext.updateTokens(loginResponse.accessToken, loginResponse.refreshToken, true);\r\n\r\n        return await axios.request({\r\n          ...error.config,\r\n          hasRetriedRequest: true,\r\n          headers: {\r\n            ...error.config.headers,\r\n            Authorization: `Bearer ${loginResponse.accessToken}`\r\n          }\r\n        });\r\n      } else {\r\n        await authContext.signOut();\r\n      }\r\n    });\r\n  };\r\n\r\n}\r\n"]}