{"version":3,"file":"services.js","sourceRoot":"","sources":["../../../src/modules/login/services.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAC,kBAAkB,EAAE,cAAc,EAAC,MAAM,gBAAgB,CAAC;AAElE,OAAO,KAA2B,MAAM,OAAO,CAAC;AAGzC,IAAM,QAAQ,GAAd,MAAM,QAAQ;EAEnB,YAAoB,QAA4B,EAAU,cAA8B;IAApE,aAAQ,GAAR,QAAQ,CAAoB;IAAU,mBAAc,GAAd,cAAc,CAAgB;IACtF,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,CAAC;EAED,KAAK,CAAC,KAAK,CAAC,QAAgB,EAAE,QAAgB;IAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,IAAI,CAAgB,gBAAgB,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAE,CAAC;IAC/F,OAAO,QAAQ,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,KAAK,CAAC,kBAAkB,CAAC,YAAoB;IAC3C,MAAM,MAAM,GAAuB;MACjC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW;MACxC,OAAO,EAAE;QACP,aAAa,EAAE,UAAU,YAAY,EAAE;OACxC;KACF,CAAC;IAEF,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAExC,OAAO,MAAM,UAAU,CAAC,IAAI,CAAgB,wBAAwB,CAAC;OAClE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;OAC/B,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;EACnC,CAAC;CACF,CAAA;AA1BY,QAAQ;EADpB,OAAO,EAAE;mCAGsB,kBAAkB,EAA0B,cAAc;GAF7E,QAAQ,CA0BpB;SA1BY,QAAQ","sourcesContent":["import 'reflect-metadata';\r\nimport {Service} from \"typedi\";\r\nimport {ElsaClientProvider, ServerSettings} from \"../../services\";\r\nimport {LoginResponse} from \"./models\";\r\nimport axios, {AxiosRequestConfig} from \"axios\";\r\n\r\n@Service()\r\nexport class LoginApi {\r\n\r\n  constructor(private provider: ElsaClientProvider, private serverSettings: ServerSettings) {\r\n    this.provider = provider;\r\n  }\r\n\r\n  async login(username: string, password: string): Promise<LoginResponse> {\r\n    const httpClient = await this.provider.getHttpClient();\r\n    const response = await httpClient.post<LoginResponse>(`identity/login`, {username, password},);\r\n    return response.data;\r\n  }\r\n\r\n  async refreshAccessToken(refreshToken: string): Promise<LoginResponse> {\r\n    const config: AxiosRequestConfig = {\r\n      baseURL: this.serverSettings.baseAddress,\r\n      headers: {\r\n        Authorization: `Bearer ${refreshToken}`\r\n      }\r\n    };\r\n\r\n    const httpClient = axios.create(config);\r\n\r\n    return await httpClient.post<LoginResponse>(`identity/refresh-token`)\r\n      .then(response => response.data)\r\n      .catch(error => error.response)\r\n  }\r\n}\r\n"]}