{"version":3,"file":"http-request-port-provider.js","sourceRoot":"","sources":["../../../../src/modules/http-request/sequence/http-request-port-provider.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAiB,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AAKlD,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;EAElC,gBAAgB,CAAC,OAA4B;;IAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAA2B,CAAC;IAErD,IAAI,QAAQ,IAAI,IAAI;MAClB,OAAO,EAAE,CAAC;IAEZ,MAAM,WAAW,GAAS,EAAC,IAAI,EAAE,qBAAqB,EAAE,WAAW,EAAE,uBAAuB,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAC,CAAC,CAAC,mEAAmE;IAC3L,MAAM,WAAW,GAAG,MAAA,QAAQ,CAAC,mBAAmB,mCAAI,EAAE,CAAC;IACvD,MAAM,KAAK,GAAW,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAC,CAAC,CAAC,CAAC;IAE7I,OAAO,CAAC,GAAG,KAAK,EAAE,WAAW,CAAC,CAAC;EACjC,CAAC;EAED,WAAW,CAAC,QAAgB,EAAE,OAA4B;;IACxD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAA2B,CAAC;IAErD,IAAI,QAAQ,IAAI,qBAAqB;MACnC,OAAO,QAAQ,CAAC,mBAAmB,CAAC;IAEtC,MAAM,mBAAmB,GAA8B,MAAA,QAAQ,CAAC,mBAAmB,mCAAI,EAAE,CAAC;IAC1F,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,QAAQ,CAAC,CAAC;IAC9F,OAAO,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,QAAQ,CAAC;EACtC,CAAC;EAED,UAAU,CAAC,QAAgB,EAAE,QAAkB,EAAE,OAA4B;;IAC3E,MAAM,uBAAuB,GAAG,OAAO,CAAC,QAA2B,CAAC;IAEpE,IAAI,QAAQ,IAAI,qBAAqB,EAAE;MACrC,uBAAuB,CAAC,mBAAmB,GAAG,QAAQ,CAAC;MACvD,OAAO;KACR;IAED,MAAM,WAAW,GAAG,MAAA,uBAAuB,CAAC,mBAAmB,mCAAI,EAAE,CAAC;IACtE,MAAM,kBAAkB,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,QAAQ,CAAC,CAAC;IAEvF,IAAI,CAAC,kBAAkB;MACrB,OAAO;IAET,kBAAkB,CAAC,QAAQ,GAAG,QAAQ,CAAC;EACzC,CAAC;CACF,CAAA;AA1CY,uBAAuB;EADnC,OAAO,EAAE;GACG,uBAAuB,CA0CnC;SA1CY,uBAAuB","sourcesContent":["import 'reflect-metadata';\r\nimport {Service} from \"typedi\";\r\nimport {Activity, Port, PortType} from \"../../../models\";\r\nimport {PortProvider, PortProviderContext} from \"../../../services\";\r\nimport {HttpStatusCodeCase, SendHttpRequest} from \"./models\";\r\n\r\n@Service()\r\nexport class HttpRequestPortProvider implements PortProvider {\r\n\r\n  getOutboundPorts(context: PortProviderContext): Array<Port> {\r\n    const activity = context.activity as SendHttpRequest;\r\n\r\n    if (activity == null)\r\n      return [];\r\n\r\n    const defaultPort: Port = {name: 'unmatchedStatusCode', displayName: 'Unmatched status code', type: PortType.Embedded}; // Hide the port from the designer until the editor uI is finished.\r\n    const statusCodes = activity.expectedStatusCodes ?? [];\r\n    const ports: Port[] = statusCodes.map(x => ({name: x.statusCode.toString(), displayName: x.statusCode.toString(), type: PortType.Embedded}));\r\n\r\n    return [...ports, defaultPort];\r\n  }\r\n\r\n  resolvePort(portName: string, context: PortProviderContext): Activity | Array<Activity> {\r\n    const activity = context.activity as SendHttpRequest;\r\n\r\n    if (portName == 'unmatchedStatusCode')\r\n      return activity.unmatchedStatusCode;\r\n\r\n    const expectedStatusCodes: Array<HttpStatusCodeCase> = activity.expectedStatusCodes ?? [];\r\n    const matchingStatusCode = expectedStatusCodes.find(x => x.statusCode.toString() == portName);\r\n    return matchingStatusCode?.activity;\r\n  }\r\n\r\n  assignPort(portName: string, activity: Activity, context: PortProviderContext) {\r\n    const sendHttpRequestActivity = context.activity as SendHttpRequest;\r\n\r\n    if (portName == 'unmatchedStatusCode') {\r\n      sendHttpRequestActivity.unmatchedStatusCode = activity;\r\n      return;\r\n    }\r\n\r\n    const statusCodes = sendHttpRequestActivity.expectedStatusCodes ?? [];\r\n    const matchingStatusCode = statusCodes.find(x => x.statusCode.toString() === portName);\r\n\r\n    if (!matchingStatusCode)\r\n      return;\r\n\r\n    matchingStatusCode.activity = activity;\r\n  }\r\n}\r\n"]}