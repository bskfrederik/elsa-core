{"version":3,"file":"flow-http-request-port-provider.js","sourceRoot":"","sources":["../../../../src/modules/http-request/flow/flow-http-request-port-provider.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAmE,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AAKpG,IAAM,2BAA2B,GAAjC,MAAM,2BAA2B;EAEtC,gBAAgB,CAAC,OAA4B;IAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAA+B,CAAC;IAEzD,IAAI,QAAQ,IAAI,IAAI;MAClB,OAAO,EAAE,CAAC;IAEZ,MAAM,mBAAmB,GAAG,QAAQ,CAAC,mBAAoC,CAAC;IAE1E,IAAI,CAAC,mBAAmB;MACtB,OAAO,EAAE,CAAC;IAEZ,MAAM,eAAe,GAAI,mBAAmB,CAAC,UAA+B,CAAC,KAAK,CAAC;IACnF,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAkB,CAAC;IACjE,MAAM,YAAY,GAAS,EAAC,IAAI,EAAE,uBAAuB,EAAE,WAAW,EAAE,uBAAuB,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAC,CAAC;IACtH,MAAM,QAAQ,GAAW,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;IAEzI,OAAO,QAAQ,CAAC;EAClB,CAAC;EAED,WAAW,CAAC,QAAgB,EAAE,OAA4B;IACxD,OAAO,IAAI,CAAC;EACd,CAAC;EAED,UAAU,CAAC,QAAgB,EAAE,QAAkB,EAAE,OAA4B;IAC3E,OAAO,IAAI,CAAC;EACd,CAAC;CACF,CAAA;AA5BY,2BAA2B;EADvC,OAAO,EAAE;GACG,2BAA2B,CA4BvC;SA5BY,2BAA2B","sourcesContent":["import 'reflect-metadata';\r\nimport {Service} from \"typedi\";\r\nimport {Activity, ActivityInput, InputDescriptor, ObjectExpression, Port, PortType} from \"../../../models\";\r\nimport {PortProvider, PortProviderContext} from \"../../../services\";\r\nimport {FlowSendHttpRequest} from \"./models\";\r\n\r\n@Service()\r\nexport class FlowHttpRequestPortProvider implements PortProvider {\r\n\r\n  getOutboundPorts(context: PortProviderContext): Array<Port> {\r\n    const activity = context.activity as FlowSendHttpRequest;\r\n\r\n    if (activity == null)\r\n      return [];\r\n\r\n    const expectedStatusCodes = activity.expectedStatusCodes as ActivityInput;\r\n\r\n    if (!expectedStatusCodes)\r\n      return [];\r\n\r\n    const statusCodesJson = (expectedStatusCodes.expression as ObjectExpression).value;\r\n    const statusCodes = JSON.parse(statusCodesJson) as Array<string>;\r\n    const catchAllPort: Port = {name: 'Unmatched status code', displayName: 'Unmatched status code', type: PortType.Flow};\r\n    const outcomes: Port[] = [...statusCodes.map(x => ({name: x.toString(), displayName: x.toString(), type: PortType.Flow})), catchAllPort];\r\n\r\n    return outcomes;\r\n  }\r\n\r\n  resolvePort(portName: string, context: PortProviderContext): Activity | Array<Activity> {\r\n    return null;\r\n  }\r\n\r\n  assignPort(portName: string, activity: Activity, context: PortProviderContext) {\r\n    return null;\r\n  }\r\n}\r\n"]}