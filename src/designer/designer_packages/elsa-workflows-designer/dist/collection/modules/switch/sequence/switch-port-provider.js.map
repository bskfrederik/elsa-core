{"version":3,"file":"switch-port-provider.js","sourceRoot":"","sources":["../../../../src/modules/switch/sequence/switch-port-provider.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAiB,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AAKlD,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;EAE7B,gBAAgB,CAAC,OAA4B;;IAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAA0B,CAAC;IAEpD,IAAI,QAAQ,IAAI,IAAI;MAClB,OAAO,EAAE,CAAC;IAEZ,MAAM,KAAK,GAAG,MAAA,QAAQ,CAAC,KAAK,mCAAI,EAAE,CAAC;IACnC,MAAM,KAAK,GAAW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAC,CAAC,CAAC,CAAC;IACvG,MAAM,WAAW,GAAS,EAAC,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAC,CAAC;IAC7F,OAAO,CAAC,GAAG,KAAK,EAAE,WAAW,CAAC,CAAC;EACjC,CAAC;EAED,WAAW,CAAC,QAAgB,EAAE,OAA4B;;IACxD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAA0B,CAAC;IAEpD,IAAI,QAAQ,IAAI,SAAS;MACvB,OAAO,QAAQ,CAAC,OAAO,CAAC;IAE1B,MAAM,KAAK,GAAsB,MAAA,QAAQ,CAAC,KAAK,mCAAI,EAAE,CAAC;IACtD,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,CAAC;IAEtD,IAAI,CAAC,QAAQ;MACX,OAAO,IAAI,CAAC;IAEd,OAAO,QAAQ,CAAC,QAAQ,CAAC;EAC3B,CAAC;EAED,UAAU,CAAC,QAAgB,EAAE,QAAkB,EAAE,OAA4B;;IAC3E,MAAM,cAAc,GAAG,OAAO,CAAC,QAA0B,CAAC;IAE1D,IAAI,QAAQ,IAAI,SAAS,EAAE;MACzB,cAAc,CAAC,OAAO,GAAG,QAAQ,CAAC;MAClC,OAAO;KACR;IAED,MAAM,KAAK,GAAsB,MAAA,cAAc,CAAC,KAAK,mCAAI,EAAE,CAAC;IAC5D,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,CAAC;IAEtD,IAAI,CAAC,QAAQ;MACX,OAAO;IAET,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC/B,CAAC;CACF,CAAA;AA7CY,kBAAkB;EAD9B,OAAO,EAAE;GACG,kBAAkB,CA6C9B;SA7CY,kBAAkB","sourcesContent":["import 'reflect-metadata';\r\nimport {Service} from \"typedi\";\r\nimport {Activity, Port, PortType} from \"../../../models\";\r\nimport {SwitchActivity, SwitchCase} from \"./models\";\r\nimport {PortProvider, PortProviderContext} from \"../../../services\";\r\n\r\n@Service()\r\nexport class SwitchPortProvider implements PortProvider {\r\n\r\n  getOutboundPorts(context: PortProviderContext): Array<Port> {\r\n    const activity = context.activity as SwitchActivity;\r\n\r\n    if (activity == null)\r\n      return [];\r\n\r\n    const cases = activity.cases ?? [];\r\n    const ports: Port[] = cases.map(x => ({name: x.label, displayName: x.label, type: PortType.Embedded}));\r\n    const defaultPort: Port = {name: 'default', displayName: 'Default', type: PortType.Embedded};\r\n    return [...ports, defaultPort];\r\n  }\r\n\r\n  resolvePort(portName: string, context: PortProviderContext): Activity | Array<Activity> {\r\n    const activity = context.activity as SwitchActivity;\r\n\r\n    if (portName == 'default')\r\n      return activity.default;\r\n\r\n    const cases: Array<SwitchCase> = activity.cases ?? [];\r\n    const caseItem = cases.find(x => x.label == portName);\r\n\r\n    if (!caseItem)\r\n      return null;\r\n\r\n    return caseItem.activity;\r\n  }\r\n\r\n  assignPort(portName: string, activity: Activity, context: PortProviderContext) {\r\n    const switchActivity = context.activity as SwitchActivity;\r\n\r\n    if (portName == 'default') {\r\n      switchActivity.default = activity;\r\n      return;\r\n    }\r\n\r\n    const cases: Array<SwitchCase> = switchActivity.cases ?? [];\r\n    const caseItem = cases.find(x => x.label == portName);\r\n\r\n    if (!caseItem)\r\n      return;\r\n\r\n    caseItem.activity = activity;\r\n  }\r\n}\r\n"]}