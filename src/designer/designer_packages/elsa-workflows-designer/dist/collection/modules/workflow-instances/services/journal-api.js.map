{"version":3,"file":"journal-api.js","sourceRoot":"","sources":["../../../../src/modules/workflow-instances/services/journal-api.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EAAC,oBAAoB,EAAC,MAAM,gBAAgB,CAAC;AACpD,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAC,kBAAkB,EAAC,MAAM,mBAAmB,CAAC;AAG9C,IAAM,UAAU,GAAhB,MAAM,UAAU;EAIrB,YAAY,QAA4B;IAuBhC,kBAAa,GAAG,KAAK,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IAtBtE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,CAAC;EAED,KAAK,CAAC,IAAI,CAAC,OAAkC;IAC3C,IAAI,WAAW,GAAG;MAChB,IAAI,EAAE,OAAO,CAAC,IAAI;MAClB,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;IAEF,MAAM,eAAe,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;IAC1D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9C,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAwC,sBAAsB,OAAO,CAAC,kBAAkB,WAAW,eAAe,EAAE,CAAC,CAAC;IAC3J,OAAO,QAAQ,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,KAAK,CAAC,YAAY,CAAC,OAA4B;IAE7C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9C,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAA6B,sBAAsB,OAAO,CAAC,kBAAkB,YAAY,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;IACpJ,OAAO,QAAQ,CAAC,IAAI,CAAC;EACvB,CAAC;CAGF,CAAA;AA5BY,UAAU;EADtB,OAAO,EAAE;mCAKc,kBAAkB;GAJ7B,UAAU,CA4BtB;SA5BY,UAAU","sourcesContent":["import {OrderBy, OrderDirection, PagedList, WorkflowExecutionLogRecord } from \"../../../models\";\r\nimport {serializeQueryString} from \"../../../utils\";\r\nimport {Service} from \"typedi\";\r\nimport {ElsaClientProvider} from \"../../../services\";\r\n\r\n@Service()\r\nexport class JournalApi {\r\n\r\n  private provider: ElsaClientProvider;\r\n\r\n  constructor(provider: ElsaClientProvider) {\r\n    this.provider = provider;\r\n  }\r\n\r\n  async list(request: GetWorkflowJournalRequest): Promise<PagedList<WorkflowExecutionLogRecord>> {\r\n    let queryString = {\r\n      page: request.page,\r\n      pageSize: request.pageSize\r\n    };\r\n\r\n    const queryStringText = serializeQueryString(queryString);\r\n    const httpClient = await this.getHttpClient();\r\n    const response = await httpClient.get<PagedList<WorkflowExecutionLogRecord>>(`workflow-instances/${request.workflowInstanceId}/journal${queryStringText}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getLastEntry(request: GetLastEntryRequest): Promise<WorkflowExecutionLogRecord> {\r\n\r\n    const httpClient = await this.getHttpClient();\r\n    const response = await httpClient.get<WorkflowExecutionLogRecord>(`workflow-instances/${request.workflowInstanceId}/journal/${request.activityId}`);\r\n    return response.data;\r\n  }\r\n\r\n  private getHttpClient = async () => await this.provider.getHttpClient();\r\n}\r\n\r\nexport interface GetWorkflowJournalRequest {\r\n  workflowInstanceId: string;\r\n  page?: number;\r\n  pageSize?: number;\r\n}\r\n\r\nexport interface GetLastEntryRequest {\r\n  workflowInstanceId: string;\r\n  activityId: string;\r\n}\r\n"]}