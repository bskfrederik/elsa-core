{"version":3,"file":"variables-editor.js","sourceRoot":"","sources":["../../../../../src/modules/workflow-definitions/components/workflow-properties/variables-editor.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, Element, Event, EventEmitter, h, Prop, State, Watch} from \"@stencil/core\";\nimport {StorageDriverDescriptor, Variable} from \"../../../../models\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {Container} from \"typedi\";\nimport {ModalActionClickArgs, ModalActionDefinition, ModalActionType, ModalDialogInstance, ModalDialogService} from \"../../../../components/shared/modal-dialog\";\nimport {DeleteIcon, EditIcon} from \"../../../../components/icons/tooling\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-variables-editor',\n  shadow: false\n})\nexport class VariablesEditor {\n  private readonly modalDialogService: ModalDialogService;\n  private readonly saveAction: ModalActionDefinition;\n  private modalDialogInstance: ModalDialogInstance;\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  constructor() {\n    this.modalDialogService = Container.get(ModalDialogService);\n\n    this.saveAction = {\n      name: 'Save',\n      type: ModalActionType.Submit,\n      text: 'Save',\n      isPrimary: true,\n      onClick: this.onVariableChanged\n    };\n  }\n\n  @Prop() variables?: Array<Variable>;\n  @Event() variablesChanged: EventEmitter<Variable[]>;\n  @State() variablesState: Array<Variable> = [];\n\n  @Watch('variables')\n  onVariablesPropChanged(value: Array<Variable>) {\n    this.variablesState = !!this.variables ? [...this.variables] : [];\n  }\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n    this.onVariablesPropChanged(this.variables);\n  }\n\n  render() {\n    const variables = this.variables;\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n\n    return (\n      <div>\n        <div class=\"tw-flex tw-justify-end tw-m-4\">\n          <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddVariableClick()}>Add variable</button>\n        </div>\n        <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n          <table class=\"default-table\">\n            <thead>\n            <tr>\n              <th scope=\"col\">{this.strings.columName}</th>\n              <th scope=\"col\">{this.strings.columnType}</th>\n              <th scope=\"col\">{this.strings.columStorage}</th>\n              <th scope=\"col\"/>\n            </tr>\n            </thead>\n            <tbody>\n            {variables.map(variable => {\n                const storage = storageDrivers.find(x => x.typeName == variable.storageDriverTypeName);\n                const storageName = storage?.displayName ?? '-';\n                const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == variable.typeName);\n                const typeDisplayName = descriptor?.displayName ?? variable.typeName;\n\n                return (\n                  <tr>\n                    <td class=\"tw-whitespace-nowrap\">{variable.name}</td>\n                    <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                    <td>{storageName}</td>\n                    <td class=\"tw-pr-6\">\n                      <elsa-context-menu\n                        menuItems={[\n                          {text: this.strings.variableEditButton, handler: e => this.onEditClick(e, variable), icon: <EditIcon/>},\n                          {text: this.strings.variableDeleteButton, handler: e => this.onDeleteClick(e, variable), icon: <DeleteIcon/>},\n                        ]}\n                      />\n                    </td>\n                  </tr>);\n              }\n            )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private getVariableNameExists = (name: string): boolean => !!this.variables.find(x => x.name == name);\n\n  private updateVariablesState = (value: Array<Variable>) => {\n    this.variablesState = value;\n    this.variablesChanged.emit(value);\n  };\n\n  private generateNewVariableName = () => {\n    const variables = this.variables;\n    let counter = variables.length;\n\n    while (true) {\n      const newVariableName = `Variable${++counter}`;\n\n      if (!this.getVariableNameExists(newVariableName))\n        return newVariableName;\n    }\n  };\n\n  private onAddVariableClick = async () => {\n    const newVariableName = this.generateNewVariableName();\n    const variable: Variable = {id: '', name: newVariableName, typeName: 'Object', value: null, isArray: false};\n\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]})\n  };\n\n  private onEditClick = async (e: Event, variable: Variable) => {\n    e.preventDefault();\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]});\n  };\n\n  private onDeleteClick = (e: Event, variable: Variable) => {\n    e.preventDefault();\n    const variables = this.variables.filter(x => x != variable);\n    this.updateVariablesState(variables);\n  };\n\n  private onVariableChanged = async (a: ModalActionClickArgs) => {\n    const updatedVariable = await (a.instance.modalDialogContentRef as HTMLElsaVariableEditorDialogContentElement).getVariable();\n    let variables = this.variables;\n    const variableExists = !!variables.find(x => x == updatedVariable);\n\n    if (variableExists)\n      variables = [...variables];\n    else\n      variables = [...variables, updatedVariable];\n\n    variables = variables.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    this.updateVariablesState(variables);\n  };\n}\n"]}