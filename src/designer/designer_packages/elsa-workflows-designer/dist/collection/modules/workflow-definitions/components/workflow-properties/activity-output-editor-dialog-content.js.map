{"version":3,"file":"activity-output-editor-dialog-content.js","sourceRoot":"","sources":["../../../../../src/modules/workflow-definitions/components/workflow-properties/activity-output-editor-dialog-content.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, h, Prop, Event, EventEmitter, Method, Element} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {InputDefinition, OutputDefinition} from \"../../models/entities\";\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport { getLocaleComponentStrings } from \"../../../../utils/locale\";\n\n@Component({\n  tag: 'elsa-activity-output-editor-dialog-content',\n  shadow: false\n})\nexport class ActivityOutputEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() output: OutputDefinition;\n  @Event() outputChanged: EventEmitter<OutputDefinition>;\n\n  @Method()\n  async getOutput(): Promise<OutputDefinition> {\n    return this.getOutputInternal(this.formElement);\n  }\n\n  @Element() element: HTMLElement;\n  strings!: any;\n\n  async componentWillLoad() {\n    this.strings = await getLocaleComponentStrings(this.element);\n  }\n\n\n  render() {\n    const output: OutputDefinition = this.output ?? {name: '', type: 'Object', isArray: false};\n    const outputTypeName = output.type;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const groupedTypes = groupBy(availableTypes, x => x.category);\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">{this.strings.editOutputDefinition}</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"outputName\" label={this.strings.outputName} hint={this.strings.outputNameHint}>\n                <input type=\"text\" name=\"outputName\" id=\"outputName\" value={output.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputTypeName\" label={this.strings.outputType} hint={this.strings.outputTypeHint}>\n                <select id=\"outputTypeName\" name=\"outputTypeName\">\n                  {Object.keys(groupedTypes).map(category => {\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == outputTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputDisplayName\" label={this.strings.outputDisplayName} hint={this.strings.outputDisplayNameHint}>\n                <input type=\"text\" name=\"outputDisplayName\" id=\"outputDisplayName\" value={output.displayName}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputDescription\" label={this.strings.outputDescription} hint={this.strings.outputDescriptionHint}>\n                <input type=\"text\" name=\"outputDescription\" id=\"outputDescription\" value={output.description}/>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const output = this.getOutputInternal(form);\n    this.outputChanged.emit(output);\n  };\n\n  private getOutputInternal = (form: HTMLFormElement): OutputDefinition => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('outputName') as string;\n    const displayName = formData.get('outputDisplayName') as string;\n    const type = formData.get('outputTypeName') as string;\n    const description = formData.get('outputDescription') as string;\n    const output = this.output;\n\n    output.name = name;\n    output.type = type;\n    output.displayName = displayName;\n    output.description = description;\n\n    return output;\n  };\n\n}\n"]}