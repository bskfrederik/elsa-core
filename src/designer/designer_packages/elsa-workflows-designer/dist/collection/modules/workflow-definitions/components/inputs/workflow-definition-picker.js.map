{"version":3,"file":"workflow-definition-picker.js","sourceRoot":"","sources":["../../../../../src/modules/workflow-definitions/components/inputs/workflow-definition-picker.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAC,SAAS,EAAC,MAAM,QAAQ,CAAC;AAGjC,OAAO,EAAC,gBAAgB,EAAC,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAA4B,WAAW,EAAC,MAAM,oBAAoB,CAAC;AAC1E,OAAO,EAAC,SAAS,EAAC,MAAM,gDAAgD,CAAC;AACzE,OAAO,EAAC,sBAAsB,EAAE,0BAA0B,EAAC,MAAM,oBAAoB,CAAC;AAMtF,MAAM,OAAO,mBAAmB;;IAEtB,wBAAmB,GAAqC,EAAE,CAAC;IAgC3D,aAAQ,GAAG,CAAC,CAAQ,EAAE,EAAE;MAC9B,MAAM,YAAY,GAAG,CAAC,CAAC,MAA2B,CAAC;MACnD,MAAM,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC;MACxC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IACpE,CAAC,CAAA;;;EAlCD,KAAK,CAAC,iBAAiB;IACrB,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IACxD,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,EAAC,cAAc,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,EAAE,OAAO,EAAE,0BAA0B,CAAC,IAAI,EAAC,CAAC,CAAC;IACvH,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC5C,CAAC;EAEM,MAAM;;IACX,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC;IACvC,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IACrC,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;IAChD,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACrD,MAAM,KAAK,GAAG,gBAAgB,CAAC,YAAY,CAAkB,CAAC;IAC9D,MAAM,YAAY,GAAG,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,0CAAE,KAAK,CAAC;IAE9C,OAAO,CACL,EAAC,SAAS,IAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,WAAW;MAChE,cAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAClE,mBAAmB,CAAC,GAAG,CAAC,CAAC,UAAqC,EAAE,EAAE;QACjE,MAAM,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;QAC7C,MAAM,UAAU,GAAG,YAAY,IAAI,YAAY,CAAC;QAChD,OAAO,cAAQ,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,UAAU,IAAG,UAAU,CAAC,IAAI,CAAU,CAAC;MACvF,CAAC,CAAC,CACK,CACC,CACb,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;CAOF","sourcesContent":["import {Component, h, Prop} from '@stencil/core';\r\nimport {Container} from \"typedi\";\r\nimport {WorkflowDefinitionSummary} from \"../../models/entities\";\r\nimport {ActivityInputContext} from \"../../../../services/activity-input-driver\";\r\nimport {getPropertyValue} from \"../../../../utils\";\r\nimport {ActivityInput, Expression, SyntaxNames} from \"../../../../models\";\r\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\r\nimport {WorkflowDefinitionsApi, WorkflowDefinitionsOrderBy} from \"../../services/api\";\r\n\r\n@Component({\r\n  tag: 'elsa-workflow-definition-picker-input',\r\n  shadow: false\r\n})\r\nexport class VariablePickerInput {\r\n  @Prop() inputContext: ActivityInputContext;\r\n  private workflowDefinitions: Array<WorkflowDefinitionSummary> = [];\r\n\r\n  async componentWillLoad() {\r\n    const apiClient = Container.get(WorkflowDefinitionsApi);\r\n    const response = await apiClient.list({versionOptions: {isPublished: true}, orderBy: WorkflowDefinitionsOrderBy.Name});\r\n    this.workflowDefinitions = response.items;\r\n  }\r\n\r\n  public render() {\r\n    const inputContext = this.inputContext;\r\n    const inputDescriptor = inputContext.inputDescriptor;\r\n    const fieldName = inputDescriptor.name;\r\n    const fieldId = inputDescriptor.name;\r\n    const displayName = inputDescriptor.displayName;\r\n    const description = inputDescriptor.description;\r\n    const workflowDefinitions = this.workflowDefinitions;\r\n    const value = getPropertyValue(inputContext) as ActivityInput;\r\n    const currentValue = value?.expression?.value;\r\n\r\n    return (\r\n      <FormEntry fieldId={fieldId} label={displayName} hint={description}>\r\n        <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\r\n          {workflowDefinitions.map((definition: WorkflowDefinitionSummary) => {\r\n            const definitionId = definition.definitionId;\r\n            const isSelected = definitionId == currentValue;\r\n            return <option value={definitionId} selected={isSelected}>{definition.name}</option>;\r\n          })}\r\n        </select>\r\n      </FormEntry>\r\n    );\r\n  }\r\n\r\n  private onChange = (e: Event) => {\r\n    const inputElement = e.target as HTMLSelectElement;\r\n    const definitionId = inputElement.value;\r\n    this.inputContext.inputChanged(definitionId, SyntaxNames.Literal);\r\n  }\r\n}\r\n"]}