{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../src/modules/workflow-definitions/services/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { getVersionOptionsString, serializeQueryString } from '../../../utils';\nimport { InputDefinition, WorkflowDefinition, WorkflowDefinitionSummary, WorkflowOptions } from '../models/entities';\nimport { Activity, PagedList, Variable, VersionedEntity, VersionOptions } from '../../../models';\nimport { Service } from 'typedi';\nimport { AxiosResponse } from 'axios';\nimport { removeGuidsFromPortNames, addGuidsToPortNames } from '../../../utils/graph';\nimport { cloneDeep } from '@antv/x6/lib/util/object/object';\nimport { ElsaClientProvider } from '../../../services';\n\n@Service()\nexport class WorkflowDefinitionsApi {\n  private provider: ElsaClientProvider;\n\n  constructor(provider: ElsaClientProvider) {\n    this.provider = provider;\n  }\n\n  async publish(request: PublishWorkflowDefinitionRequest): Promise<WorkflowDefinition> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<WorkflowDefinition>(`workflow-definitions/${request.definitionId}/publish`, request);\n    return response.data;\n  }\n\n  async execute(definitionId: string): Promise<any> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<WorkflowDefinition>(`workflow-definitions/${definitionId}/execute`, {\n      definitionId: definitionId,\n    });\n    return response.data;\n  }\n\n  async retract(request: RetractWorkflowDefinitionRequest): Promise<WorkflowDefinition> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<WorkflowDefinition>(`workflow-definitions/${request.definitionId}/retract`, request);\n    return response.data;\n  }\n\n  async delete(request: DeleteWorkflowDefinitionRequest): Promise<WorkflowDefinition> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.delete<WorkflowDefinition>(`workflow-definitions/${request.definitionId}`);\n    return response.data;\n  }\n\n  async deleteVersion(request: DeleteWorkflowVersionRequest): Promise<WorkflowDefinition> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.delete<WorkflowDefinition>(`workflow-definitions/${request.definitionId}/version/${request.version}`);\n    return response.data;\n  }\n\n  async revertVersion(request: RevertWorkflowVersionRequest): Promise<WorkflowDefinition> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<WorkflowDefinition>(`workflow-definitions/${request.definitionId}/revert/${request.version}`);\n    return response.data;\n  }\n\n  async post(request: SaveWorkflowDefinitionRequest): Promise<WorkflowDefinition> {\n    //TODO: Written as a workaround for different server and client models.\n    //To be deleted after the port model on backend is updated.\n    const requestClone = cloneDeep(request);\n    removeGuidsFromPortNames(requestClone.model.root);\n\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<WorkflowDefinition>('workflow-definitions', requestClone);\n\n    addGuidsToPortNames(response.data.root);\n    return response.data;\n  }\n\n  async get(request: GetWorkflowRequest): Promise<WorkflowDefinition> {\n    const queryString = {};\n\n    if (!!request.versionOptions) queryString['versionOptions'] = getVersionOptionsString(request.versionOptions);\n    if (request.includeCompositeRoot === true) queryString['includeCompositeRoot'] = true;\n\n    const queryStringText = serializeQueryString(queryString);\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.get<WorkflowDefinition>(`workflow-definitions/${request.definitionId}${queryStringText}`);\n    return response.data;\n  }\n\n  async getVersions(workflowDefinitionId: string): Promise<Array<WorkflowDefinition>> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.get<Array<WorkflowDefinition>>(`workflow-definitions/${workflowDefinitionId}/versions`);\n    return response.data;\n  }\n\n  async list(request: ListWorkflowDefinitionsRequest): Promise<PagedList<WorkflowDefinitionSummary>> {\n    const queryString: any = {};\n\n    if (!!request.materializerName) queryString.materializer = request.materializerName;\n\n    if (!!request.versionOptions) queryString.versionOptions = getVersionOptionsString(request.versionOptions);\n\n    if (!!request.page) queryString.page = request.page;\n\n    if (!!request.pageSize) queryString.pageSize = request.pageSize;\n\n    if (!!request.pageSize) queryString.orderBy = request.orderBy;\n\n    if (!!request.label) queryString.label = request.label;\n\n    if (!!request.searchTerm) queryString.searchTerm = request.searchTerm;\n\n    const queryStringText = serializeQueryString(queryString);\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.get<PagedList<WorkflowDefinitionSummary>>(`workflow-definitions${queryStringText}`);\n    return response.data;\n  }\n\n  async export(request: ExportWorkflowRequest): Promise<ExportWorkflowResponse> {\n    const queryString = {};\n\n    if (!!request.versionOptions) queryString['versionOptions'] = getVersionOptionsString(request.versionOptions);\n\n    const queryStringText = serializeQueryString(queryString);\n    const definitionId = request.definitionId;\n    const httpClient = await this.getHttpClient();\n\n    const response = await httpClient.get(`workflow-definitions/${request.definitionId}/export${queryStringText}`, {\n      responseType: 'blob',\n    });\n\n    const contentDispositionHeader = response.headers['content-disposition']; // Only available if the Elsa Server exposes the \"Content-Disposition\" header.\n    const fileName = contentDispositionHeader ? contentDispositionHeader.split(';')[1].split('=')[1] : `workflow-definition-${definitionId}.json`;\n    const data = response.data;\n\n    return {\n      fileName: fileName,\n      data: data,\n    };\n  }\n\n  async import(request: ImportWorkflowRequest): Promise<ImportWorkflowResponse> {\n    const file = request.file;\n    const definitionId = request.definitionId;\n    const json = await file.text();\n    const httpClient = await this.getHttpClient();\n    let response: AxiosResponse;\n\n    if (!definitionId) {\n      response = await httpClient.put<WorkflowDefinition>(`workflow-definitions/import`, json, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n    } else {\n      response = await httpClient.post<WorkflowDefinition>(`workflow-definitions/${definitionId}/import`, json, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n    }\n\n    const workflowDefinition = response.data;\n\n    // TODO: Written as a workaround for different server and client models.\n    // To be deleted after the connection model on backend is updated.\n    addGuidsToPortNames(workflowDefinition.root);\n\n    return { workflowDefinition: workflowDefinition };\n  }\n\n  async deleteMany(request: DeleteManyWorkflowDefinitionRequest): Promise<DeleteManyWorkflowDefinitionResponse> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<DeleteManyWorkflowDefinitionResponse>(`bulk-actions/delete/workflow-definitions/by-definition-id`, {\n      definitionIds: request.definitionIds,\n    });\n    return response.data;\n  }\n\n  async publishMany(request: PublishManyWorkflowDefinitionRequest): Promise<PublishManyWorkflowDefinitionResponse> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<PublishManyWorkflowDefinitionResponse>(`/bulk-actions/publish/workflow-definitions/by-definition-ids`, {\n      definitionIds: request.definitionIds,\n    });\n    return response.data;\n  }\n\n  async unpublishMany(request: UnpublishManyWorkflowDefinitionRequest): Promise<UnpublishManyWorkflowDefinitionResponse> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<UnpublishManyWorkflowDefinitionResponse>(`/bulk-actions/retract/workflow-definitions/by-definition-ids`, {\n      definitionIds: request.definitionIds,\n    });\n    return response.data;\n  }\n\n  async updateWorkflowReferences(request: UpdateWorkflowReferencesRequest): Promise<UpdateWorkflowReferencesResponse> {\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.post<UpdateWorkflowReferencesResponse>(`workflow-definitions/${request.definitionId}/update-references`, request);\n    return response.data;\n  }\n\n  private getHttpClient = async () => await this.provider.getHttpClient();\n}\n\nexport interface SaveWorkflowDefinitionRequest {\n  model: WorkflowDefinition;\n  publish: boolean;\n}\n\nexport interface BaseManyWorkflowDefinitionRequest {\n  definitionIds: string[];\n}\n\nexport interface DeleteManyWorkflowDefinitionRequest extends BaseManyWorkflowDefinitionRequest {}\n\nexport interface PublishManyWorkflowDefinitionRequest extends BaseManyWorkflowDefinitionRequest {}\n\nexport interface UnpublishManyWorkflowDefinitionRequest extends BaseManyWorkflowDefinitionRequest {}\n\nexport interface DeleteWorkflowDefinitionRequest {\n  definitionId: string;\n}\n\nexport interface DeleteWorkflowVersionRequest {\n  definitionId: string;\n  version: number;\n}\n\nexport interface RevertWorkflowVersionRequest {\n  definitionId: string;\n  version: number;\n}\n\nexport interface RetractWorkflowDefinitionRequest {\n  definitionId: string;\n}\n\nexport interface PublishWorkflowDefinitionRequest {\n  definitionId: string;\n}\n\nexport interface GetWorkflowRequest {\n  definitionId: string;\n  versionOptions?: VersionOptions;\n  includeCompositeRoot?: boolean;\n}\n\nexport interface ExportWorkflowRequest {\n  definitionId: string;\n  versionOptions?: VersionOptions;\n}\n\nexport interface ExportWorkflowResponse {\n  fileName: string;\n  data: Blob;\n}\n\nexport interface ImportWorkflowRequest {\n  definitionId?: string;\n  file: File;\n}\n\nexport interface ImportWorkflowResponse {\n  workflowDefinition: WorkflowDefinition;\n}\n\nexport enum WorkflowDefinitionsOrderBy {\n  Name = 'Name',\n  Created = 'Created'\n}\n\nexport interface ListWorkflowDefinitionsRequest {\n  searchTerm?: string;\n  page?: number;\n  pageSize?: number;\n  definitionIds?: Array<string>;\n  versionOptions?: VersionOptions;\n  materializerName?: string;\n  orderBy?: WorkflowDefinitionsOrderBy;\n  label?: Array<string>;\n}\n\nexport interface DeleteManyWorkflowDefinitionResponse {\n  deleted: number;\n}\n\nexport interface PublishManyWorkflowDefinitionResponse {\n  published: string[];\n  alreadyPublished: string[];\n  notFound: string[];\n}\n\nexport interface UnpublishManyWorkflowDefinitionResponse {\n  retracted: string[];\n  notPublished: string[];\n  notFound: string[];\n}\n\nexport interface UpdateWorkflowReferencesRequest {\n  definitionId: string;\n  consumingWorkflowIds?: Array<string>;\n}\n\nexport interface UpdateWorkflowReferencesResponse {\n  affectedWorkflows: Array<string>;\n}\n"]}