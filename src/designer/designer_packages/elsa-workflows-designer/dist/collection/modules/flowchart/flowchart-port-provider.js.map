{"version":3,"file":"flowchart-port-provider.js","sourceRoot":"","sources":["../../../src/modules/flowchart/flowchart-port-provider.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,SAAS,EAAC,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAA;AAMvB,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;EAChC,gBAAgB,CAAC,OAA4B;IAC3C,MAAM,EAAC,kBAAkB,EAAC,GAAG,OAAO,CAAC;IACrC,OAAO,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;EACvC,CAAC;EAED,WAAW,CAAC,QAAgB,EAAE,OAA4B;IACxD,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IAElC,IAAI,CAAC,QAAQ;MACX,OAAO,IAAI,CAAC;IAEd,MAAM,iBAAiB,GAAG,OAAO,CAAC,QAAqB,CAAC;IAExD,IAAG,QAAQ,IAAI,OAAO,EAAE;MACtB,MAAM,eAAe,GAAG,iBAAiB,CAAC,KAAK,CAAC;MAChD,OAAO,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,eAAe,CAAC,CAAC;KACxE;IAED,OAAO,QAAQ,CAAC,QAAQ,CAA+B,CAAC;EAC1D,CAAC;EAED,UAAU,CAAC,QAAgB,EAAE,QAAkB,EAAE,OAA4B;IAC3E,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC;IAEnC,IAAI,CAAC,SAAS;MACZ,OAAO,IAAI,CAAC;IAEd,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;EACjC,CAAC;CAEF,CAAA;AAjCY,qBAAqB;EADjC,OAAO,EAAE;GACG,qBAAqB,CAiCjC;SAjCY,qBAAqB","sourcesContent":["import 'reflect-metadata';\r\nimport {camelCase} from 'lodash';\r\nimport {Service} from \"typedi\"\r\nimport {PortProvider, PortProviderContext} from \"../../services\";\r\nimport {Activity, Port} from \"../../models\";\r\nimport {Flowchart} from \"./models\";\r\n\r\n@Service()\r\nexport class FlowchartPortProvider implements PortProvider {\r\n  getOutboundPorts(context: PortProviderContext): Array<Port> {\r\n    const {activityDescriptor} = context;\r\n    return [...activityDescriptor.ports];\r\n  }\r\n\r\n  resolvePort(portName: string, context: PortProviderContext): Activity | Array<Activity> {\r\n    const propName = camelCase(portName);\r\n    const activity = context.activity;\r\n\r\n    if (!activity)\r\n      return null;\r\n\r\n    const flowchartActivity = context.activity as Flowchart;\r\n\r\n    if(propName == 'start') {\r\n      const startActivityId = flowchartActivity.start;\r\n      return flowchartActivity.activities.find(x => x.id == startActivityId);\r\n    }\r\n\r\n    return activity[propName] as Activity | Array<Activity>;\r\n  }\r\n\r\n  assignPort(portName: string, activity: Activity, context: PortProviderContext) {\r\n    const propName = camelCase(portName);\r\n    const container = context.activity;\r\n\r\n    if (!container)\r\n      return null;\r\n\r\n    container[propName] = activity;\r\n  }\r\n\r\n}\r\n"]}