{"version":3,"file":"flowchart.js","sourceRoot":"","sources":["../../../src/modules/flowchart/flowchart.tsx"],"names":[],"mappings":"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":["import 'reflect-metadata';\nimport { Component, Element, Event, EventEmitter, h, Listen, Method, Prop, State, Watch } from '@stencil/core';\nimport { first } from 'lodash';\nimport { Edge, Graph, Model, Node, NodeView, Point } from '@antv/x6';\nimport './shapes';\nimport './ports';\nimport { ActivityNodeShape } from './shapes';\nimport {\n  Activity,\n  ActivityDeletedArgs,\n  ActivityDescriptor,\n  ActivitySelectedArgs,\n  ChildActivitySelectedArgs,\n  ContainerSelectedArgs,\n  EditChildActivityArgs,\n  GraphUpdatedArgs,\n  WorkflowUpdatedArgs,\n} from '../../models';\nimport { createGraph } from './graph-factory';\nimport { AddActivityArgs, Connection, Flowchart, FlowchartModel, FlowchartPathItem, LayoutDirection, RenameActivityArgs, UpdateActivityArgs } from './models';\nimport { NodeFactory } from './node-factory';\nimport { Container } from 'typedi';\nimport { createActivityLookup, EventBus, flatten, PortProviderRegistry, walkActivities } from '../../services';\nimport { ConnectionCreatedEventArgs, FlowchartEvents } from './events';\nimport { ContextMenuAnchorPoint, ContextMenuItem } from '../../components/shared/context-menu/models';\nimport descriptorsStore from '../../data/descriptors-store';\nimport { Hash } from '../../utils';\nimport PositionEventArgs = NodeView.PositionEventArgs;\nimport FromJSONData = Model.FromJSONData;\nimport PointLike = Point.PointLike;\nimport { generateUniqueActivityName } from '../../utils/generate-activity-name';\nimport { DagreLayout, OutNode } from '@antv/layout';\nimport { adjustPortMarkupByNode, getPortNameByPortId, rebuildGraph } from '../../utils/graph';\nimport FlowchartTunnel, { FlowchartState } from './state';\n\nconst FlowchartTypeName = 'Elsa.Flowchart';\n\n@Component({\n  tag: 'elsa-flowchart',\n  styleUrl: 'flowchart.scss',\n})\nexport class FlowchartComponent {\n  private readonly eventBus: EventBus;\n  private readonly nodeFactory: NodeFactory;\n  private readonly portProviderRegistry: PortProviderRegistry;\n  private activityContextMenu: HTMLElsaContextMenuElement;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.nodeFactory = Container.get(NodeFactory);\n    this.portProviderRegistry = Container.get(PortProviderRegistry);\n  }\n\n  @Prop() rootActivity: Activity;\n  @Prop() interactiveMode: boolean = true;\n  @Prop() silent: boolean = false;\n  @Prop() isReadonly: boolean = false;\n\n  @Element() el: HTMLElement;\n  container: HTMLElement;\n  graph: Graph;\n  target: Node;\n\n  @Event() activitySelected: EventEmitter<ActivitySelectedArgs>;\n  @Event() activityDeleted: EventEmitter<ActivityDeletedArgs>;\n  @Event() containerSelected: EventEmitter<ContainerSelectedArgs>;\n  @Event() childActivitySelected: EventEmitter<ChildActivitySelectedArgs>;\n  @Event() graphUpdated: EventEmitter<GraphUpdatedArgs>;\n\n  @State() private activityLookup: Hash<Activity> = {};\n  @State() private activities: Array<Activity> = [];\n  @State() private path: Array<FlowchartPathItem> = [];\n\n  @Listen('childActivitySelected')\n  private async handleChildActivitySelected(e: CustomEvent<ChildActivitySelectedArgs>) {\n    this.childActivitySelected.emit(e.detail);\n  }\n\n  @Method()\n  async newRoot(): Promise<Activity> {\n    const flowchart = await this.createFlowchart();\n    await this.setupGraph(flowchart);\n    await this.scrollToStart();\n    return flowchart;\n  }\n\n  @Method()\n  async updateGraph() {\n    const currentFlowchart = await this.getCurrentFlowchartActivity();\n    await this.setupGraph(currentFlowchart);\n  }\n\n  @Method()\n  async getGraph(): Promise<Graph> {\n    return this.graph;\n  }\n\n  @Method()\n  async reset(): Promise<void> {\n    const model: FromJSONData = { nodes: [], edges: [] };\n\n    // Freeze then unfreeze prevents an error from occurring when importing JSON a second time (e.g. after loading a new workflow.\n    this.graph.freeze();\n    this.graph.fromJSON(model, { silent: false });\n    this.graph.unfreeze();\n  }\n\n  @Method()\n  async updateLayout(): Promise<void> {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n    this.graph.resize(width, height);\n    this.graph.updateBackground();\n  }\n\n  @Method()\n  async zoomToFit() {\n    const graph = this.graph;\n    graph.zoomToFit();\n  }\n\n  @Method()\n  async scrollToStart() {\n    const flowchartModel = this.getFlowchartModel();\n    const startActivity = flowchartModel.activities.find(x => x.id == flowchartModel.start);\n    if (startActivity != null) {\n      this.graph.scrollToCell(this.graph.getCells()[0]);\n    }\n  }\n\n  @Method()\n  async autoLayout(direction: LayoutDirection) {\n    const dagreLayout = new DagreLayout({\n      type: 'dagre',\n      rankdir: direction,\n      align: 'UL',\n      ranksep: 30,\n      nodesep: 15,\n      controlPoints: true,\n    });\n\n    const flowchartModel = this.getFlowchartModel();\n    const nodes = [];\n    const edges = [];\n\n    flowchartModel.activities.forEach(activity => {\n      const activityElement = document.querySelectorAll('[activity-id=\"' + activity.id + '\"]')[0].getBoundingClientRect();\n      nodes.push({\n        id: activity.id,\n        size: { width: activityElement.width, height: activityElement.height },\n        x: activity.metadata.designer.position.x,\n        y: activity.metadata.designer.position.y,\n      });\n    });\n\n    flowchartModel.connections.forEach((connection, index) => {\n      edges.push({ id: index, source: connection.source, target: connection.target });\n    });\n\n    let data = { nodes: nodes, edges: edges };\n    let newLayout = dagreLayout.layout(data);\n\n    newLayout.nodes.forEach(node => {\n      let outNode = node as OutNode;\n      let activity = flowchartModel.activities.find(x => x.id == node.id);\n      activity.metadata.designer.position.x = outNode.x;\n      activity.metadata.designer.position.y = outNode.y;\n\n      this.updateActivity({ id: activity.id, originalId: activity.id, activity: activity });\n    });\n\n    this.updateGraphInternal(flowchartModel.activities, flowchartModel.connections);\n    this.graphUpdated.emit({});\n  }\n\n  @Method()\n  async addActivity(args: AddActivityArgs): Promise<Activity> {\n    const graph = this.graph;\n    const { descriptor, x, y } = args;\n    let id = args.id ?? (await this.generateUniqueActivityName(descriptor));\n    const point: PointLike = graph.pageToLocal(x, y);\n    const sx = point.x;\n    const sy = point.y;\n\n    const activity: Activity = {\n      id: id,\n      type: descriptor.typeName,\n      version: descriptor.version,\n      customProperties: {},\n      metadata: {\n        designer: {\n          position: {\n            x: sx,\n            y: sy,\n          },\n        },\n      },\n    };\n\n    const nodeMetadata = this.nodeFactory.createNode(descriptor, activity, sx, sy);\n    graph.addNode(nodeMetadata, { merge: true });\n    const node = graph.getNodes().find(n => n.data.id == nodeMetadata.activity.id);\n    adjustPortMarkupByNode(node);\n    await this.updateModel();\n    return activity;\n  }\n\n  @Method()\n  async updateActivity(args: UpdateActivityArgs) {\n    const activityId = args.id;\n    const originalId = args.originalId ?? activityId;\n    const activity = args.activity;\n    const node = this.graph.getNodes().find(x => x.data.id == originalId);\n    const nodeShape = node as ActivityNodeShape;\n\n    if (!!node) {\n      // Update the node's data with the activity.\n      nodeShape.setData(activity, { overwrite: true });\n\n      // Updating the node's activity property to trigger a rerender.\n      nodeShape.activity = activity;\n\n      // If the ID of the activity changed, we need to update connection references (X6 stores deep copies of data).\n      if (activityId !== originalId) {\n        this.syncEdgeData(originalId, activity);\n        await this.updateModel();\n      }\n\n      // Update ports.\n      if (args.updatePorts) {\n        this.updatePorts(node, activity);\n      }\n    }\n\n    this.updateLookups();\n  }\n\n  @Method()\n  async getActivity(id: string): Promise<Activity> {\n    return this.activityLookup[id];\n  }\n\n  @Method()\n  public async renameActivity(args: RenameActivityArgs) {\n    const originalId = args.originalId;\n    const activity = args.activity;\n    const node = this.graph.getNodes().find(x => x.data.id == originalId) as ActivityNodeShape;\n\n    if (!node) return;\n\n    // Update the node's data with the activity.\n    node.setData(activity, { overwrite: true });\n\n    // Update the node's activity property to trigger a rerender.\n    node.activity = activity;\n\n    // If the ID of the activity changed, we need to update connection references (X6 stores deep copies of data).\n    if (activity.id !== originalId) {\n      this.syncEdgeData(originalId, activity);\n      await this.updateModel();\n    }\n  }\n\n  @Method()\n  async export(): Promise<Activity> {\n    return this.exportInternal();\n  }\n\n  @Watch('rootActivity')\n  private onActivityChanged(value: Activity) {\n    this.updateLookups();\n  }\n\n  @Watch('interactiveMode')\n  private async onInteractiveModeChange(value: boolean) {\n    const graph = this.graph;\n\n    if (!value || this.isReadonly) {\n      graph.disableSelectionMovable();\n      graph.disableKeyboard();\n    } else {\n      graph.enableSelectionMovable();\n      graph.enableKeyboard();\n    }\n  }\n\n  @Listen('editChildActivity')\n  private async editChildActivity(e: CustomEvent<EditChildActivityArgs>) {\n    const portName = e.detail.port.name;\n    const activityId = e.detail.parentActivityId;\n    const item: FlowchartPathItem = { activityId, portName };\n\n    // Push child prop path.\n    this.path = [...this.path, item];\n\n    // Get current child.\n    const currentActivity = await this.getCurrentActivity();\n\n    // Get flowchart of child.\n    let childFlowchart = await this.getCurrentFlowchartActivity();\n\n    // If there's no flowchart, create it.\n    if (!childFlowchart) {\n      childFlowchart = await this.createFlowchart();\n      this.setPort(currentActivity, portName, childFlowchart);\n    }\n\n    await this.setupGraph(childFlowchart);\n  }\n\n  async componentWillLoad() {\n    this.updateLookups();\n  }\n\n  async componentDidLoad() {\n    await this.createAndInitializeGraph();\n    await this.updateGraph();\n  }\n\n  private getFlowchartDescriptor = () => this.getActivityDescriptor(FlowchartTypeName, 1);\n\n  private createFlowchart = async (): Promise<Flowchart> => {\n    const descriptor = this.getFlowchartDescriptor();\n    const activityId = await this.generateUniqueActivityName(descriptor);\n\n    return {\n      type: descriptor.typeName,\n      version: descriptor.version,\n      id: activityId,\n      start: null,\n      activities: [],\n      connections: [],\n      metadata: {},\n      variables: [],\n      customProperties: {},\n      canStartWorkflow: false,\n    };\n  };\n\n  private createAndInitializeGraph = async () => {\n    const graph = (this.graph = createGraph(\n      this.container,\n      {\n        nodeMovable: () => this.interactiveMode,\n        edgeMovable: () => this.interactiveMode,\n        arrowheadMovable: () => this.interactiveMode,\n        edgeLabelMovable: () => this.interactiveMode,\n        magnetConnectable: () => this.interactiveMode,\n        useEdgeTools: () => this.interactiveMode,\n        toolsAddable: () => this.interactiveMode,\n        stopDelegateOnDragging: () => this.interactiveMode,\n        vertexAddable: () => this.interactiveMode,\n        vertexDeletable: () => this.interactiveMode,\n        vertexMovable: () => this.interactiveMode,\n      },\n      this.getAllActivities,\n    ));\n\n    graph.on('blank:click', this.onGraphClick);\n    graph.on('node:selected', this.onNodeSelected);\n    graph.on('node:contextmenu', this.onNodeContextMenu);\n    graph.on('edge:connected', this.onEdgeConnected);\n    graph.on('node:moved', this.onNodeMoved);\n\n    graph.on('node:moved', this.onGraphChanged);\n    graph.on('node:added', this.onNodeAdded);\n    graph.on('node:removed', this.onNodeRemoved);\n    graph.on('edge:added', this.onGraphChanged);\n    graph.on('edge:removed', this.onGraphChanged);\n    graph.on('edge:connected', this.onGraphChanged);\n\n    await this.updateLayout();\n  };\n\n  private getCurrentActivity = (): Activity => {\n    const activityLookup = this.activityLookup;\n    const path = this.path;\n\n    if (path.length > 0) {\n      const lastItem = path[path.length - 1];\n      return activityLookup[lastItem.activityId];\n    }\n\n    return this.rootActivity;\n  };\n\n  private getCurrentFlowchartActivity = async (): Promise<Flowchart> => {\n    const path = this.path;\n    let currentActivity = this.getCurrentActivity();\n\n    if (path.length > 0) {\n      const lastItem = path[path.length - 1];\n      return this.resolvePort(currentActivity, lastItem.portName);\n    }\n\n    return currentActivity as Flowchart;\n  };\n\n  private resolvePort = (activity: Activity, portName: string): Flowchart => {\n    const portProvider = this.portProviderRegistry.get(activity.type);\n    const activityDescriptor = descriptorsStore.activityDescriptors.find(x => x.typeName == activity.type);\n    const childActivity = portProvider.resolvePort(portName, { activity: activity, activityDescriptor });\n    return childActivity as Flowchart;\n  };\n\n  private setPort = (owner: Activity, portName: string, child: Flowchart) => {\n    const portProvider = this.portProviderRegistry.get(owner.type);\n    const activityDescriptor = descriptorsStore.activityDescriptors.find(x => x.typeName == owner.type);\n    portProvider.assignPort(portName, child, { activity: owner, activityDescriptor });\n    this.updateLookups();\n  };\n\n  private updateModel = async () => {\n    const model = this.getFlowchartModel();\n    const currentFlowchart = await this.getCurrentFlowchartActivity();\n    currentFlowchart.activities = model.activities;\n    currentFlowchart.connections = model.connections;\n    currentFlowchart.start = model.start;\n    this.updateLookups();\n  };\n\n  private exportInternal = (): Activity => {\n    return this.rootActivity;\n  };\n\n  private getActivityDescriptor = (typeName: string, version: number): ActivityDescriptor =>\n    descriptorsStore.activityDescriptors.find(x => x.typeName == typeName && x.version == version);\n\n  private setupGraph = async (flowchart: Flowchart) => {\n    const activities = flowchart.activities;\n    const connections = flowchart.connections;\n    this.updateGraphInternal(activities, connections);\n\n    if (this.isReadonly) {\n      this.graph.disableSelectionMovable();\n      this.graph.disableKeyboard();\n    }\n  };\n\n  private updateGraphInternal = (activities: Array<Activity>, connections: Array<Connection>) => {\n    const edges: Array<Edge.Metadata> = [];\n\n    console.log(activities);\n\n    // Create an X6 node for each activity.\n    const nodes: Array<Node.Metadata> = activities?.map(activity => {\n      const position = activity.metadata.designer?.position || { x: 100, y: 100 };\n      const { x, y } = position;\n      const descriptor = this.getActivityDescriptor(activity.type, activity.version);\n      return this.nodeFactory.createNode(descriptor, activity, x, y);\n    });\n\n    // Create X6 edges for each connection in the flowchart.\n    for (const connection of connections) {\n      const edge: Edge.Metadata = this.createEdge(connection);\n      edges.push(edge);\n    }\n\n    const model: FromJSONData = { nodes, edges };\n\n    // Freeze then unfreeze prevents an error from occurring when importing JSON a second time (e.g. after loading a new workflow.\n    this.graph.freeze();\n    this.graph.fromJSON(model, { silent: false });\n    this.graph.unfreeze();\n    rebuildGraph(this.graph);\n    this.graph.scrollToContent();\n  };\n\n  private getFlowchartModel = (): FlowchartModel => {\n    const graph = this.graph;\n    const graphModel = graph.toJSON();\n    const activities = graphModel.cells.filter(x => x.shape == 'activity').map(x => x.data as Activity);\n    const connections = graphModel.cells.filter(x => x.shape == 'elsa-edge' && !!x.data).map(x => x.data as Connection);\n\n    let rootActivities = activities.filter(activity => {\n      const hasInboundConnections = connections.find(c => c.target.activity == activity.id) != null;\n      return !hasInboundConnections;\n    });\n\n    const startActivity = rootActivities.find(x => x.canStartWorkflow) || first(rootActivities);\n\n    return {\n      activities,\n      connections,\n      start: startActivity?.id,\n    };\n  };\n\n  private createEdge = (connection: Connection): Edge.Metadata => {\n    return {\n      shape: 'elsa-edge',\n      zIndex: -1,\n      data: connection,\n      source: connection.source.activity,\n      target: connection.target.activity,\n      sourcePort: connection.source.port,\n      targetPort: connection.target.port,\n    };\n  };\n\n  private syncEdgeData = (cachedActivityId: string, updatedActivity: Activity) => {\n    const graph = this.graph;\n    const edges = graph.model.getEdges().filter(x => x.shape == 'elsa-edge' && !!x.data);\n\n    for (const edge of edges) {\n      const connection: Connection = edge.data;\n\n      if (connection.target.activity != cachedActivityId && connection.source.activity != cachedActivityId) continue;\n\n      if (connection.target.activity == cachedActivityId) connection.target.activity = updatedActivity.id;\n\n      if (connection.source.activity == cachedActivityId) connection.source.activity = updatedActivity.id;\n\n      edge.data = connection;\n    }\n  };\n\n  private updateLookups = () => {\n    const graph = walkActivities(this.rootActivity);\n    const activityNodes = flatten(graph);\n    this.activities = activityNodes.map(x => x.activity);\n    this.activityLookup = createActivityLookup(activityNodes);\n  };\n\n  private generateUniqueActivityName = async (activityDescriptor: ActivityDescriptor): Promise<string> => {\n    return await generateUniqueActivityName(this.activities, activityDescriptor);\n  };\n\n  private getAllActivities = (): Array<Activity> => this.activities;\n\n  private onGraphClick = async (e: PositionEventArgs<JQuery.ClickEvent>) => {\n    const currentFlowchart = await this.getCurrentFlowchartActivity();\n\n    const args: ContainerSelectedArgs = {\n      activity: currentFlowchart,\n    };\n\n    return this.containerSelected.emit(args);\n  };\n\n  private onNodeSelected = async (e: PositionEventArgs<JQuery.ClickEvent>) => {\n    const node = e.node as ActivityNodeShape;\n    const activityCopy = node.activity;\n\n    // X6 nodes store a copy of the data, so we need to get the original activity from the workflow definition.\n    const activity = this.activityLookup[activityCopy.id];\n\n    const args: ActivitySelectedArgs = {\n      activity: activity,\n    };\n\n    this.activitySelected.emit(args);\n  };\n\n  private onNodeContextMenu = async (e: PositionEventArgs<JQuery.ContextMenuEvent>) => {\n    const node = e.node as ActivityNodeShape;\n    const activity = e.node.data as Activity;\n\n    const menuItems: Array<ContextMenuItem> = [\n      {\n        text: 'Startable',\n        handler: () => this.onToggleCanStartWorkflowClicked(node),\n        isToggle: true,\n        checked: activity.canStartWorkflow,\n      },\n      {\n        text: 'Cut',\n        handler: () => this.onCutActivityClicked(node),\n      },\n      {\n        text: 'Copy',\n        handler: () => this.onCopyActivityClicked(node),\n      },\n      {\n        text: 'Delete',\n        handler: () => this.onDeleteActivityClicked(node),\n      },\n    ];\n\n    this.activityContextMenu.menuItems = this.isReadonly ? [] : menuItems;\n    const localPos = this.graph.localToClient(e.x, e.y);\n    const scroll = this.graph.getScrollbarPosition();\n    this.activityContextMenu.style.top = `${localPos.y}px`;\n    this.activityContextMenu.style.left = `${e.x - scroll.left}px`;\n\n    await this.activityContextMenu.open();\n  };\n\n  private onNodeMoved = (e: PositionEventArgs<JQuery.ClickEvent>) => {\n    const node = e.node as ActivityNodeShape;\n    const activity = node.data as Activity;\n    const nodePosition = node.position({ relative: false });\n\n    activity.metadata = {\n      ...activity.metadata,\n      designer: {\n        ...activity.metadata.designer,\n        position: {\n          x: nodePosition.x,\n          y: nodePosition.y,\n        },\n      },\n    };\n  };\n\n  private onEdgeConnected = async (e: { isNew: boolean; edge: Edge }) => {\n    const edge = e.edge;\n    const sourceNode = edge.getSourceNode();\n    const targetNode = edge.getTargetNode();\n    const sourceActivity = edge.getSourceNode().data as Activity;\n    const targetActivity = targetNode.data as Activity;\n    const sourcePort = sourceNode.getPort(edge.getSourcePortId()).id;\n    const targetPort = targetNode.getPort(edge.getTargetPortId()).id;\n\n    const connection: Connection = {\n      source: {\n        activity: sourceActivity.id,\n        port: sourcePort,\n      },\n      target: {\n        activity: targetActivity.id,\n        port: targetPort,\n      },\n    };\n\n    edge.data = connection;\n\n    const eventArgs: ConnectionCreatedEventArgs = {\n      graph: this.graph,\n      connection,\n      sourceNode,\n      targetNode,\n      sourceActivity,\n      targetActivity,\n      edge,\n    };\n\n    await this.eventBus.emit(FlowchartEvents.ConnectionCreated, this, eventArgs);\n  };\n\n  private onGraphChanged = async (e: any) => {\n    await this.updateModel();\n    this.graphUpdated.emit();\n  };\n\n  private onNodeRemoved = async (e: any) => {\n    const activity = e.node.data as Activity;\n    this.activityDeleted.emit({ activity });\n    await this.onGraphChanged(e);\n  };\n\n  private onNodeAdded = async (e: any) => {\n    const node = e.node as any;\n\n    if (!node.isClone) {\n      const activity = { ...node.getData() } as Activity;\n      const activityDescriptor = this.getActivityDescriptor(activity.type, activity.version);\n      activity.id = await this.generateUniqueActivityName(activityDescriptor);\n      node.activity = { ...activity };\n    }\n\n    await this.onGraphChanged(e);\n  };\n\n  private onToggleCanStartWorkflowClicked = (node: ActivityNodeShape) => {\n    const activity = node.data as Activity;\n    activity.canStartWorkflow = !activity.canStartWorkflow;\n    node.activity = { ...activity };\n  };\n\n  private onDeleteActivityClicked = (node: ActivityNodeShape) => {\n    let cells = this.graph.getSelectedCells();\n\n    if (cells.length == 0) cells = [node];\n\n    this.graph.removeCells(cells);\n\n    for (const cell of cells) {\n      const activity = node.data as Activity;\n      this.activityDeleted.emit({ activity: activity });\n    }\n  };\n  private onCopyActivityClicked = (node: ActivityNodeShape) => {\n    let cells = this.graph.getSelectedCells();\n\n    if (cells.length == 0) cells = [node];\n\n    this.graph.copy(cells);\n  };\n\n  private onCutActivityClicked = (node: ActivityNodeShape) => {\n    let cells = this.graph.getSelectedCells();\n\n    if (cells.length == 0) cells = [node];\n\n    this.graph.cut(cells);\n\n    for (const cell of cells) {\n      const activity = node.data as Activity;\n      this.activityDeleted.emit({ activity: activity });\n    }\n  };\n\n  private onNavigateHierarchy = async (e: CustomEvent<FlowchartPathItem>) => {\n    const item = e.detail;\n    const path = this.path;\n    const index = path.indexOf(item);\n\n    this.path = path.slice(0, index + 1);\n    const childFlowchart = await this.getCurrentFlowchartActivity();\n\n    await this.setupGraph(childFlowchart);\n    await this.scrollToStart();\n  };\n\n  private updatePorts = (node: any, activity: Activity) => {\n    const descriptor = this.getActivityDescriptor(activity.type, activity.version);\n    const desiredPorts = this.nodeFactory.createPorts(descriptor, activity);\n    const actualPorts = node.ports.items;\n\n    const addedPorts = desiredPorts.filter(x => !actualPorts.some(y => getPortNameByPortId(y.id) == getPortNameByPortId(x.id)));\n    const removedPorts = actualPorts.filter(x => !desiredPorts.some(y => getPortNameByPortId(y.id) == getPortNameByPortId(x.id)));\n\n    if (addedPorts.length > 0) node.addPorts(addedPorts);\n\n    if (removedPorts.length > 0) node.removePorts(removedPorts);\n  };\n\n  render() {\n    const path = this.path;\n\n    const state: FlowchartState = {\n      nodeMap: this.activityLookup,\n    };\n\n    return (\n      <FlowchartTunnel.Provider state={state}>\n        <div class=\"tw-relative \">\n          <div class=\"tw-absolute tw-left-0 tw-top-3 tw-z-10\">\n            <elsa-workflow-navigator items={path} rootActivity={this.rootActivity} onNavigate={this.onNavigateHierarchy} />\n          </div>\n          <div class=\"tw-absolute tw-left-0 tw-top-0 tw-right-0 tw-bottom-0 \" ref={el => (this.container = el)}></div>\n          <elsa-context-menu ref={el => (this.activityContextMenu = el)} hideButton={true} anchorPoint={ContextMenuAnchorPoint.TopLeft} class=\"tw-absolute\" />\n        </div>\n      </FlowchartTunnel.Provider>\n    );\n  }\n}\n"]}