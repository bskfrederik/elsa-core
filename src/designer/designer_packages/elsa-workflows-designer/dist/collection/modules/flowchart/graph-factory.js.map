{"version":3,"file":"graph-factory.js","sourceRoot":"","sources":["../../../src/modules/flowchart/graph-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {CellView, Graph, Node, Shape} from '@antv/x6';\r\nimport { v4 as uuid } from 'uuid';\r\nimport {autoOrientConnections, createEdge, deriveNewPortId, getPortNameByPortId} from '../../utils/graph';\r\nimport './ports';\r\nimport {Activity} from \"../../models\";\r\nimport {Connection} from \"./models\";\r\nimport descriptorsStore from \"../../data/descriptors-store\";\r\nimport {generateUniqueActivityName} from \"../../utils/generate-activity-name\";\r\n\r\nexport function createGraph(\r\n  container: HTMLElement,\r\n  interacting: CellView.Interacting,\r\n  getAllActivities: () => Array<Activity>\r\n): Graph {\r\n\r\n  const graph = new Graph({\r\n    container: container,\r\n    interacting: interacting,\r\n    embedding: {\r\n      enabled: false,\r\n    },\r\n    grid: {\r\n      type: 'mesh',\r\n      size: 20,\r\n      visible: true,\r\n      args: {\r\n        color: '#e0e0e0'\r\n      }\r\n    },\r\n    height: 5000,\r\n    width: 5000,\r\n\r\n    // Keep disabled for now until we find that performance degrades significantly when adding too many nodes.\r\n    // When we do enable async rendering, we need to take care of the selection rectangle after pasting nodes, which would be calculated too early (before rendering completed).\r\n    async: false,\r\n\r\n    autoResize: true,\r\n    keyboard: {\r\n      enabled: true,\r\n      global: false,\r\n    },\r\n    clipboard: {\r\n      enabled: true,\r\n      useLocalStorage: true,\r\n    },\r\n    selecting: {\r\n      enabled: true,\r\n      showNodeSelectionBox: true,\r\n      rubberband: true,\r\n    },\r\n    scroller: {\r\n      enabled: true,\r\n      pannable: true,\r\n      pageVisible: false,\r\n      pageBreak: false,\r\n      padding: 0,\r\n      modifiers: ['ctrl', 'meta'],\r\n    },\r\n    connecting: {\r\n      allowBlank: false,\r\n      allowMulti: true,\r\n      allowLoop: true,\r\n      allowNode: true,\r\n      allowEdge: false,\r\n      allowPort: true,\r\n      highlight: true,\r\n      router: {\r\n        name: 'manhattan',\r\n        args: {\r\n          startDirections: ['top', 'right', 'left', 'bottom'],\r\n          endDirections: ['top', 'right', 'left', 'bottom'],\r\n        },\r\n      },\r\n      // router: {\r\n      //   name: 'metro',\r\n      //   args: {\r\n      //     startDirections: ['bottom'],\r\n      //     endDirections: ['top'],\r\n      //   },\r\n      // },\r\n      //connector: 'elsa-connector',\r\n      connector: {\r\n        name: 'rounded',\r\n        args: {\r\n          radius: 20\r\n        },\r\n      },\r\n      snap: {\r\n        radius: 20,\r\n      },\r\n      validateMagnet({view, magnet}) {\r\n        const node = view.cell as Node;\r\n        const sourcePort = node.getPort(magnet.getAttribute('port'));\r\n        return sourcePort.type !== 'in'\r\n      },\r\n      validateConnection({sourceView, targetView, sourceMagnet, targetMagnet}) {\r\n        if (!sourceMagnet || !targetMagnet) {\r\n          return false;\r\n        }\r\n\r\n        const sourceNode = sourceView.cell as Node;\r\n        const sourcePort = sourceNode.getPort(sourceMagnet.getAttribute('port'));\r\n\r\n        const targetNode = targetView.cell as Node;\r\n        const targetPort = targetNode.getPort(targetMagnet.getAttribute('port'));\r\n\r\n        if (sourcePort.type === 'in') {\r\n          return false\r\n        }\r\n\r\n        if (targetPort.type !== 'in') {\r\n          return false\r\n        }\r\n\r\n        const portId = targetMagnet.getAttribute('port')!\r\n        const node = targetView.cell as Node\r\n        return !(targetPort && targetPort.connected);\r\n      },\r\n      createEdge() {\r\n        return graph.createEdge({\r\n          shape: 'elsa-edge',\r\n          zIndex: -1,\r\n        })\r\n      }\r\n    },\r\n    onPortRendered(args) {\r\n      const selectors = args.contentSelectors\r\n      const container = selectors && selectors.foContent\r\n      if (container) {\r\n        const port = document.createElement('div');\r\n        port.className = 'tw-rounded-full tw-border tw-border-2 tw-border-blue tw-h-8 tw-w-8';\r\n        port.innerHTML = `<p>done</p>`;\r\n        (container as HTMLElement).append(port);\r\n      }\r\n    },\r\n    mousewheel: {\r\n      enabled: true,\r\n      modifiers: ['ctrl', 'meta'],\r\n    },\r\n    history: {\r\n      enabled: true,\r\n      beforeAddCommand: (e: string, args: any) => {\r\n\r\n        if (args.key == 'tools')\r\n          return false;\r\n\r\n        const supportedEvents = ['cell:added', 'cell:removed', 'cell:change:*'];\r\n\r\n        return supportedEvents.indexOf(e) >= 0;\r\n      },\r\n    },\r\n    // Todo:\r\n    // minimap: {\r\n    //   enabled: true,\r\n    //   container: this.container,\r\n    // },\r\n    //interacting: () => state.interactingMap,\r\n  });\r\n\r\n  //graph.on('node:change:parent', assignParent);\r\n\r\n  graph.on('node:mousedown', ({node}) => {\r\n    node.toFront();\r\n  });\r\n\r\n  graph.on('edge:mouseenter', ({edge}) => {\r\n    edge.addTools([\r\n      'source-arrowhead',\r\n      'target-arrowhead',\r\n      {\r\n        name: 'button-remove',\r\n        args: {\r\n          distance: -30,\r\n        },\r\n      },\r\n    ])\r\n  });\r\n\r\n  graph.on('edge:mouseleave', ({edge}) => {\r\n    edge.removeTools()\r\n  });\r\n\r\n  graph.bindKey(['meta+c', 'ctrl+c'], () => {\r\n    const cells = graph.getSelectedCells()\r\n    if (cells.length) {\r\n      graph.copy(cells)\r\n    }\r\n    return false\r\n  });\r\n\r\n  graph.bindKey(['meta+x', 'ctrl+x'], () => {\r\n    const cells = graph.getSelectedCells()\r\n    if (cells.length) {\r\n      graph.cut(cells)\r\n    }\r\n    return false\r\n  });\r\n\r\n  graph.bindKey(['meta+v', 'ctrl+v'], async () => {\r\n    if (!graph.isClipboardEmpty()) {\r\n\r\n      const allActivities = [...getAllActivities()];\r\n      const cells = graph.getCellsInClipboard();\r\n      const activityCells = cells.filter(x => x.shape == 'activity');\r\n      const connectionCells = cells.filter(x => x.shape == 'elsa-edge');\r\n      const idMap = {};\r\n      const newCells = [];\r\n\r\n      for (const cell of activityCells) {\r\n        const clonedCell = cell.clone({keepId: false}) as any;\r\n        const activity = {...clonedCell.getData()} as Activity;\r\n        const activityTypeName = activity.type;\r\n        const activityDescriptor = descriptorsStore.activityDescriptors.find(x => x.typeName == activityTypeName);\r\n        const currentId = activity.id;\r\n        const idExists = !!allActivities.find(x => x.id == currentId);\r\n\r\n        if (idExists) {\r\n          const newId = await generateUniqueActivityName(allActivities, activityDescriptor);\r\n          idMap[currentId] = newId;\r\n          activity.id = newId;\r\n        }\r\n\r\n        clonedCell.replaceData(activity, {});\r\n        clonedCell.activity = activity;\r\n        clonedCell.isClone = true;\r\n        clonedCell.id = activity.id;\r\n        clonedCell.store.data.id = activity.id;\r\n\r\n        const clonedNode = clonedCell as Node;\r\n        const position = clonedNode.getPosition();\r\n        position.x += 64;\r\n        position.y += 64;\r\n        clonedNode.setPosition(position);\r\n\r\n        allActivities.push(activity);\r\n        newCells.push(clonedCell);\r\n      }\r\n\r\n      for (const cell of connectionCells) {\r\n        const connection = {...cell.getData()} as Connection;\r\n\r\n        connection.source = {\r\n          activity: idMap[connection.source.activity] ?? connection.source.activity,\r\n          port: deriveNewPortId(connection.source.port)\r\n        };\r\n\r\n        connection.target = {\r\n          activity: idMap[connection.target.activity] ?? connection.target.activity,\r\n          port: deriveNewPortId(connection.target.port)\r\n        };\r\n\r\n        const newEdgeProps = createEdge(connection);\r\n        const edge = graph.createEdge(newEdgeProps);\r\n        newCells.push(edge);\r\n      }\r\n\r\n      graph.addCell(newCells, {});\r\n\r\n      // Wait for the new cells to be rendered.\r\n      requestAnimationFrame(() => {\r\n        graph.cleanSelection();\r\n        graph.select(newCells);\r\n      });\r\n    }\r\n    return false\r\n  });\r\n\r\n  // undo\r\n  graph.bindKey(['meta+z', 'ctrl+z'], () => {\r\n    if (graph.history.canUndo()) {\r\n      graph.history.undo()\r\n    }\r\n    return false\r\n  });\r\n\r\n  // redo\r\n  graph.bindKey(['meta+y', 'ctrl+y'], () => {\r\n    if (graph.history.canRedo()) {\r\n      graph.history.redo()\r\n    }\r\n    return false\r\n  });\r\n\r\n  // select all\r\n  graph.bindKey(['meta+a', 'ctrl+a'], () => {\r\n    const nodes = graph.getNodes()\r\n    if (nodes) {\r\n      graph.select(nodes)\r\n    }\r\n  });\r\n\r\n  // delete\r\n  graph.bindKey('del', () => {\r\n    const cells = graph.getSelectedCells()\r\n    if (cells.length) {\r\n      graph.removeCells(cells)\r\n    }\r\n  });\r\n\r\n  // zoom\r\n  graph.bindKey(['ctrl+1', 'meta+1'], () => {\r\n    const zoom = graph.zoom()\r\n    if (zoom < 1.5) {\r\n      graph.zoom(0.1)\r\n    }\r\n  });\r\n\r\n  graph.bindKey(['ctrl+2', 'meta+2'], () => {\r\n    const zoom = graph.zoom()\r\n    if (zoom > 0.5) {\r\n      graph.zoom(-0.1)\r\n    }\r\n  });\r\n\r\n  graph.on(\"node:moving\", ({node}) => {\r\n    autoOrientConnections(graph, node);\r\n  });\r\n\r\n  return graph;\r\n}\r\n"]}