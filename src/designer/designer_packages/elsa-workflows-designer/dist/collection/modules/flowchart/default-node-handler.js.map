{"version":3,"file":"default-node-handler.js","sourceRoot":"","sources":["../../../src/modules/flowchart/default-node-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata';\r\nimport {Node} from \"@antv/x6\";\r\nimport {Container, Service} from \"typedi\"\r\nimport {ActivityNodeHandler, UINodeContext, UIPortContext} from \"./activity-node-handler\";\r\nimport {PortProviderContext, PortProviderRegistry} from \"../../services\";\r\nimport {PortType} from \"../../models\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\n@Service()\r\nexport class DefaultNodeHandler implements ActivityNodeHandler {\r\n  private readonly portProviderRegistry: PortProviderRegistry;\r\n\r\n  constructor() {\r\n    this.portProviderRegistry = Container.get(PortProviderRegistry);\r\n  }\r\n\r\n  createDesignerNode(context: UINodeContext): Node.Metadata {\r\n    const {activityDescriptor, activity, x, y} = context;\r\n    const portModels = this.createPorts(context);\r\n\r\n    return {\r\n      id: activity.id,\r\n      shape: 'activity',\r\n      activity: activity,\r\n      activityDescriptor: activityDescriptor,\r\n      x: x,\r\n      y: y,\r\n      data: activity,\r\n      ports: portModels\r\n    } as Node.Metadata;\r\n  }\r\n\r\n  createPorts(context: UIPortContext): Array<any> {\r\n    const {activityDescriptor, activity} = context;\r\n    const provider = this.portProviderRegistry.get(activityDescriptor.typeName);\r\n    const providerContext: PortProviderContext = {activityDescriptor, activity};\r\n    const inPorts = [{name: 'In', displayName: null, mode: PortType.Flow}];\r\n    let outPorts = provider.getOutboundPorts(providerContext).filter(x => x.type == PortType.Flow);\r\n\r\n    // In a flowchart, always add a Done port to connect the next node.\r\n    if (outPorts.length == 0)\r\n      outPorts = [{name: 'Done', displayName: 'Done', type: PortType.Flow}];\r\n\r\n    if (outPorts.length == 1)\r\n      outPorts[0].displayName = null;\r\n\r\n    const leftPortModels = inPorts.map((x) => ({\r\n      id: uuid() + '_' + x.name,\r\n      group: 'left',\r\n      attrs: !!x.displayName ? {\r\n        text: {\r\n          text: x.displayName\r\n        },\r\n      } : null,\r\n      type:'in',\r\n      position:'left'\r\n    }));\r\n\r\n    const rightPortModels = outPorts.map((x) => ({\r\n      id: uuid() + '_' + x.name,\r\n      group: 'right',\r\n      attrs: {\r\n        text: {\r\n          text: x.displayName\r\n        },\r\n      },\r\n      type: 'out',\r\n      position: 'right'\r\n    }));\r\n\r\n    const portModels = [...leftPortModels, ...rightPortModels];\r\n\r\n    return portModels;\r\n  }\r\n}\r\n"]}