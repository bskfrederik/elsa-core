{"version":3,"file":"default-activity-template.js","sourceRoot":"","sources":["../../../src/modules/flowchart/default-activity-template.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, h, Prop, State, Event, EventEmitter, Listen, Element} from \"@stencil/core\";\r\nimport {ActivityIconProducer, ActivityIconRegistry, PortProviderRegistry} from \"../../services\";\r\nimport {Container} from \"typedi\";\r\nimport {Activity, ActivityDescriptor, ActivityKind, ActivitySelectedArgs, ChildActivitySelectedArgs, EditChildActivityArgs, Port, PortType} from \"../../models\";\r\nimport descriptorsStore from \"../../data/descriptors-store\";\r\nimport {isNullOrWhitespace} from \"../../utils\";\r\nimport FlowchartTunnel from \"./state\";\r\n\r\n@Component({\r\n  tag: 'elsa-default-activity-template',\r\n  shadow: false\r\n})\r\nexport class DefaultActivityTemplate {\r\n  private readonly iconRegistry: ActivityIconRegistry;\r\n  private readonly portProviderRegistry: PortProviderRegistry;\r\n  private activityDescriptor: ActivityDescriptor;\r\n  private icon: ActivityIconProducer;\r\n  private portElements: Array<HTMLElement> = [];\r\n\r\n  constructor() {\r\n    this.iconRegistry = Container.get(ActivityIconRegistry);\r\n    this.portProviderRegistry = Container.get(PortProviderRegistry);\r\n  }\r\n\r\n  @Prop({attribute: 'activity-type'}) activityType: string;\r\n  @Prop({attribute: 'activity-type-version'}) activityTypeVersion: number = 1;\r\n  @Prop({attribute: 'display-type'}) displayType: string;\r\n  @Prop({attribute: 'activity-id'}) activityId: string;\r\n  @Event() editChildActivity: EventEmitter<EditChildActivityArgs>;\r\n  @Event() childActivitySelected: EventEmitter<ChildActivitySelectedArgs>;\r\n  @State() private selectedPortName: string;\r\n\r\n  componentWillLoad() {\r\n    const iconRegistry = this.iconRegistry;\r\n    const activityType = this.activityType;\r\n    const activityTypeVersion = this.activityTypeVersion ?? 0;\r\n    this.activityDescriptor = descriptorsStore.activityDescriptors.find(x => x.typeName == activityType && x.version == activityTypeVersion);\r\n    this.icon = iconRegistry.has(activityType) ? iconRegistry.get(activityType) : null;\r\n  }\r\n\r\n  componentWillRender() {\r\n    this.portElements = [];\r\n  }\r\n\r\n  render() {\r\n    const activityDescriptor = this.activityDescriptor;\r\n    const activityId = this.activityId;\r\n    const portProvider = this.portProviderRegistry.get(activityDescriptor.typeName);\r\n\r\n    return (\r\n      <FlowchartTunnel.Consumer>\r\n        {({nodeMap}) => {\r\n          const activity: Activity = nodeMap[activityId];\r\n          const ports = portProvider.getOutboundPorts({activityDescriptor, activity});\r\n          const embeddedPorts = ports.filter(x => x.type == PortType.Embedded && x.isBrowsable !== false);\r\n          const canStartWorkflow: boolean = activity?.customProperties?.canStartWorkflow ?? activity?.customProperties?.CanStartWorkflow ?? activity?.canStartWorkflow ?? false;\r\n          const icon = this.icon;\r\n          const hasIcon = !!icon;\r\n          const textColor = canStartWorkflow ? 'tw-text-white' : 'tw-text-gray-700';\r\n          const isTrigger = activityDescriptor?.kind == ActivityKind.Trigger;\r\n          const backgroundColor = canStartWorkflow ? isTrigger ? 'tw-bg-green-400' : 'tw-bg-blue-400' : 'tw-bg-white';\r\n          const iconBackgroundColor = isTrigger ? 'tw-bg-green-500' : 'tw-bg-blue-500';\r\n          const borderColor = canStartWorkflow ? isTrigger ? 'tw-border-green-600' : 'tw-border-blue-600' : 'tw-border-gray-300';\r\n          const displayTypeIsPicker = this.displayTypeIsPicker;\r\n          const displayTypeIsEmbedded = this.displayTypeIsEmbedded;\r\n          const containerCssClass = displayTypeIsEmbedded ? '' : 'tw-drop-shadow-md';\r\n          const contentCssClass = displayTypeIsPicker ? 'tw-px-2 tw-py-2' : 'tw-px-4 tw-pt-0 tw-pb-3';\r\n          let displayText = activity?.metadata?.displayText;\r\n\r\n          if (isNullOrWhitespace(displayText))\r\n            displayText = activityDescriptor?.displayName;\r\n\r\n          if (embeddedPorts.length == 0 || displayTypeIsPicker) {\r\n            return (\r\n              <div>\r\n                <div class={`activity-wrapper tw-border ${borderColor} ${backgroundColor} ${containerCssClass} tw-rounded tw-text-white tw-overflow-hidden`}>\r\n                  <div class=\"elsa-toolbar-menu-wrapper tw-flex tw-flex-row\">\r\n                    <div class={`tw-flex tw-flex-shrink tw-items-center ${iconBackgroundColor}`}>\r\n                      {this.renderIcon(icon)}\r\n                    </div>\r\n                    <div class=\"tw-flex tw-items-center\">\r\n                      <div class={displayTypeIsPicker ? `tw-m-2` : 'tw-m-3'}>\r\n                        <span class={`${textColor}`}>{displayText}</span>\r\n                        <div>\r\n                          {this.renderPorts(activity, embeddedPorts)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div>\r\n                <div class={`activity-wrapper tw-border ${borderColor} ${backgroundColor} ${containerCssClass} tw-rounded tw-overflow-hidden`}>\r\n                  <div class=\"tw-text-white\">\r\n                    <div class={`tw-flex tw-flex-shrink tw-items-center tw-py-3 ${ hasIcon ? 'tw-pr-3' : 'tw-px-3' } ${iconBackgroundColor}`}>\r\n                      {this.renderIcon(icon)}\r\n                      <span>{displayText}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"elsa-toolbar-menu-wrapper tw-flex tw-flex-col\">\r\n                    <div class=\"tw-flex tw-items-center\">\r\n                      <div class={contentCssClass}>\r\n                        {this.renderPorts(activity, embeddedPorts)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n        }}\r\n      </FlowchartTunnel.Consumer>\r\n    )\r\n  }\r\n\r\n  private renderIcon = (icon?: ActivityIconProducer): string => {\r\n    const iconCssClass = this.displayTypeIsPicker ? 'tw-px-2' : 'tw-px-4';\r\n\r\n    if (!icon)\r\n      return undefined;\r\n\r\n    return (\r\n      <div class={`${iconCssClass} tw-py-1`}>\r\n        {icon()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderPorts = (activity: Activity, embeddedPorts: Port[]) => {\r\n\r\n    if (this.displayTypeIsPicker || !this.activityDescriptor)\r\n      return;\r\n\r\n    if (embeddedPorts.length == 0)\r\n      return;\r\n\r\n    return (\r\n      <div class=\"activity-ports tw-mt-2 tw-flex tw-space-x-2\">\r\n        {embeddedPorts.map(port => this.renderPort(activity, port))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private renderPort = (activity: Activity, port: Port) => {\r\n    const canStartWorkflow = activity?.canStartWorkflow == true;\r\n    const displayTextClass = canStartWorkflow ? 'tw-text-white' : 'tw-text-gray-600';\r\n    const borderColor = port.name == this.selectedPortName ? 'tw-border-blue-600' : 'tw-border-gray-300';\r\n    const activityDescriptor = this.activityDescriptor;\r\n    const portProvider = this.portProviderRegistry.get(activityDescriptor.typeName);\r\n    const activityProperty = portProvider.resolvePort(port.name, {activity, activityDescriptor}) as Activity;\r\n\r\n    const renderActivityProperty = () => {\r\n\r\n      if (!activityProperty) {\r\n        return (\r\n          <div class=\"tw-relative tw-block tw-w-full tw-border-2 tw-border-gray-300 tw-border-dashed tw-rounded-lg tw-p-3 tw-text-center focus:tw-outline-none\">\r\n            <a href=\"#\"\r\n               onClick={e => this.onEditChildActivityClick(e, activity, port)}\r\n               onMouseDown={e => e.stopPropagation()}\r\n               class=\"tw-text-gray-400 hover:tw-text-gray-600\">\r\n              <div class=\"tw-flex-grow\">\r\n                <span class={`tw-text-sm ${displayTextClass}`}>{port.displayName}</span>\r\n              </div>\r\n            </a>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      const propertyIsArray = Array.isArray(activityProperty);\r\n\r\n      if (!propertyIsArray) {\r\n        return (\r\n          <div class={`tw-relative tw-block tw-w-full tw-border-2 ${borderColor} tw-border-solid tw-rounded-lg tw-p-3 tw-text-center focus:tw-outline-none`}>\r\n            <div class=\"tw-flex tw-space-x-2\">\r\n              <a href=\"#\"\r\n                 onClick={e => this.onEditChildActivityClick(e, activity, port)}\r\n                 onMouseDown={e => e.stopPropagation()}>\r\n                <div class=\"tw-flex-grow\">\r\n                  <span class={`tw-text-sm ${displayTextClass}`}>{port.displayName}</span>\r\n                </div>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div class={`tw-relative tw-block tw-w-full tw-border-2 ${borderColor} tw-border-solid tw-rounded-lg tw-p-5 tw-text-center focus:tw-outline-none`}>\r\n          <div class=\"tw-flex tw-space-x-2\">\r\n            <a href=\"#\"\r\n               onClick={e => this.onEditChildActivityClick(e, activity, port)}\r\n               onMouseDown={e => e.stopPropagation()}>\r\n              <div class=\"tw-flex-grow\">\r\n                <span class={`tw-text-sm ${displayTextClass}`}>{port.displayName}</span>\r\n              </div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div class=\"activity-port\" data-port-name={port.name} ref={el => this.portElements.push(el)}>\r\n        <div>\r\n          {renderActivityProperty()}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private get displayTypeIsPicker(): boolean {\r\n    return this.displayType == \"picker\";\r\n  }\r\n\r\n  private get displayTypeIsEmbedded(): boolean {\r\n    return this.displayType == \"embedded\";\r\n  }\r\n\r\n  @Listen('click', {target: 'window'})\r\n  private onWindowClicked(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    for (const portElement of this.portElements)\r\n      if (portElement.contains(target))\r\n        return;\r\n\r\n    this.selectedPortName = null;\r\n  }\r\n\r\n  private onEditChildActivityClick = (e: MouseEvent, parentActivity: Activity, port: Port) => {\r\n    e.preventDefault();\r\n    this.editChildActivity.emit({parentActivityId: parentActivity.id, port: port});\r\n  };\r\n}\r\n"]}