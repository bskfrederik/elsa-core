{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../src/modules/workflow-contexts/services/api.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAC,kBAAkB,EAAC,MAAM,mBAAmB,CAAC;AAG9C,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;EAG9B,YAAY,QAA4B;IAUhC,kBAAa,GAAG,KAAK,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IATtE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,CAAC;EAED,KAAK,CAAC,IAAI;IACR,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9C,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAA+B,wCAAwC,CAAC,CAAC;IAC9G,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;EACnC,CAAC;CAGF,CAAA;AAdY,mBAAmB;EAD/B,OAAO,EAAE;mCAIc,kBAAkB;GAH7B,mBAAmB,CAc/B;SAdY,mBAAmB","sourcesContent":["import {Service} from \"typedi\";\r\nimport {ElsaClientProvider} from \"../../../services\";\r\n\r\n@Service()\r\nexport class WorkflowContextsApi {\r\n  private provider: ElsaClientProvider;\r\n\r\n  constructor(provider: ElsaClientProvider) {\r\n    this.provider = provider;\r\n  }\r\n\r\n  async list(): Promise<Array<WorkflowContextProviderDescriptor>> {\r\n    const httpClient = await this.getHttpClient();\r\n    const response = await httpClient.get<ListWorkflowContextsResponse>('workflow-contexts/provider-descriptors');\r\n    return response.data.descriptors;\r\n  }\r\n\r\n  private getHttpClient = async () => await this.provider.getHttpClient();\r\n}\r\n\r\nexport interface ListWorkflowContextsResponse {\r\n  descriptors: Array<WorkflowContextProviderDescriptor>;\r\n}\r\n\r\nexport interface WorkflowContextProviderDescriptor {\r\n  name: string;\r\n  type: string;\r\n}\r\n"]}