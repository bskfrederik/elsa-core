{"version":3,"file":"labels-api.js","sourceRoot":"","sources":["../../../src/modules/labels/labels-api.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,EAAC,kBAAkB,EAAC,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAGxB,IAAM,SAAS,GAAf,MAAM,SAAS;EAGpB,YAAY,QAA4B;IACtC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,CAAC;EAED,KAAK,CAAC,IAAI;IACR,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAc,QAAQ,CAAC,CAAC;IAC7D,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,KAAK,CAAC,MAAM,CAAC,IAAY,EAAE,WAAoB,EAAE,KAAc;IAC7D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,IAAI,CAAQ,QAAQ,EAAE,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAC,CAAC,CAAC;IACpF,OAAO,QAAQ,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,IAAY,EAAE,WAAoB,EAAE,KAAc;IACzE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,IAAI,CAAQ,UAAU,EAAE,EAAE,EAAE,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAC,CAAC,CAAC;IAC1F,OAAO,QAAQ,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,KAAK,CAAC,MAAM,CAAC,EAAU;IACrB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IACzD,OAAO,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC;EACjC,CAAC;CACF,CAAA;AA9BY,SAAS;EADrB,OAAO,EAAE;mCAIc,kBAAkB;GAH7B,SAAS,CA8BrB;SA9BY,SAAS;AAiCf,IAAM,2BAA2B,GAAjC,MAAM,2BAA2B;EAGtC,YAAY,QAA4B;IACtC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,CAAC;EAED,KAAK,CAAC,GAAG,CAAC,mBAA2B;IACnC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAe,wBAAwB,mBAAmB,SAAS,CAAC,CAAC;IAC1G,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,KAAK,CAAC,MAAM,CAAC,mBAA2B,EAAE,QAAuB;IAC/D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;IACvD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,IAAI,CAAe,wBAAwB,mBAAmB,SAAS,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;IACjI,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;EAC7B,CAAC;CAEF,CAAA;AAnBY,2BAA2B;EADvC,OAAO,EAAE;mCAIc,kBAAkB;GAH7B,2BAA2B,CAmBvC;SAnBY,2BAA2B","sourcesContent":["import {List} from \"../../models\";\r\nimport {Label} from \"./models\";\r\nimport {ElsaClientProvider} from \"../../services\";\r\nimport {Service} from \"typedi\";\r\n\r\n@Service()\r\nexport class LabelsApi {\r\n  private provider: ElsaClientProvider;\r\n\r\n  constructor(provider: ElsaClientProvider) {\r\n    this.provider = provider;\r\n  }\r\n\r\n  async list(): Promise<Array<Label>> {\r\n    const httpClient = await this.provider.getHttpClient();\r\n    const response = await httpClient.get<List<Label>>('labels');\r\n    return response.data.items;\r\n  }\r\n\r\n  async create(name: string, description?: string, color?: string): Promise<Label> {\r\n    const httpClient = await this.provider.getHttpClient();\r\n    const response = await httpClient.post<Label>('labels', {name, description, color});\r\n    return response.data;\r\n  }\r\n\r\n  async update(id: string, name: string, description?: string, color?: string): Promise<Label> {\r\n    const httpClient = await this.provider.getHttpClient();\r\n    const response = await httpClient.post<Label>(`labels/${id}`, {name, description, color});\r\n    return response.data;\r\n  }\r\n\r\n  async delete(id: string): Promise<boolean> {\r\n    const httpClient = await this.provider.getHttpClient();\r\n    const response = await httpClient.delete(`labels/${id}`);\r\n    return response.status === 204;\r\n  }\r\n}\r\n\r\n@Service()\r\nexport class WorkflowDefinitionLabelsApi {\r\n  private provider: ElsaClientProvider;\r\n\r\n  constructor(provider: ElsaClientProvider) {\r\n    this.provider = provider;\r\n  }\r\n\r\n  async get(definitionVersionId: string): Promise<Array<string>> {\r\n    const httpClient = await this.provider.getHttpClient();\r\n    const response = await httpClient.get<List<string>>(`workflow-definitions/${definitionVersionId}/labels`);\r\n    return response.data.items;\r\n  }\r\n\r\n  async update(definitionVersionId: string, labelIds: Array<string>): Promise<Array<string>> {\r\n    const httpClient = await this.provider.getHttpClient();\r\n    const response = await httpClient.post<List<string>>(`workflow-definitions/${definitionVersionId}/labels`, {labelIds: labelIds});\r\n    return response.data.items;\r\n  }\r\n\r\n}\r\n"]}