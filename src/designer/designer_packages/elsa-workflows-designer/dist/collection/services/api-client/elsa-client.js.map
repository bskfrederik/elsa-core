{"version":3,"file":"elsa-client.js","sourceRoot":"","sources":["../../../src/services/api-client/elsa-client.ts"],"names":[],"mappings":";;;;;;;;;AAAC,OAAO,KAA0C,MAAM,OAAO,CAAC;AAChE,OAAO,EAAC,SAAS,EAAE,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC1C,OAAO,EAAC,QAAQ,EAAC,MAAM,cAAc,CAAC;AACtC,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,cAAc,EAAC,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AACxC,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAC7C,MAAM,OAAO,UAAU;EAKrB,YAAY,UAAyB;IACnC,IAAI,CAAC,WAAW,GAAG,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;IAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;IAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC;EAChD,CAAC;CACF;AAGM,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;EAI7B,YAAoB,cAA8B;IAA9B,mBAAc,GAAd,cAAc,CAAgB;EAClD,CAAC;EAEM,KAAK,CAAC,aAAa;IACxB,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU;MACnB,OAAO,IAAI,CAAC,UAAU,CAAC;IAEzB,OAAO,IAAI,CAAC,UAAU,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;EACnF,CAAC;EAEM,KAAK,CAAC,aAAa;IACxB,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU;MACnB,OAAO,IAAI,CAAC,UAAU,CAAC;IAEzB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9C,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC;EACtD,CAAC;CACF,CAAA;AArBY,kBAAkB;EAD9B,OAAO,EAAE;mCAK4B,cAAc;GAJvC,kBAAkB,CAqB9B;SArBY,kBAAkB;AAuB/B,KAAK,UAAU,gBAAgB,CAAC,WAAmB;EACjD,MAAM,MAAM,GAAuB;IACjC,OAAO,EAAE,WAAW;GACrB,CAAC;EAEF,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;EACzC,MAAM,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,EAAE,EAAC,MAAM,EAAC,CAAC,CAAC;EACzE,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;EACxC,MAAM,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,EAAE,EAAC,UAAU,EAAC,CAAC,CAAC;EAE7E,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["ï»¿import axios, {AxiosInstance, AxiosRequestConfig} from \"axios\";\r\nimport {Container, Service} from 'typedi';\r\nimport {EventBus} from '../event-bus';\r\nimport 'reflect-metadata';\r\nimport {ServerSettings} from '../server-settings';\r\nimport {DescriptorsApi} from \"./descriptors-api\";\r\nimport {DesignerApi} from \"./designer-api\";\r\nimport {EventTypes} from \"../../models\";\r\nimport {ScriptingApi} from \"./scripting-api\";\r\nexport class ElsaClient {\r\n  descriptors: DescriptorsApi;\r\n  designer: DesignerApi;\r\n  scripting: ScriptingApi;\r\n\r\n  constructor(httpClient: AxiosInstance) {\r\n    this.descriptors = new DescriptorsApi(httpClient);\r\n    this.designer = new DesignerApi(httpClient);\r\n    this.scripting = new ScriptingApi(httpClient);\r\n  }\r\n}\r\n\r\n@Service()\r\nexport class ElsaClientProvider {\r\n  private httpClient: AxiosInstance;\r\n  private elsaClient: ElsaClient;\r\n\r\n  constructor(private serverSettings: ServerSettings) {\r\n  }\r\n\r\n  public async getHttpClient(): Promise<AxiosInstance> {\r\n    if (!!this.httpClient)\r\n      return this.httpClient;\r\n\r\n    return this.httpClient = await createHttpClient(this.serverSettings.baseAddress);\r\n  }\r\n\r\n  public async getElsaClient(): Promise<ElsaClient> {\r\n    if (!!this.elsaClient)\r\n      return this.elsaClient;\r\n\r\n    const httpClient = await this.getHttpClient();\r\n    return this.elsaClient = new ElsaClient(httpClient);\r\n  }\r\n}\r\n\r\nasync function createHttpClient(baseAddress: string): Promise<AxiosInstance> {\r\n  const config: AxiosRequestConfig = {\r\n    baseURL: baseAddress\r\n  };\r\n\r\n  const eventBus = Container.get(EventBus);\r\n  await eventBus.emit(EventTypes.HttpClient.ConfigCreated, this, {config});\r\n  const httpClient = axios.create(config);\r\n  await eventBus.emit(EventTypes.HttpClient.ClientCreated, this, {httpClient});\r\n\r\n  return httpClient;\r\n}\r\n"]}